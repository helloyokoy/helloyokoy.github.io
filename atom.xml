<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[BryanFu Blog]]></title>
  <link href="http://helloyokoy.github.io/atom.xml" rel="self"/>
  <link href="http://helloyokoy.github.io/"/>
  <updated>2015-11-02T16:02:49+08:00</updated>
  <id>http://helloyokoy.github.io/</id>
  <author>
    <name><![CDATA[BryanFu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Surge]]></title>
    <link href="http://helloyokoy.github.io/blog/surge/"/>
    <updated>2015-11-02T11:24:57+08:00</updated>
    <id>http://helloyokoy.github.io/blog/surge</id>
    <content type="html"><![CDATA[<p>iOS 9 有个激动人心的新特性 Network Extension 弥补了 iOS 长久以来无法定制底层网络 app 的不足。APN 代理不安全，成本高；虚拟专网速度不佳，爱掉线，阻塞问题严重…</p>

<p><img src="https://g.owind.com/content/images/2015/10/surgelogo.jpg" alt="alt text" title="surge" /></p>

<p>那么对于专业用户来说比较完美的方案必须是安全的，可低成本的，最大网络速度，无连接状态，国内外分流完美的 iOS 方案，那么现在这个堕落的愿望已经实现了，感谢苹果公司这么给(chi)力(dao)的 API 和 app 开发大牛。</p>

<p>Surge.app （App Store）是一款给专业用户使用的网络调试工具，使用比较复杂。它的工作原理是使用 packet tunnel provider，然后给系统套上一个代理，后端转发支持 http 代理，SSL 代理，和 Socks 代理。如果 app 尊重系统代理，就会走这个代理，如果不尊重，我们也可以通过规则强制流量走系统 tun 设备达到支持全部 app 的目的。用代理的好处是可以跟踪和调试网络，容易分流，ACL 功能更多，弹性更大更方便。</p>

<!--more-->

<p>简单的开始可以直接导入一份 conf 文件（URL 或者 iTunes），例如<a href="https://gist.github.com/janlay/b57476c72a93b7e622a6" title="link">这里</a>的，对于不求甚解的用户来说你可以直接使用完事（但是你还是要改改服务器地址用户名什么的。。或者直接从供应商处获取导入 URL）。</p>

<p>配置的结构大概是这样，对于专业用户来说，理解应该不难</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span> (rules)</span> <a href="http://helloyokoy.github.io/downloads/code/rules">download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
</pre></td><td class="code"><pre><code class=""><span class="line"><span class="k">[General]</span>
</span><span class="line"><span class="c1"># warning, notify, info, verbose</span>
</span><span class="line"><span class="na">loglevel</span> <span class="o">=</span> <span class="s">notify</span>
</span><span class="line">
</span><span class="line"><span class="k">[Proxy]</span>
</span><span class="line"><span class="c1"># http, https, socks5</span>
</span><span class="line"><span class="c1"># SSLedge 使用 https，老式 APNp 用 http</span>
</span><span class="line"><span class="na">Proxy</span> <span class="o">=</span> <span class="s">https, server, port, username, password, ciphers </span>
</span><span class="line">
</span><span class="line"><span class="k">[Rule]</span>
</span><span class="line"><span class="c1"># 域名关键字，干掉不想要的请求</span>
</span><span class="line"><span class="err">DOMAIN-KEYWORD,umeng.co,REJECT</span>
</span><span class="line"><span class="err">...</span>
</span><span class="line">
</span><span class="line"><span class="c1"># 常用网站优先匹配，加快速度。使用代理转发，完全没有 CDN 被干扰的问题~</span>
</span><span class="line"><span class="err">DOMAIN-SUFFIX,cn,DIRECT</span>
</span><span class="line"><span class="err">DOMAIN-SUFFIX,qq.com,DIRECT</span>
</span><span class="line"><span class="err">DOMAIN-SUFFIX,ls.apple.com,DIRECT</span>
</span><span class="line"><span class="err">DOMAIN-SUFFIX,apple.com,Proxy</span>
</span><span class="line"><span class="err">...</span>
</span><span class="line">
</span><span class="line"><span class="c1"># 强制这些不尊重系统代理的请求走 packet-tunnel-provider，解决 Twitter.app 和 Mail.app 收发邮件问题</span>
</span><span class="line"><span class="err">DOMAIN-KEYWORD,twitter,Proxy,force-remote-dns</span>
</span><span class="line"><span class="err">DOMAIN-KEYWORD,gmail,Proxy,force-remote-dns</span>
</span><span class="line"><span class="c1"># instagram.app 也没问题</span>
</span><span class="line"><span class="err">DOMAIN-KEYWORD,instagram,Proxy,force-remote-dns</span>
</span><span class="line"><span class="c1"># Telegram.app 也没问题</span>
</span><span class="line"><span class="err">IP-CIDR,91.108.56.0/22,Proxy,force-remote-dns</span>
</span><span class="line"><span class="err">...</span>
</span><span class="line">
</span><span class="line"><span class="c1"># LAN</span>
</span><span class="line"><span class="err">IP-CIDR,192.168.0.0/16,DIRECT</span>
</span><span class="line"><span class="err">...</span>
</span><span class="line">
</span><span class="line"><span class="c1"># 其余的请求使用 GEOIP 判断服务器所在地，如果是国内的，走直连，搞定</span>
</span><span class="line"><span class="err">GEOIP,CN,DIRECT</span>
</span><span class="line">
</span><span class="line"><span class="c1"># 最后 Matchall，丢给代理</span>
</span><span class="line"><span class="err">FINAL,Proxy</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>通过规则定义和组合，必然可以满足专业用户的需求，非常强大。配置可以使用 app 自带的 GUI，当然也有文本编辑方式。</p>

<p>由于 Surge 的核心和是个 http proxy，有些处理不了的请求我们可以强制 bypass 掉，走系统接口，这个可以在代理设置-高级处设置，如果你不太懂，请不要随意设置。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS9 适配]]></title>
    <link href="http://helloyokoy.github.io/blog/ios9-adaption/"/>
    <updated>2015-10-27T12:44:03+08:00</updated>
    <id>http://helloyokoy.github.io/blog/ios9-adaption</id>
    <content type="html"><![CDATA[<h2 id="ios9atshttps">1. iOS9网络适配_ATS：改用更安全的HTTPS</h2>

<p>[摘要]为了强制增强数据访问安全， iOS9 默认会把 <del>所有的http请求</del> 所有从<code>NSURLConnection</code> 、 <code>CFURL</code> 、 <code>NSURLSession</code>发出的 HTTP 请求，都改为 HTTPS 请求：iOS9.x-SDK编译时，默认会让所有从<code>NSURLConnection</code> 、 <code>CFURL</code> 、 <code>NSURLSession</code>发出的 HTTP 请求统一采用TLS 1.2 协议。因为 AFNetworking 现在的版本底层使用了 <code>NSURLConnection</code> ，众多App将被影响（基于iOS8.x-SDK的App不受影响）。服务器因此需要更新，以解析相关数据。如不更新，可通过在 Info.plist 中声明，倒退回不安全的网络请求。而这一做法，官方文档称为ATS，全称为App Transport Security，是iOS9的一个新特性。</p>

<p>一个符合 ATS 要求的 HTTPS，应该满足如下条件：</p>

<ol>
  <li>Transport Layer Security协议版本要求TLS1.2以上</li>
  <li>服务的Ciphers配置要求支持Forward Secrecy等</li>
  <li>证书签名算法符合ATS要求等</li>
</ol>

<p>官方文档 <a href="https://developer.apple.com/library/prerelease/ios/technotes/App-Transport-Security-Technote/index.html#//apple_ref/doc/uid/TP40016240"> <strong><em>App Transport Security Technote</em></strong> </a> 对ATS 的介绍：</p>

<p><img src="http://i58.tinypic.com/ajsf0j.jpg" alt="enter image description here" /></p>

<p>注：有童鞋反映：服务器已支持TLS 1.2 SSL ，但iOS9上还是不行，还要进行本文提出的适配操作。</p>

<p>那是因为：要注意 App Transport Security 要求 TLS 1.2，而且它要求站点使用支持forward secrecy协议的密码。证书也要求是符合ATS规格的，ATS只信任知名CA颁发的证书，小公司所使用的 self signed certificate，还是会被ATS拦截。。因此慎重检查与你的应用交互的服务器是不是符合ATS的要求非常重要。对此，建议使用下文中给出的NSExceptionDomains，并将你们公司的域名挂在下面。下文也会详细描述该问题。</p>

<p>官方文档 <a href="https://developer.apple.com/library/prerelease/ios/technotes/App-Transport-Security-Technote/index.html#//apple_ref/doc/uid/TP40016240"> <strong><em>App Transport Security Technote</em></strong> </a> 对CA颁发的证书要求：</p>

<blockquote>
  <p>Certificates must be signed using a SHA256 or better signature hash algorithm, with either a 2048 bit or greater RSA key or a 256 bit or greater Elliptic-Curve (ECC) key.
Invalid certificates result in a hard failure and no connection</p>
</blockquote>

<!--more-->

<p>在讨论之前，跟往常一样，先说下iOS程序猿们最关心的问题：</p>

<h3 id="section">跟我有毛关系？需要我加班吗？！</h3>

<p>首先咱们来看下业内对Apple这一做法的评论：</p>

<p><img src="https://i.imgur.com/Q17QDG0.png" alt="enter image description here" /></p>

<p>这是某社交App上讨论，看来业内还是吐槽声和肯定声同在。</p>

<p>结论是：</p>

<blockquote>
  <p>跟你很有关系，加班吧，少年！</p>
</blockquote>

<p>书归正传【严肃脸】，我们正式讨论下 WHAT，WHY，HOW：</p>

<ol>
  <li>WHAT（什么是SSL/TLS？跟HTTP和HTTPS有什么关系）</li>
  <li>WHY（以前的HTTP不是也能用吗？为什么要用SSL/TLS？！Apple是不是又在反人类？）</li>
  <li>HOW（如何适配？—弱弱地问下：加班要多久？）</li>
</ol>

<h3 id="whatssltlshttphttps">WHAT（什么是SSL/TLS？跟HTTP和HTTPS有什么关系）</h3>

<p>什么是SSL/TLS？
SSL你一定知道，在此不做赘述。主要说下什么是TLS，还有跟HTTP和HTTPS有什么关系。</p>

<p>TLS 是 SSL 新的别称：</p>

<p>“TLS1.0”之于“SSL3.1”，犹“公元2015”之于“民国104”，“一千克”之于“一公斤”：称呼不同，意思相同。</p>

<p>SSL 3.0版本之后的迭代版本被重新命名为TLS 1.0：<strong>TLS 1.0＝SSL 3.1</strong>。所以我们平常也经常见到 “SSL/TLS” 这种说法。</p>

<p>目前，应用最广泛的是TLS 1.0，接下来是SSL 3.0。目前主流浏览器都已经实现了TLS 1.2的支持。</p>

<p>常用的有下面这些：</p>

<ul>
  <li>SSL 2.0</li>
  <li>SSL 3.0</li>
  <li>TLS 1.0 (SSL 3.1)</li>
  <li>TLS 1.1 (SSL 3.1)</li>
  <li>TLS 1.2 (SSL 3.1)</li>
</ul>

<p>那为什么标题是“使用HTTPS”而没有提及SSL和TLS什么事？
“SSL/TLS”跟HTTP和HTTPS有什么关系？</p>

<p>要理解这个，要看下他们之间的关系：</p>

<blockquote>
  <p>HTTP+SSL/TLS+TCP = HTTPS</p>
</blockquote>

<p><img src="http://www.zytrax.com/tech/survival/ssl-layers.gif" alt="HTTP+SSL/TLS+TCP" /></p>

<p>或者</p>

<blockquote>
  <p>HTTPS = “HTTP over SSL”</p>
</blockquote>

<p>也就是说：</p>

<blockquote>
  <p>Apple让你的HTTP采用SSL/TLS协议，就是让你从HTTP转到HTTPS。而这一做法，官方文档称为ATS，全称为App Transport Security。</p>
</blockquote>

<h3 id="whyhttpssltlsapple">WHY（以前的HTTP不是也能用吗？为什么要用SSL/TLS？Apple是不是又在反人类？）</h3>

<blockquote>
  <p>不使用SSL/TLS的HTTP通信，就是不加密的通信！</p>
</blockquote>

<p>不使用SSL/TLS的HTTP通信，所有信息明文传播，带来了三大风险：</p>

<ol>
  <li>窃听风险（eavesdropping）：第三方可以获知通信内容。</li>
  <li>篡改风险（tampering）：第三方可以修改通信内容。</li>
  <li>冒充风险（pretending）：第三方可以冒充他人身份参与通信。</li>
</ol>

<p>SSL/TLS协议是为了解决这三大风险而设计的，希望达到：
 1. 所有信息都是加密传播，第三方无法窃听。
 2. 具有校验机制，一旦被篡改，通信双方会立刻发现。
 3. 配备身份证书，防止身份被冒充。</p>

<p>SSL/TLS的作用，打个比方来讲：</p>

<p>如果原来的 HTTP 是塑料水管，容易被戳破；那么如今新设计的 HTTPS 就像是在原有的塑料水管之外，再包一层金属水管（SSL/TLS协议）。一来，原有的塑料水管照样运行；二来，用金属加固了之后，不容易被戳破。</p>

<h3 id="how---">HOW（如何适配？—弱弱地问下：加班要多久？）</h3>

<p>正如文章开头所说：</p>

<blockquote>
  <p>TLS 1.2 协议 强制增强数据访问安全 系统 Foundation 框架下的“相关网络请求”将不再默认使用 HTTP 等不安全的网络协议，而默认采用 TLS 1.2。服务器因此需要更新，以解析相关数据。如不更新，可通过在 Info.plist 中声明，倒退回不安全的网络请求。</p>
</blockquote>

<p>总之：</p>

<blockquote>
  <p>要么咱们iOS程序猿加班，要么后台加班：</p>
</blockquote>

<p>方案一：立即让公司的服务端升级使用TLS 1.2，以解析相关数据。</p>

<p>方案二：虽Apple不建议，但可通过在 Info.plist 中声明，倒退回不安全的网络请求依然能让App访问指定http，甚至任意的http，具体做法见gif图，示例Demo见 <a href="https://github.com/ChenYilong/iOS9AdaptationTips">Demo1</a></p>

<p><img src="https://github.com/ChenYilong/iOS9AdaptationTips/blob/master/Demo1_iOS9网络适配_改用更安全的HTTPS/微博%40iOS程序犭袁/http问题.gif" alt="enter image description here" /></p>

<p>这也是官方文档和WWDC给出的解决方案：</p>

<ol>
  <li>
    <p><a href="https://developer.apple.com/library/prerelease/ios/releasenotes/General/WhatsNewIniOS/Articles/iOS9.html#//apple_ref/doc/uid/TP40016198-DontLinkElementID_13">Apple官方文档</a>  <img src="https://i.imgur.com/eTgSHZY.png" alt="enter image description here" /></p>
  </li>
  <li>
    <p><a href="https://developer.apple.com/videos/wwdc/2015/?id=703">WWDC Session： “Networking with NSURLSession” session（ 【WWDC 2015 session 703, “Privacy and Your App” O网页链接 】, 时间在30:18左右）</a></p>
  </li>
</ol>

<p><img src="https://i.imgur.com/Tc0fS6p.jpg" alt="enter image description here" /></p>

<p><img src="https://i.imgur.com/v2Tskwh.jpg" alt="enter image description here" /></p>

<p><img src="https://cdn-images-1.medium.com/max/800/1*9-VeRXU5SAI6lLZeWLI0hQ.png" alt="enter image description here" /></p>

<p>即使你的应用使用的是：你没有权限控制的CDN (Content Delivery Network)，而且它不支持HTTPS！</p>

<p>也别担心，Apple都替你考虑好了：</p>

<p><img src="http://i61.tinypic.com/ae9tgj.jpg" alt="enter image description here" />
 正如你在上图中看到的：苹果官方提供了一些可选配置项来决定是否开启ATS模式，也就是可以选择开启或者不开启。</p>

<p>开发者可以针对某些确定的URL不使用ATS，这需要在工程中的info.plist中标记NSExceptionDomains。在NSExceptionDomains字典中，可以显式的指定一些不使用ATS的URL。这些你可以使用的例子可以是:</p>

<ul>
  <li>
    <p>NSIncludesSubdomains</p>
  </li>
  <li>
    <p>NSExceptionAllowInsecureHTTPLoads</p>
  </li>
  <li>
    <p>NSExceptionRequiresForwardSecrecy</p>
  </li>
  <li>
    <p>NSExceptionMinimumTLSVersion</p>
  </li>
  <li>
    <p>NSThirdPartyExceptionAllowsInsecureHTTPLoads</p>
  </li>
  <li>
    <p>NSThirdPartyExceptionMinimumTLSVersion</p>
  </li>
  <li>
    <p>NSThirdPartyExceptionRequiresForwardSecrecy</p>
  </li>
</ul>

<p>这些关键字使我们可以更加细致的设置针对不使用ATS的域名情况下禁用ATS或者一些特殊的ATS选项。</p>

<p>你可能注意到一些关键字像是使用了一些其他关键字中的词但是在前面加上了”ThirdParty”字样，比如列表里最后三个：</p>

<ul>
  <li>
    <p>NSThirdPartyExceptionAllowsInsecureHTTPLoads</p>
  </li>
  <li>
    <p>NSThirdPartyExceptionMinimumTLSVersion</p>
  </li>
  <li>
    <p>NSThirdPartyExceptionRequiresForwardSecrecy</p>
  </li>
</ul>

<p>在功能上，这些关键字与不含有”ThirdParty”的关键字有同样的效果。而且实际运行中所调用的代码将会完全忽略是否使用”ThirdParty”关键字。你应该使用适用于你的场景的关键字而不必过多考虑这些。</p>

<p>关于App Transport Security，每个应用都属于4个大类当中的一类。我们来看看每一个大类都是怎样影响应用的。</p>

<table>
  <thead>
    <tr>
      <th>–</th>
      <th>分类名</th>
      <th>解释</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1.</td>
      <td>HTTPS Only （只有HTTPS，所有情况下都使用ATS）</td>
      <td>如果你的应用只基于支持HTTPS的服务器，那么你太幸运了。你的应用不需要做任何改变。但是，注意App Transport Security要求TLS 1.2而且它要求站点使用支持forward secrecy协议的密码。证书也要求是符合ATS规格的。因此慎重检查与你的应用交互的服务器是不是符合ATS的要求非常重要。</td>
    </tr>
    <tr>
      <td>2.</td>
      <td>Mix &amp; Match（混合）</td>
      <td>你的应用与一个不符合ATS要求的服务器工作是很有可能的。在这种情况下，你需要告诉操作系统哪些站点是涉及到的然后在你的应用的 Info.plist文件中指明哪些要求没有达到。</td>
    </tr>
    <tr>
      <td>3.</td>
      <td>Opt Out（禁用ATS）</td>
      <td>如果你在创建一个网页浏览器，那么你有一个更大的麻烦。因为你不可能知道你的用户将要访问那个网页，你不可能指明这些网页是否支持ATS要求且在HTTPS上传输。在这种情况下，除了全部撤销 App Transport Security 没有其它办法。</td>
    </tr>
    <tr>
      <td>4.</td>
      <td>Opt Out With Exceptions（除特殊情况外，都不使用ATS）</td>
      <td>当你的应用撤消了App Transport Security,，但同时定义了一些例外。这非常有用就是当你的应用从很多的服务器上取数据，但是也要与一个你可控的API交互。在这种情况下，在应用的Info.plist文件中指定任何加载都是被允许的，但是你也指定了一个或多个例外来表明哪些是必须要求 App Transport Security的。</td>
    </tr>
  </tbody>
</table>

<p>下面分别做一下介绍：</p>

<h4 id="https-only-httpsats">1.HTTPS Only （只有HTTPS，所有情况下都使用ATS）</h4>
<p>如果你的应用只基于支持HTTPS的服务器，那么你太幸运了。你的应用不需要做任何改变。</p>

<p>唯一需要做的事情就是使用  <code>NSURLSession</code> 。如果你的开发目标是iOS 9或者 OS X EI Capitan之后，ATS 的最佳实践将会应用到所有基于 <code>NSURLSession</code> 的网络。</p>

<p>但也有人遇到过这样的疑惑：服务器已支持TLS 1.2 SSL ，但iOS9上还是不行，还要进行本文提出的适配操作。</p>

<p>那是因为：要注意 App Transport Security 要求 TLS 1.2，而且它要求站点使用支持forward secrecy协议的密码。证书也要求是符合ATS规格的，ATS只信任知名CA颁发的证书，小公司所使用的 self signed certificate，还是会被ATS拦截。。因此慎重检查与你的应用交互的服务器是不是符合ATS的要求非常重要。对此，建议使用下文中给出的NSExceptionDomains，并将你们公司的域名挂在下面。</p>

<p>官方文档 <a href="https://developer.apple.com/library/prerelease/ios/technotes/App-Transport-Security-Technote/index.html#//apple_ref/doc/uid/TP40016240"> <strong><em>App Transport Security Technote</em></strong> </a> 对CA颁发的证书要求：</p>

<blockquote>
  <p>Certificates must be signed using a SHA256 or better signature hash algorithm, with either a 2048 bit or greater RSA key or a 256 bit or greater Elliptic-Curve (ECC) key.
Invalid certificates result in a hard failure and no connection</p>
</blockquote>

<h4 id="mix--match">2.Mix &amp; Match（混合）</h4>
<p>你的应用与一个不符合ATS要求的服务器工作是很有可能的，</p>

<p>当你遇到以下三个不符合 ATS 要求的服务器的域名时：</p>

<ol>
  <li>api.insecuredomain.com</li>
  <li>cdn.domain.com</li>
  <li>thatotherdomain.com</li>
</ol>

<p>你可以分别设置如下：</p>

<ol>
  <li>api.insecuredomain.com</li>
</ol>

<p>Info.plist 配置中的XML源码如下所示:</p>

<p>```XML
    <key>NSAppTransportSecurity</key>
    <dict>
        <key>NSExceptionDomains</key>
        <dict>
            <key>api.insecuredomain.com</key>
            <dict></dict></dict></dict></p>

<pre><code>            &lt;!--允许App进行不安全的HTTP请求--&gt;
            &lt;key&gt;NSExceptionAllowsInsecureHTTPLoads&lt;/key&gt;
            &lt;true/&gt;
            
            &lt;!--适用于这个特定域名下的所有子域--&gt;
            &lt;key&gt;NSIncludesSubdomains&lt;/key&gt;
            &lt;true/&gt;
        &lt;/dict&gt;
    &lt;/dict&gt;
&lt;/dict&gt;  ```
</code></pre>

<p>在 plist 文件里显示如下：</p>

<p><img src="http://i59.tinypic.com/fxtk0j.jpg" alt="enter image description here" /></p>

<p>我们定义的第一个“例外”（Exception）告诉ATS当与这个子域交互的时候撤销了必须使用HTTPS的要求。注意这个仅仅针对在“例外”（Exception）中声明了的子域。非常重要的一点是要理解NSExceptionAllowsInsecureHTTPLoads关键字并不仅仅只是与使用HTTPS相关。这个“例外”（Exception）指明了对于那个域名，所有的App Transport Security的要求都被撤销了。</p>

<ol>
  <li>cdn.domain.com
 Info.plist 配置中的XML源码如下所示:</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"> ```XML
</span><span class="line">	<span class="nt">&lt;key&gt;</span>NSAppTransportSecurity<span class="nt">&lt;/key&gt;</span>
</span><span class="line">	<span class="nt">&lt;dict&gt;</span>
</span><span class="line">		<span class="nt">&lt;key&gt;</span>NSExceptionDomains<span class="nt">&lt;/key&gt;</span>
</span><span class="line">		<span class="nt">&lt;dict&gt;</span>
</span><span class="line">			<span class="nt">&lt;key&gt;</span>cdn.somedomain.com<span class="nt">&lt;/key&gt;</span>
</span><span class="line">			<span class="nt">&lt;dict&gt;</span>
</span><span class="line">				<span class="nt">&lt;key&gt;</span>NSThirdPartyExceptionMinimumTLSVersion<span class="nt">&lt;/key&gt;</span>
</span><span class="line">				<span class="nt">&lt;string&gt;</span>TLSv1.1<span class="nt">&lt;/string&gt;</span>
</span><span class="line">			<span class="nt">&lt;/dict&gt;</span>
</span><span class="line">		<span class="nt">&lt;/dict&gt;</span>
</span><span class="line">	<span class="nt">&lt;/dict&gt;</span>
</span><span class="line"> ```
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在 plist 文件里显示如下：</p>

<p><img src="http://i58.tinypic.com/29atm5k.jpg" alt="enter image description here" /></p>

<p>很可能你的应用是与一个支持HTTPS传输数据的服务器交互，但是并没有使用TLS 1.2或更高。在这种情况下，你定义一个“例外”（Exception），它指明应该使用的最小的TLS的版本。这比完全撤销那个域名的App Transport Security要更好更安全。</p>

<ol>
  <li>thatotherdomain.com</li>
</ol>

<p>Info.plist 配置中的XML源码如下所示:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"> ```XML
</span><span class="line">       <span class="nt">&lt;key&gt;</span>NSAppTransportSecurity<span class="nt">&lt;/key&gt;</span>
</span><span class="line">        <span class="nt">&lt;dict&gt;</span>
</span><span class="line">            <span class="nt">&lt;key&gt;</span>NSExceptionDomains<span class="nt">&lt;/key&gt;</span>
</span><span class="line">            <span class="nt">&lt;dict&gt;</span>
</span><span class="line">                <span class="nt">&lt;key&gt;</span>thatotherdomain.com<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                <span class="nt">&lt;dict&gt;</span>
</span><span class="line">                    <span class="c">&lt;!--适用于这个特定域名下的所有子域--&gt;</span>
</span><span class="line">                    <span class="nt">&lt;key&gt;</span>NSIncludesSubdomains<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                    <span class="nt">&lt;true/&gt;</span>
</span><span class="line">                    <span class="c">&lt;!--扩展可接受的密码列表：这个域名可以使用不支持 forward secrecy 协议的密码--&gt;</span>
</span><span class="line">                    <span class="nt">&lt;key&gt;</span>NSExceptionRequiresForwardSecrecy<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                    <span class="nt">&lt;false/&gt;</span>
</span><span class="line">                    <span class="c">&lt;!--允许App进行不安全的HTTP请求--&gt;</span>
</span><span class="line">                    <span class="nt">&lt;key&gt;</span>NSExceptionAllowsInsecureHTTPLoads<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                    <span class="nt">&lt;true/&gt;</span>
</span><span class="line">                    <span class="c">&lt;!--在这里声明所支持的 TLS 最低版本--&gt;</span>
</span><span class="line">                    <span class="nt">&lt;key&gt;</span>NSExceptionMinimumTLSVersion<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                    <span class="nt">&lt;string&gt;</span>TLSv1.1<span class="nt">&lt;/string&gt;</span>
</span><span class="line">                <span class="nt">&lt;/dict&gt;</span>
</span><span class="line">            <span class="nt">&lt;/dict&gt;</span>
</span><span class="line">        <span class="nt">&lt;/dict&gt;</span>
</span><span class="line"> ```
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在 plist 文件里显示如下：</p>

<p><img src="http://i61.tinypic.com/w6xn43.jpg" alt="enter image description here" /></p>

<p><code>NSIncludesSubdomains</code> 关键字告诉 App Transport Security 这个“例外”（Exception）适用于这个特定域名的所有子域。这个“例外”（Exception）还进一步通过扩展可接受的密码列表来定义这个域名可以使用不支持forward secrecy( <code>NSExceptionRequiresForwardSecrecy</code> )  协议的密码。想了解更多关于forward secrecy的信息，推荐去看官方文档  <a href="https://developer.apple.com/library/prerelease/mac/technotes/App-Transport-Security-Technote/index.html"> <strong><em>Apple’s technote</em></strong> </a> 。</p>

<p>如果你的App中同时用到了这三个域名，那么应该是这样：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"> ```XML
</span><span class="line">     <span class="nt">&lt;key&gt;</span>NSAppTransportSecurity<span class="nt">&lt;/key&gt;</span>
</span><span class="line">        <span class="nt">&lt;dict&gt;</span>
</span><span class="line">            <span class="nt">&lt;key&gt;</span>NSExceptionDomains<span class="nt">&lt;/key&gt;</span>
</span><span class="line">            <span class="nt">&lt;dict&gt;</span>
</span><span class="line">                <span class="nt">&lt;key&gt;</span>api.insecuredomain.com<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                <span class="nt">&lt;dict&gt;</span>
</span><span class="line">                    <span class="nt">&lt;key&gt;</span>NSExceptionAllowsInsecureHTTPLoads<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                    <span class="nt">&lt;false/&gt;</span>
</span><span class="line">                <span class="nt">&lt;/dict&gt;</span>
</span><span class="line">                <span class="nt">&lt;key&gt;</span>cdn.somedomain.com<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                <span class="nt">&lt;dict&gt;</span>
</span><span class="line">                    <span class="nt">&lt;key&gt;</span>NSThirdPartyExceptionMinimumTLSVersion<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                    <span class="nt">&lt;string&gt;</span>TLSv1.1<span class="nt">&lt;/string&gt;</span>
</span><span class="line">                <span class="nt">&lt;/dict&gt;</span>
</span><span class="line">                <span class="nt">&lt;key&gt;</span>thatotherdomain.com<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                <span class="nt">&lt;dict&gt;</span>
</span><span class="line">                    <span class="nt">&lt;key&gt;</span>NSIncludesSubdomains<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                    <span class="nt">&lt;true/&gt;</span>
</span><span class="line">                    <span class="nt">&lt;key&gt;</span>NSExceptionRequiresForwardSecrecy<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                    <span class="nt">&lt;false/&gt;</span>
</span><span class="line">                <span class="nt">&lt;/dict&gt;</span>
</span><span class="line">            <span class="nt">&lt;/dict&gt;</span>
</span><span class="line">        <span class="nt">&lt;/dict&gt;</span>
</span><span class="line"> ```
</span><span class="line">
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img src="http://i61.tinypic.com/13ynggk.jpg" alt="enter image description here" /></p>

<h4 id="opt-outats">3. Opt Out（禁用ATS）</h4>
<p>上面是比较严谨的做法，指定了能访问哪些特定的HTTP。当然也有暴力的做法：
彻底倒退回不安全的HTTP网络请求，能任意进行HTTP请求，比如你在开发一款浏览器App，或者你想偷懒，或者后台想偷懒，或者公司不给你升级服务器。。。</p>

<p>你可以在Info.plist 配置中改用下面的XML源码：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"> ```XML
</span><span class="line">    <span class="nt">&lt;key&gt;</span>NSAppTransportSecurity<span class="nt">&lt;/key&gt;</span>
</span><span class="line">    <span class="nt">&lt;dict&gt;</span>
</span><span class="line">        <span class="c">&lt;!--彻底倒退回不安全的HTTP网络请求，能任意进行HTTP请求 (不建议这样做)--&gt;</span>
</span><span class="line">	    <span class="nt">&lt;key&gt;</span>NSAllowsArbitraryLoads<span class="nt">&lt;/key&gt;</span>
</span><span class="line">	    <span class="nt">&lt;true/&gt;</span>
</span><span class="line">    <span class="nt">&lt;/dict&gt;</span>
</span><span class="line"> ```
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在 plist 文件里显示如下：</p>

<p><img src="http://i57.tinypic.com/9uq2c7.jpg" alt="enter image description here" /></p>

<h4 id="opt-out-with-exceptionsats">4. Opt Out With Exceptions（除特殊情况外，都不使用ATS）</h4>

<p>上面已经介绍了三种情景，还有一种可能你也会遇到：</p>

<p>当你的应用撤消了App Transport Security,，但同时定义了一些“例外”（Exception）。当你的应用从很多的服务器上取数据，但是也要与一个你可控的API交互。在这种情况下，在应用的Info.plist文件中指定任何加载都是被允许的，但是你也指定了一个或多个“例外”（Exception）来表明哪些是必须要求 App Transport Security的。下面是Info.plist文件应该会有的内容：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"> ```XML
</span><span class="line"><span class="nt">&lt;key&gt;</span>NSAppTransportSecurity<span class="nt">&lt;/key&gt;</span>
</span><span class="line">        <span class="nt">&lt;dict&gt;</span>
</span><span class="line">            <span class="nt">&lt;key&gt;</span>NSAllowsArbitraryLoads<span class="nt">&lt;/key&gt;</span>
</span><span class="line">            <span class="nt">&lt;true/&gt;</span>
</span><span class="line">            <span class="nt">&lt;key&gt;</span>NSExceptionDomains<span class="nt">&lt;/key&gt;</span>
</span><span class="line">            <span class="nt">&lt;dict&gt;</span>
</span><span class="line">                <span class="nt">&lt;key&gt;</span>api.tutsplus.com<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                <span class="nt">&lt;dict&gt;</span>
</span><span class="line">                    <span class="nt">&lt;key&gt;</span>NSExceptionAllowsInsecureHTTPLoads<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                    <span class="nt">&lt;false/&gt;</span>
</span><span class="line">                <span class="nt">&lt;/dict&gt;</span>
</span><span class="line">            <span class="nt">&lt;/dict&gt;</span>
</span><span class="line">        <span class="nt">&lt;/dict&gt;</span>
</span><span class="line"> ```
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在 plist 文件里显示如下：</p>

<p><img src="http://i62.tinypic.com/de1rw9.jpg" alt="enter image description here" /></p>

<p><del>【注：以上在Info.plist配置中的做法已经验证可行，但目前Apple的prerelease版本的官方文档并未提及Info.plist中配置的代码，我将密切关注官方文档，如有提及，再来更新[本文](https://github.com/ChenYilong/iOS9AdaptationTips) .你若发现官方文档有提及了，也可在[微博@iOS程序犭袁](http://weibo.com/luohanchenyilong/)通知下我。】（官方文档已经有阐述）</del></p>

<h4 id="certificate-transparency">Certificate Transparency</h4>

<p>虽然ATS大多数安全特性都是默认可用的，Certificate Transparency 是必须设置的。如果你有支持Certificate Transparency的证书，你可以检查NSRequiresCertificateTransparency关键字来使用Certificate Transparency。再次强调，如果你的证书不支持Certificate Transparency，此项需要设置为不可用。</p>

<p>如果需要调试一些由于采用了ATS而产生的问题，需要设置CFNETWORK_DIAGNOSTICS为1，这样就会打印出包含被访问的URL和ATS错误在内的NSURLSession错误信息。要确保处理了遇到的所有的错误消息，这样才能使ATS易于提高可靠性和扩展性。</p>

<h4 id="q-a">Q-A</h4>

<p>Q：我用xcode7编译的app，如果不在plist里面加关键字说明，ios9下不能进行网络请求，因为我们服务器并不支持 TLS 1.2 ，我要是直接下载app store上的，什么也没有做，也是能正常网络请求。</p>

<p>A：本文中所罗列的新特性，多数情况下指的是 iOS9.X-SDK 新特性，AppStore 的版本是基于 iOS8.X-SDK或 iOS7.X-SDK，所以并不受 iOS9新特性约束。也就是说：<strong>Xcode7给iOS8打设备包可以请求到网络，Xcode7给iOS9设备打的包请求不到网络，Xcode7和iOS9缺一不可，才需要网络适配ATS。</strong></p>

<p>那么，如何确认自己项目所使用的 SDK？在Targets-&gt;Build Setting–&gt;Architectures</p>

<p><img src="http://i58.tinypic.com/amsa9u.jpg" alt="enter image description here" /></p>

<p>Q：服务器已支持TLS 1.2 SSL ，但iOS9上还是不行，还要进行本文提出的适配操作。</p>

<p>A：那是因为：要注意 App Transport Security 要求 TLS 1.2，而且它要求站点使用支持forward secrecy协议的密码。证书也要求是符合ATS规格的，ATS只信任知名CA颁发的证书，小公司所使用的 self signed certificate，还是会被ATS拦截。。因此慎重检查与你的应用交互的服务器是不是符合ATS的要求非常重要。对此，建议使用下文中给出的NSExceptionDomains，并将你们公司的域名挂在下面。</p>

<p>官方文档 <a href="https://developer.apple.com/library/prerelease/ios/technotes/App-Transport-Security-Technote/index.html#//apple_ref/doc/uid/TP40016240"> <strong><em>App Transport Security Technote</em></strong> </a> 对CA颁发的证书要求：</p>

<blockquote>
  <p>Certificates must be signed using a SHA256 or better signature hash algorithm, with either a 2048 bit or greater RSA key or a 256 bit or greater Elliptic-Curve (ECC) key.
Invalid certificates result in a hard failure and no connection</p>
</blockquote>

<p>Q：我使用的是第三方的网络框架，比如 AFNetworking 、ASIHTTPRequest、CFSocket 等，这个有影响没有？</p>

<p>A： AFNetworking 有影响，其它没影响。</p>

<p>ATS 是只针对 <code>NSURLConnection</code> 、 <code>CFURL</code> 、 <code>NSURLSession</code> ，如果底层涉及到这三个类就会有影响。</p>

<p>现在的 AFNetworking 的 AFHTTPRequestOperationManager 实现是使用的 <code>NSURLConnection</code> 。</p>

<p>但 AFNetworking 也有更新计划，移除 <code>NSURLConnection</code> 相关API，迁移到 AFHTTPSessionManager ，但还未执行，详情见：<a href="https://github.com/AFNetworking/AFNetworking/issues/2806">https://github.com/AFNetworking/AFNetworking/issues/2806</a>。</p>

<p>Q：试了一下禁用 ATS 的方法 但是还是无法联网 仍然提示要使用https?</p>

<blockquote>
  <p>App Transport Security has blocked a cleartext HTTP (http://) resource load since it is insecure. Temporary exceptions can be configured via your app's Info.plist file.</p>
</blockquote>
<p>&lt;/p&gt;The resource could not be loaded because the App Transport Security policy requires the use of a secure connection.</p>

<p>A：遇到这类问题，90%是出现在“一个 Project 多 Target ”的情况下，所以
请确保你修改的，确实是你的 Target 所属的 Info.plist ！</p>

<p>如何确认？请前往这里，确认你 Target 所属的 Info.plist 究竟是哪个：</p>

<p>Project -&gt; Your Target -&gt; Build Settings -&gt; Info.plist File</p>

<p><img src="http://i60.tinypic.com/sbrfrl.jpg" alt="enter image description here" /></p>

<p>或者更直截了当一点，直接修改：</p>

<p>Project -&gt; Your Target —&gt;info－&gt; Custom iOS target properties－&gt; 添加禁用 ATS 的属性</p>

<p><img src="http://i60.tinypic.com/zvbt7b.jpg" alt="enter image description here" /></p>

<p>还有一种可能性是：禁用 ATS 的代码粘贴进 plist 时，位置不对，可以尝试放在 diwuhang</p>

<p>Q：我的项目是“一个 Project 多 Target ”，按照本文禁用 ATS 的方法，是不是每个 Info.plist 都要修改？</p>

<p>A：不需要，用到哪个 Target 修改哪个的 Info.plist ，Target 是独立的，不受其他 Target 的影响，也不会影响其他 Target。</p>

<p>Q：如何检测我们公司 HTTPS 是否符合 ATS 的要求？</p>

<p>A：
如果你的 App 的服务也在升级以适配ATS要求，可以使用如下的方式进行校验：</p>

<p>在OS X EI Capitan系统的终端中通过nscurl命令来诊断检查你的HTTPS服务配置是否满足Apple的ATS要求:</p>

<p><code>Objective-C
 $ nscurl --verbose --ats-diagnostics https://&lt;your_server_domain&gt;
</code></p>

<p>当然，你也可以让公司服务端的同事参考Apple提供官方指南App Transport Security Technote进行服务的升级配置以满足ATS的要求：</p>

<p>一个符合 ATS 要求的 HTTPS，应该满足如下条件：</p>

<ol>
  <li>Transport Layer Security协议版本要求TLS1.2以上</li>
  <li>服务的Ciphers配置要求支持Forward Secrecy等</li>
  <li>证书签名算法符合ATS要求等</li>
</ol>

<h2 id="demo2ios9">2.Demo2_iOS9新特性_更灵活的后台定位</h2>

<p>【iOS9在定位的问题上，有一个坏消息一个好消息】坏消息：如果不适配iOS9，就不能偷偷在后台定位（不带蓝条，见图）！好消息：将允许出现这种场景：同一App中的多个location manager：一些只能在前台定位，另一些可在后台定位，并可随时开启或者关闭特定location manager的后台定位。</p>

<p>如果没有请求后台定位的权限，也是可以在后台定位的，不过会带蓝条：
 ![enter image description here][9]
  [9]: https://i.imgur.com/UoqGHlG.png</p>

<p>如何偷偷在后台定位：请求后台定位权限：</p>

<pre><code> // 1. 实例化定位管理器
_locationManager = [[CLLocationManager alloc] init];
// 2. 设置代理
_locationManager.delegate = self;
// 3. 定位精度
[_locationManager setDesiredAccuracy:kCLLocationAccuracyBest];
// 4.请求用户权限：分为：⓵只在前台开启定位⓶在后台也可定位，
//注意：建议只请求⓵和⓶中的一个，如果两个权限都需要，只请求⓶即可，
//⓵⓶这样的顺序，将导致bug：第一次启动程序后，系统将只请求⓵的权限，⓶的权限系统不会请求，只会在下一次启动应用时请求⓶
if ([[[UIDevice currentDevice] systemVersion] floatValue] &gt;= 8) {
    //[_locationManager requestWhenInUseAuthorization];//⓵只在前台开启定位
    [_locationManager requestAlwaysAuthorization];//⓶在后台也可定位
}
// 5.iOS9新特性：将允许出现这种场景：同一app中多个location manager：一些只能在前台定位，另一些可在后台定位（并可随时禁止其后台定位）。
if ([[[UIDevice currentDevice] systemVersion] floatValue] &gt;= 9) {
    _locationManager.allowsBackgroundLocationUpdates = YES;
}
// 6. 更新用户位置
[_locationManager startUpdatingLocation];
</code></pre>

<p>但是如果照着这种方式尝试，而没有配置Info.plist，100%你的程序会崩溃掉，并报错：</p>

<blockquote>
  <p>*** Assertion failure in -[CLLocationManager setAllowsBackgroundLocationUpdates:], /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocationFramework_Sim/CoreLocation-1808.1.5/Framework/CoreLocation/CLLocationManager.m:593</p>
</blockquote>

<p>这个问题，有两种方式可以解决：</p>

<p>第一种：</p>

<p>要将  Info.plist 配置如下：
 <img src="https://i.imgur.com/MAoKbUe.png" alt="enter image description here" /></p>

<p>对应的 Info.plist 的XML源码是：</p>

<pre><code>&lt;key&gt;NSLocationAlwaysUsageDescription&lt;/key&gt;
&lt;string&gt;微博@iOS程序犭袁 请求后台定位权限&lt;/string&gt;

&lt;key&gt;UIBackgroundModes&lt;/key&gt;
&lt;array&gt;
    &lt;string&gt;location&lt;/string&gt;
&lt;/array&gt;
</code></pre>

<p>第二种：</p>

<p>在对应 target 的 Capabilities -&gt; Background Modes -&gt; 开启 Location Updates</p>

<p><img src="http://cdn2.raywenderlich.com/wp-content/uploads/2014/12/background_modes.png" alt="enter image description here" /></p>

<h2 id="section-1">3.企业级分发</h2>

<p>有两处变化：</p>

<ol>
  <li>iOS9以后，企业级分发ipa包将遭到与Mac上dmg安装包一样的待遇：默认不能安装，也不再出现“信任按钮”</li>
  <li>iOS9以后，企业分发时可能存在：下载的ipa包与网页两者的 bundle ID 无法匹配而导致下载失败的情况</li>
</ol>

<h3 id="ios9ipamacdmg">1. iOS9以后，企业级分发ipa包将遭到与Mac上dmg安装包一样的待遇：默认不能安装，也不再出现“信任按钮”</h3>

<p>iOS9之前，企业级分发十分方便：点击App出现“信任按钮”，</p>

<p><img src="https://i.imgur.com/aSmM8bk.png" alt="enter image description here" /></p>

<p>iOS9以后，企业级分发ipa包将遭到与Mac上dmg安装包一样的待遇：默认不能安装，也不再出现“信任按钮”</p>

<p><img src="http://i58.tinypic.com/2zecm83.jpg" alt="enter image description here" /></p>

<p>必须让用户进行gif图中的设置：</p>

<p><img src="https://i.imgur.com/PXM235L.gif" alt="enter image description here" /></p>

<h3 id="ios9ipa-bundle-id-">2. iOS9以后，企业分发时可能存在：下载的ipa包与网页两者的 bundle ID 无法匹配而导致下载失败的情况</h3>

<p>iOS9升级后众多企业分发的 app 已经出现了不能安装的情况，而iOS8或更早的系统不受影响。那是因为从iOS9以后，系统会在 ipa 包下载完之后，拿ipa包中的 bundle ID 与网页中的 plist 文件中的 bundle ID 进行比对，不一致不允许安装。</p>

<p>错误提示如下：</p>

<p><img src="http://i57.tinypic.com/28jckus.jpg" alt="enter image description here" /></p>

<p>网页中的 plist 文件中的 bundle ID 的作用可参考 <a href="http://blog.sina.com.cn/s/blog_6afb7d800101fa16.html">《iOS:苹果企业证书通过网页分发安装app》</a> 。</p>

<p>正如这篇文章提到的，“网页中的 plist 文件”是习惯的叫法，也有人称作“manifest文件”，比如 <a href="http://gknops.github.io/adHocGenerate/">这篇文章</a>。</p>

<p>而iOS9之前，苹果不会检查这一项，因此iOS9之前可以安装。</p>

<p>导致这一错误的原因除了粗心，还有开发者是故意设置不一致，据开发者说：</p>

<blockquote>
  <p>当初服务器 plist 的 bundle id 上故意做成成不一致。是为了解决一些人安装不上的问题。</p>
</blockquote>

<p>详情可参考： <a href="http://www.cocoachina.com/bbs/read.php?tid-324230-fpage-2-page-1.html">《升级到ios 9，企业版发布现在无法安装成功了，有人遇到了这种问题吗？》</a></p>

<p>如何知道是因为 bundle id 不一致造成的无法安装？</p>

<p>通过查看设备上的日志信息：有一个 itunesstored 进程提示安装信息：</p>

<pre><code>  itunesstored →  &lt;Warning&gt;: [Download]: Download task did finish: 8 for download: 2325728577585828282
  itunesstored →  &lt;Warning&gt;: [ApplicationWorkspace] Installing download: 2325728577585828282 with step(s): Install
  itunesstored →  &lt;Warning&gt;: [ApplicationWorkspace]: Installing software package with bundleID: com.***.***: bundleVersion: 1.01 path: /var/mobile/Media/Downloads/2325728577585828282/-1925357977307433048
  itunesstored →  &lt;Warning&gt;: BundleValidator: Failed bundleIdentifier: com.***.**** does not match expected bundleIdentifier: com.***.*********
  itunesstored →  &lt;Warning&gt;: [ApplicationWorkspace]: Bundle validated for bundleIdentifier: com.****.******success: 0
  itunesstored →  &lt;Warning&gt;: LaunchServices: Uninstalling placeholder for app &lt;LSApplicationProxy: 0x12677be70&gt; com.****.*******(Placeholder) &lt;file:///private/var/mobile/Containers/Bundle/Application/B62D8EA3-2052-4393-8A7E-3FD27228BFC2/2325728577585828282.app&gt;
  itunesstored →  &lt;Warning&gt;: LaunchServices: Uninstalling app &lt;LSApplicationProxy: 0x12677be70&gt; com.****.*****(Placeholder) &lt;file:///private/var/mobile/Containers/Bundle/Application/B62D8EA3-2052-4393-8A7E-3FD27228BFC2/2325728577585828282.app&gt;
</code></pre>

<p>其中的这一句很重要：</p>

<pre><code> itunesstored →  &lt;Warning&gt;: BundleValidator: Failed bundleIdentifier: com.***.**** does not match expected bundleIdentifier: com.***.*********
</code></pre>

<p>经过核对，果然是.ipa文件中真实的Bundle ID和manifest文件中配置的信息不匹配，然后测试发现：</p>

<blockquote>
  <p>iOS 9是校验bundle-identifier值的，而iOS 9以下版本是不校验，一旦iOS 9发现bundle-identifier不匹配，即使下载成功了，也会 Uninstall(日志中提示的)app的。</p>
</blockquote>

<p>适配方法：</p>

<ol>
  <li>两者的 bundle id 修改一致</li>
</ol>

<p>一旦出现iOS9能够安装企业版本APP，iOS9以下版本不能安装，一定先查看安装日志，然后核对每个参数配置。</p>

<p>manifest文件的参考配置。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"> ```XML
</span><span class="line"> <span class="cp">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot;</span>
</span><span class="line"><span class="cp">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span>
</span><span class="line"><span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
</span><span class="line"><span class="nt">&lt;dict&gt;</span>
</span><span class="line">   <span class="c">&lt;!-- array of downloads. --&gt;</span>
</span><span class="line">   <span class="nt">&lt;key&gt;</span>items<span class="nt">&lt;/key&gt;</span>
</span><span class="line">   <span class="nt">&lt;array&gt;</span>
</span><span class="line">       <span class="nt">&lt;dict&gt;</span>
</span><span class="line">           <span class="c">&lt;!-- an array of assets to download --&gt;</span>
</span><span class="line">           <span class="nt">&lt;key&gt;</span>assets<span class="nt">&lt;/key&gt;</span>
</span><span class="line">           <span class="nt">&lt;array&gt;</span>
</span><span class="line">               <span class="c">&lt;!-- software-package: the ipa to install. --&gt;</span>
</span><span class="line">               <span class="nt">&lt;dict&gt;</span>
</span><span class="line">                   <span class="c">&lt;!-- required.  the asset kind. --&gt;</span>
</span><span class="line">                   <span class="nt">&lt;key&gt;</span>kind<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                   <span class="nt">&lt;string&gt;</span>software-package<span class="nt">&lt;/string&gt;</span>
</span><span class="line">                   <span class="c">&lt;!-- optional.  md5 every n bytes.  --&gt;</span>
</span><span class="line">                   <span class="c">&lt;!-- will restart a chunk if md5 fails. --&gt;</span>
</span><span class="line">                   <span class="nt">&lt;key&gt;</span>md5-size<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                   <span class="nt">&lt;integer&gt;</span>10485760<span class="nt">&lt;/integer&gt;</span>
</span><span class="line">                   <span class="c">&lt;!-- optional.  array of md5 hashes --&gt;</span>
</span><span class="line">                   <span class="nt">&lt;key&gt;</span>md5s<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                   <span class="nt">&lt;array&gt;</span>
</span><span class="line">                       <span class="nt">&lt;string&gt;</span>41fa64bb7a7cae5a46bfb45821ac8bba<span class="nt">&lt;/string&gt;</span>
</span><span class="line">                       <span class="nt">&lt;string&gt;</span>51fa64bb7a7cae5a46bfb45821ac8bba<span class="nt">&lt;/string&gt;</span>
</span><span class="line">                   <span class="nt">&lt;/array&gt;</span>
</span><span class="line">                   <span class="c">&lt;!-- required.  the URL of the file to download. --&gt;</span>
</span><span class="line">                   <span class="nt">&lt;key&gt;</span>url<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                   <span class="nt">&lt;string&gt;</span>http://www.example.com/apps/foo.ipa<span class="nt">&lt;/string&gt;</span>
</span><span class="line">               <span class="nt">&lt;/dict&gt;</span>
</span><span class="line">               <span class="c">&lt;!-- display-image: the icon to display during download. --&gt;</span>
</span><span class="line">               <span class="nt">&lt;dict&gt;</span>
</span><span class="line">                   <span class="nt">&lt;key&gt;</span>kind<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                   <span class="nt">&lt;string&gt;</span>display-image<span class="nt">&lt;/string&gt;</span>
</span><span class="line">                   <span class="c">&lt;!-- optional. icon needs shine effect applied. --&gt;</span>
</span><span class="line">                   <span class="nt">&lt;key&gt;</span>needs-shine<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                   <span class="nt">&lt;true/&gt;</span>
</span><span class="line">                   <span class="nt">&lt;key&gt;</span>url<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                   <span class="nt">&lt;string&gt;</span>http://www.example.com/image.57×57.png<span class="nt">&lt;/string&gt;</span>
</span><span class="line">               <span class="nt">&lt;/dict&gt;</span>
</span><span class="line">               <span class="c">&lt;!-- full-size-image: the large 512×512 icon used by iTunes. --&gt;</span>
</span><span class="line">               <span class="nt">&lt;dict&gt;</span>
</span><span class="line">                   <span class="nt">&lt;key&gt;</span>kind<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                   <span class="nt">&lt;string&gt;</span>full-size-image<span class="nt">&lt;/string&gt;</span>
</span><span class="line">                   <span class="c">&lt;!-- optional.  one md5 hash for the entire file. --&gt;</span>
</span><span class="line">                   <span class="nt">&lt;key&gt;</span>md5<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                   <span class="nt">&lt;string&gt;</span>61fa64bb7a7cae5a46bfb45821ac8bba<span class="nt">&lt;/string&gt;</span>
</span><span class="line">                   <span class="nt">&lt;key&gt;</span>needs-shine<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                   <span class="nt">&lt;true/&gt;</span>
</span><span class="line">                   <span class="nt">&lt;key&gt;</span>url<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                   <span class="nt">&lt;string&gt;</span>http://www.example.com/image.512×512.jpg<span class="nt">&lt;/string&gt;</span>
</span><span class="line">               <span class="nt">&lt;/dict&gt;</span>
</span><span class="line">           <span class="nt">&lt;/array&gt;&lt;key&gt;</span>metadata<span class="nt">&lt;/key&gt;</span>
</span><span class="line">           <span class="nt">&lt;dict&gt;</span>
</span><span class="line">               <span class="c">&lt;!-- required --&gt;</span>
</span><span class="line">               <span class="nt">&lt;key&gt;</span>bundle-identifier<span class="nt">&lt;/key&gt;</span>
</span><span class="line">               <span class="nt">&lt;string&gt;</span>com.example.fooapp<span class="nt">&lt;/string&gt;</span>
</span><span class="line">               <span class="c">&lt;!-- optional (software only) --&gt;</span>
</span><span class="line">               <span class="nt">&lt;key&gt;</span>bundle-version<span class="nt">&lt;/key&gt;</span>
</span><span class="line">               <span class="nt">&lt;string&gt;</span>1.0<span class="nt">&lt;/string&gt;</span>
</span><span class="line">               <span class="c">&lt;!-- required.  the download kind. --&gt;</span>
</span><span class="line">               <span class="nt">&lt;key&gt;</span>kind<span class="nt">&lt;/key&gt;</span>
</span><span class="line">               <span class="nt">&lt;string&gt;</span>software<span class="nt">&lt;/string&gt;</span>
</span><span class="line">               <span class="c">&lt;!-- optional. displayed during download; --&gt;</span>
</span><span class="line">               <span class="c">&lt;!-- typically company name --&gt;</span>
</span><span class="line">               <span class="nt">&lt;key&gt;</span>subtitle<span class="nt">&lt;/key&gt;</span>
</span><span class="line">               <span class="nt">&lt;string&gt;</span>Apple<span class="nt">&lt;/string&gt;</span>
</span><span class="line">               <span class="c">&lt;!-- required.  the title to display during the download. --&gt;</span>
</span><span class="line">               <span class="nt">&lt;key&gt;</span>title<span class="nt">&lt;/key&gt;</span>
</span><span class="line">               <span class="nt">&lt;string&gt;</span>Example Corporate App<span class="nt">&lt;/string&gt;</span>
</span><span class="line">           <span class="nt">&lt;/dict&gt;</span>
</span><span class="line">       <span class="nt">&lt;/dict&gt;</span>
</span><span class="line">   <span class="nt">&lt;/array&gt;</span>
</span><span class="line"><span class="nt">&lt;/dict&gt;</span>
</span><span class="line"><span class="nt">&lt;/plist&gt;</span>
</span><span class="line"> ```
</span><span class="line">
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>使用fir.im等第三方分发平台：上述“ bundle id 不一致导致下载失败”这种情况只会出现在企业自己搭建网页分发的情形下，事实证明第三方的分发平台更加专业，已经很好地规避了该情况的发生。</li>
</ol>

<h3 id="q-a-1">Q-A</h3>

<p>Q：企业分发，企业版证书在iOS9上安装应用报 ` Ignore manifest download, already have bundleID: com.mycom.MyApp`  只有我的手机无法安装，别人 iOS9 都可以安装</p>

<p>A：这并非 iOS9的问题，iOS8及以前的系统也会出现，和缓存有关系，请尝试关机重启手机，然后就可以安装了。</p>

<h2 id="bitcode">4.Bitcode</h2>

<p>【前言】未来， Watch 应用必须包含 bitcode ，iOS不强制，Mac OS不支持。
但最坑的一点是： Xcode7 及以上版本会默认开启 bitcode 。</p>

<p>什么是 bitcode ？</p>

<p>通俗解释：在线版安卓ART模式。</p>

<p>Apple 官方文档–<a href="https://developer.apple.com/library/prerelease/ios/documentation/IDEs/Conceptual/AppDistributionGuide/AppThinning/AppThinning.html#//apple_ref/doc/uid/TP40012582-CH35"> <strong><em>App Distribution Guide – App Thinning (iOS, watchOS)</em></strong> </a>是这样定义的：</p>

<blockquote>
  <p>Bitcode is an intermediate representation of a compiled program. Apps you upload to iTunes Connect that contain bitcode will be compiled and linked on the App Store. Including bitcode will allow Apple to re-optimize your app binary in the future without the need to submit a new version of your app to the store.</p>
</blockquote>

<p>翻译过来就是：</p>

<blockquote>
  <p>bitcode 是被编译程序的一种中间形式的代码。包含 bitcode 配置的程序将会在 App Store 上被编译和链接。 bitcode 允许苹果在后期重新优化我们程序的二进制文件，而不需要我们重新提交一个新的版本到 App Store 上。</p>
</blockquote>

<p>在 Xcode简介— <a href="https://developer.apple.com/library/prerelease/ios/documentation/DeveloperTools/Conceptual/WhatsNewXcode/Articles/xcode_7_0.html"> <strong><em>What’s New in Xcode-New Features in Xcode 7</em></strong> </a>中这样描述：</p>

<blockquote>
  <p>Bitcode. When you archive for submission to the App Store, Xcode will compile your app into an intermediate representation. The App Store will then compile the bitcode down into the 64 or 32 bit executables as necessary.</p>
</blockquote>

<p>也就是</p>

<blockquote>
  <p>当我们提交程序到 App Store上时， Xcode 会将程序编译为一个中间表现形式( bitcode )。然后 App store 会再将这个 bitcode 编译为可执行的64位或32位程序。</p>
</blockquote>

<p>再看看这两段描述都是放在App Thinning(App瘦身)一节中，可以看出其与包的优化有关了。</p>

<p>打个比方，没有 bitcode  的 AppStore 里所提供的 App，类似在新华书店里卖捆绑销售的《四大名著丛书–精装版》，要买只能全买走，有了 bitcode 就好比这套四大名著每本都可以单卖，顾客就能按需购买。我们开发者在这个过程中扮演的角色是图书出版商的角色，应该照顾那些没钱一次买四本的顾客。（不要做不珍惜用户流量和存储空间的奸商。。）</p>

<p>那为什么第三方的 SDK 不支持 bitcode，我的 app 也就不能支持？打个比方，《四大名著丛书》只要有一本是可以单卖的，那么你很难再卖捆绑销售款的《四大名著丛书》了，所以干脆全都可以单卖，这大概就是 Apple 的逻辑。</p>

<p>App Thinning 官方文档解释如下：</p>

<blockquote>
  <p>The App Store and operating system optimize the installation of iOS and watchOS apps by tailoring app delivery to the capabilities of the user’s particular device, with minimal footprint. This optimization, called app thinning, lets you create apps that use the most device features, occupy minimum disk space, and accommodate future updates that can be applied by Apple. Faster downloads and more space for other apps and content provides a better user experience.</p>
</blockquote>

<p>开发者都知道，当前 iOS App 的编译打包方式是把适配兼容多个设备的执行文件及资源文件合并一个文件，上传和下载的文件则包含了所有的这些文件，导致占用较多的存储空间。</p>

<p>App Thinning是一个关于节省iOS设备存储空间的功能，它可以让iOS设备在安装、更新及运行App等场景中仅下载所需的资源，减少App的占用空间，从而节省设备的存储空间。</p>

<p>根据Apple官方文档的介绍，App Thinning主要有三个机制：</p>

<ol>
  <li>Slicing</li>
</ol>

<p>开发者把App安装包上传到AppStore后，Apple服务会自动对安装包切割为不同的应用变体(App variant)，当用户下载安装包时，系统会根据设备型号下载安装对应的单个应用变体。</p>

<ol>
  <li>On-Demand Resources</li>
</ol>

<p>ORD(随需资源)是指开发者对资源添加标签上传后，系统会根据App运行的情况，动态下载并加载所需资源，而在存储空间不足时，自动删除这类资源。</p>

<ol>
  <li>Bitcode
 开启Bitcode编译后，可以使得开发者上传App时只需上传Intermediate Representation(中间件)，而非最终的可执行二进制文件。 在用户下载App之前，AppStore会自动编译中间件，产生设备所需的执行文件供用户下载安装。</li>
</ol>

<p>（喵大(@onevcat)在其博客 <a href="http://onevcat.com/2015/06/ios9-sdk/">《开发者所需要知道的 iOS 9 SDK 新特性》</a> 中也描述了iOS 9中苹果在App瘦身中所做的一些改进，大家可以转场到那去研读一下。）</p>

<p>其中，Bitcode的机制可以支持动态的进行App Slicing，而对于Apple未来进行硬件升级的措施，此机制可以保证在开发者不重新发布版本的情况下而兼容新的设备。</p>

<p>Bitcode 是一种中间代码，那它是什么格式的呢？ LLVM 官方文档有介绍这种文件的格式：  <a href="http://llvm.org/docs/BitCodeFormat.html#llvm-bitcode-file-format"> <strong><em>LLVM Bitcode File Format</em></strong> </a> 。</p>

<p>如果你的应用也准备启用 Bitcode 编译机制，就需要注意以下几点：</p>

<ol>
  <li>Xcode 7默认开启 Bitcode ，如果应用开启 Bitcode，那么其集成的其他第三方库也需要是 Bitcode 编译的包才能真正进行 Bitcode 编译</li>
  <li>开启 Bitcode 编译后，编译产生的  <code>.app</code>  体积会变大(中间代码，不是用户下载的包)，且  <code>.dSYM</code>  文件不能用来崩溃日志的符号化(用户下载的包是 Apple 服务重新编译产生的，有产生新的符号文件)</li>
  <li>通过 Archive 方式上传 AppStore 的包，可以在Xcode的Organizer工具中下载对应安装包的新的符号文件</li>
</ol>

<p>如何适配？</p>

<p>在上面的错误提示中，提到了如何处理我们遇到的问题：</p>

<blockquote>
  <p>You must rebuild it with bitcode enabled (Xcode setting ENABLE_BITCODE), obtain an updated library from the vendor, or disable bitcode for this target. for architecture arm64</p>
</blockquote>

<p>正如开头所说的：</p>

<blockquote>
  <p>未来， Watch 应用必须包含 Bitcode ，iOS不强制，Mac OS不支持。
但最坑的一点是： Xcode7 及以上版本会默认开启 Bitcode 。</p>
</blockquote>

<p>Xcode 7 + 会开启 Bitcode。</p>

<p>也就是说，也两种方法适配：</p>

<p>方法一：更新 library 使包含 Bitcode ，否则会出现以下中的警告；</p>

<blockquote>
  <p>(null): URGENT: all bitcode will be dropped because
‘/Users/myname/Library/Mobile
Documents/com~apple~CloudDocs/foldername/appname/GoogleMobileAds.framework/GoogleMobileAds(GADSlot+AdEvents.o)’
was built without bitcode. You must rebuild it with bitcode enabled
(Xcode setting ENABLE_BITCODE), obtain an updated library from the
vendor, or disable bitcode for this target. Note: This will be an
error in the future.</p>
</blockquote>

<p>甚至有的会报错误，无法通过编译：</p>

<blockquote>
  <p>ld: ‘/Users/<strong>/Framework/SDKs/PolymerPay/Library/mobStat/lib</strong>SDK.a(**ForSDK.o)’ does not contain bitcode. You must rebuild it with bitcode enabled (Xcode setting ENABLE_BITCODE), obtain an updated library from the vendor, or disable bitcode for this target. for architecture arm64</p>
</blockquote>

<p>或：</p>

<blockquote>
  <p>ld: -undefined and -bitcode_bundle (Xcode setting  <code>ENABLE_BITCODE</code> =YES) cannot be used together
clang: error: linker command failed with exit code 1 (use -v to see invocation)</p>
</blockquote>

<p><img src="http://i62.tinypic.com/330vhug.jpg" alt="enter image description here" /></p>

<p>无论是警告还是错误，得到的信息是：我们引入的一个第三方库不包含bitcode。</p>

<p>方法二：关闭Bitcode，方法见下图</p>

<blockquote>
  <p><img src="https://i.imgur.com/OoOogUe.gif" alt="enter image description here" /></p>
</blockquote>

<p>我们可以在”Build Settings”-&gt;”Enable Bitcode”选项中看到：</p>

<p>用 Xcode 7+ 新建一个 iOS 程序时， bitcode 选项默认是设置为YES的。现在需要改成NO。</p>

<p>如果我们开启了 bitcode ，在提交包时，下面这个界面也会有个 bitcode 选项：</p>

<p><img src="http://i60.tinypic.com/5b2q7m.jpg" alt="enter image description here" /></p>

<p>那么 SDK 厂商如何支持 bitcode 呢？答案是只要在 Xcode7上重新编译一下就 ok 了。（请确保默认开启的 bitcode 没有去主动关闭）</p>

<p>但是如果仅仅是编译一下，则会出现下类似的如下警告：</p>

<p><img src="http://image17-c.poco.cn/mypoco/myphoto/20150928/17/1733887242015092817143106.jpg?1462x120_120" alt="enter image description here" /></p>

<blockquote>
  <p>ld: warning: full bitcode bundle could not be generated because ‘Lookback(Lookback.o)’ was built only with bitcode marker. The library must be generated from Xcode archive build with bitcode enabled (Xcode setting ENABLE_BITCODE)</p>
</blockquote>

<p>警告的消除步骤：</p>

<p>模拟器、真机分开打包，SDK在build的时候，让模拟器与真机分开build，模拟器不设置bitcode的参数，真机的加上，然后再合起来。（“合起来”指的是指令集，好比 x86_64 i386 跟 armv7 arm64合起来。）用命令行打包的话 加上这个参数OTHER_CFLAGS=“-fembed-bitcode”。</p>

<p>详情可移步：<a href="http://stackoverflow.com/a/31486233/3395008"> <strong><em>How do I xcodebuild a static library with Bitcode enabled?</em></strong> </a></p>

<p>更多信息，请移步</p>

<ol>
  <li><a href="https://developer.apple.com/library/prerelease/watchos/documentation/IDEs/Conceptual/AppDistributionGuide/AppThinning/AppThinning.html#//apple_ref/doc/uid/TP40012582-CH35-SW2">bitcode 苹果官方文档</a></li>
</ol>

<ol>
  <li>WWDC 2015 Session 102: <a href="https://developer.apple.com/videos/wwdc/2015/?id=102">“Platforms State of the Union”</a></li>
</ol>

<p><img src="http://mobileforward.net/wp-content/uploads/2015/06/Screen-Shot-2015-06-12-at-6.57.54-PM-697x351.png" alt="enter image description here" /></p>

<h2 id="demo3---ios9-url-scheme-">5.Demo3—iOS9 URL Scheme 适配_引入白名单概念</h2>

<p><a href="https://developer.apple.com/videos/wwdc/2015/?id=703"> <strong><em>WWDC 2015 Session 703: “Privacy and Your App</em></strong> </a> （ 时间在30：18左右）关于 <code>URL scheme</code> 的介绍，指出：</p>

<p><img src="https://i.imgur.com/2HxWQqq.png" alt="enter image description here" /></p>

<p>也就是说：在iOS9中，如果使用 <code>canOpenURL:</code> 方法，该方法所涉及到的  <code>URL scheme</code> 必须在”Info.plist”中将它们列为白名单，否则不能使用。key叫做LSApplicationQueriesSchemes ，键值内容是</p>

<pre><code>&lt;key&gt;LSApplicationQueriesSchemes&lt;/key&gt;
&lt;array&gt;
 &lt;string&gt;urlscheme&lt;/string&gt;
 &lt;string&gt;urlscheme2&lt;/string&gt;
 &lt;string&gt;urlscheme3&lt;/string&gt;
 &lt;string&gt;urlscheme4&lt;/string&gt;
&lt;/array&gt; 
</code></pre>

<p>白名单上限是50个：</p>

<p><a href="https://developer.apple.com/videos/wwdc/2015/?id=703"> <strong><em>WWDC 2015 Session 703: “Privacy and Your App</em></strong> </a> ）有说明：</p>

<blockquote>

  <p>“So for apps that are linked before iOS 9 and are running on iOS 9, they will be given 50 distinct URL schemes.”  –  WWDC 2015 session 703 Privacy and Your App</p>
</blockquote>

<p><del>
然而，我们却发现了一件意外的事：
当我们在 iOS9-beta（截至本文发布时，iOS9正式版还未发布）中，使用 `openURL:`  方法时，不在白名单中的 URL 会报错 &gt; “This app is not allowed to query for scheme xxx” 。
无论是官方文档还是 WWDC 的视频中都没有提及 `openURL:`  方法的这一变动，所以猜测这是 beta 版本一个 bug ，截至本文发布时，iOS9正式版还未发布，期望在正式版中能得以修复。在此之前，可通过将 `openURL:`  用到的 `URL scheme` 列入白名单来解决这个 bug 。（经测试：iOS9 beta5中已经修复）</del></p>

<p>iOS9中 <code>openURL:</code> 方法没有什么实质性的变化，仅仅多了一个确认动作：</p>

<p><img src="http://i57.tinypic.com/8zjh35.jpg" alt="enter image description here" /></p>

<p>苹果为什么要这么做？</p>

<p>在 iOS9 之前，你可以使用 <code>canOpenURL:</code> 监测用户手机里到底装没装微信，装没装微博。但是也有一些别有用心的 App ，这些 App 有一张常用 App 的 <code>URL scheme</code>，然后他们会多次调用<code>canOpenURL:</code> 遍历该表，来监测用户手机都装了什么 App ，比如这个用户装了叫“大姨妈”的App，你就可以知道这个用户是女性，你就可以只推给这个用户女性用品的广告。这是侵犯用户隐私的行为。</p>

<p>这也许就是原因。</p>

<p>本项目中给出了一个演示用的 Demo ，仓库的文件夹叫“Demo3_iOS9URLScheme适配_引入白名单概念”，Demo引用自<a href="https://github.com/gatzsche/LSApplicationQueriesSchemes-Working-Example"> <strong><em>LSApplicationQueriesSchemes-Working-Example</em></strong> </a></p>

<p>Demo结构如下：</p>

<p><img src="http://i61.tinypic.com/2hyyuqv.jpg" alt="enter image description here" /></p>

<p>主要演示的情景是这样的：</p>

<p>假设有两个App： weixin(微信) and 我的App. 我的App 想监测 weixin(微信) 是否被安装了. “weixin(微信)” 在 info.plist  中定义了 URL scheme :</p>

<pre><code>&lt;key&gt;CFBundleURLTypes&lt;/key&gt;
&lt;array&gt;
    &lt;dict&gt;
        &lt;key&gt;CFBundleURLSchemes&lt;/key&gt;
        &lt;array&gt;
            &lt;string&gt;weixin&lt;/string&gt;
        &lt;/array&gt;
    &lt;/dict&gt;
&lt;/array&gt;
</code></pre>

<p>我的App 想监测 weixin(微信) 是否被安装了 ：</p>

<pre><code>[[UIApplication sharedApplication]
                    canOpenURL:[NSURL URLWithString:@"weixin(微信)://"]];
</code></pre>

<p>即使你安装了微信，在iOS9中，这有可能会返回NO：</p>

<p>因为你需要将 “weixin(微信)” 添加到 “我的App” 的 info.plist 文件中：</p>

<pre><code>&lt;key&gt;LSApplicationQueriesSchemes&lt;/key&gt;
&lt;array&gt;
    &lt;string&gt;weixin&lt;/string&gt;
&lt;/array&gt;
</code></pre>

<p>（以上只是为了演示，实际开发中，你不仅需要添加“weixin”还需要“wechat”这两个。具体下文给出表格）</p>

<p><del>关于 `openURL:` 这个问题，可在 Demo3 中自行测试，如果该 bug 修复了的话，请私信[微博@iOS程序犭袁](http://weibo.com/luohanchenyilong/)，我再来更新本文。（经测试：iOS9 beta5中已经修复）</del></p>

<p>另外，推荐一篇<a href="http://awkwardhare.com/post/121196006730/quick-take-on-ios-9-url-scheme-changes">博文</a>，其中最关键的是以下部分：</p>

<blockquote>
  <p>If you call the “canOpenURL” method on a URL that is not in your whitelist, it will return “NO”, even if there is an app installed that has registered to handle this scheme. A “This app is not allowed to query for scheme xxx” syslog entry will appear.</p>
</blockquote>

<p><del>&gt; If you call the “openURL” method on a URL that is not in your whitelist, it will fail silently. A “This app is not allowed to query for scheme xxx” syslog entry will appear.
</del></p>

<h3 id="url-scheme">常见 URL Scheme</h3>

<p>如果想一次性集成最常用的微信、新浪微博、QQ、支付宝四者的白名单，则配置如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"> ```XML
</span><span class="line"> <span class="nt">&lt;key&gt;</span>LSApplicationQueriesSchemes<span class="nt">&lt;/key&gt;</span>
</span><span class="line"><span class="nt">&lt;array&gt;</span>
</span><span class="line">    <span class="c">&lt;!-- 微信 URL Scheme 白名单--&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>wechat<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>weixin<span class="nt">&lt;/string&gt;</span>
</span><span class="line">
</span><span class="line">    <span class="c">&lt;!-- 新浪微博 URL Scheme 白名单--&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>sinaweibohd<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>sinaweibo<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>sinaweibosso<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>weibosdk<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>weibosdk2.5<span class="nt">&lt;/string&gt;</span>
</span><span class="line">
</span><span class="line">    <span class="c">&lt;!-- QQ、Qzone URL Scheme 白名单--&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqqapi<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqq<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqqOpensdkSSoLogin<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqqconnect<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqqopensdkdataline<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqqopensdkgrouptribeshare<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqqopensdkfriend<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqqopensdkapi<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqqopensdkapiV2<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqqopensdkapiV3<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqzoneopensdk<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>wtloginmqq<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>wtloginmqq2<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqqwpa<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqzone<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqzonev2<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqzoneshare<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>wtloginqzone<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqzonewx<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqzoneopensdkapiV2<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqzoneopensdkapi19<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqzoneopensdkapi<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqzoneopensdk<span class="nt">&lt;/string&gt;</span>
</span><span class="line">
</span><span class="line">    <span class="c">&lt;!-- 支付宝  URL Scheme 白名单--&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>alipay<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>alipayshare<span class="nt">&lt;/string&gt;</span>
</span><span class="line">
</span><span class="line"><span class="nt">&lt;/array&gt;</span>
</span><span class="line"> ```
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>plist 文件看起来会是这样的：</p>

<p><img src="http://i58.tinypic.com/e5pyee.jpg" alt="enter image description here" /></p>

<p>其他平台可在下面的列表中查询：
各平台OpenURL白名单说明</p>

<table>
  <thead>
    <tr>
      <th>平台名称</th>
      <th>URL Schem</th>
      <th>补充说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>微信</td>
      <td>wechat,&lt;/p&gt; weixin</td>
      <td> </td>
    </tr>
    <tr>
      <td>支付宝</td>
      <td>alipay,&lt;/p&gt;alipayshare</td>
      <td> </td>
    </tr>
    <tr>
      <td>QQ</td>
      <td>mqqOpensdkSSoLogin, &lt;/p&gt;mqqopensdkapiV2,&lt;/p&gt;mqqopensdkapiV3,&lt;/p&gt;wtloginmqq2,&lt;/p&gt;mqq,&lt;/p&gt;mqqapi</td>
      <td> </td>
    </tr>
    <tr>
      <td>QZONE</td>
      <td>mqzoneopensdk, &lt;/p&gt;mqzoneopensdkapi,&lt;/p&gt;mqzoneopensdkapi19,&lt;/p&gt;mqzoneopensdkapiV2,&lt;/p&gt;mqqOpensdkSSoLogin,&lt;/p&gt;mqqopensdkapiV2,&lt;/p&gt;mqqopensdkapiV3,&lt;/p&gt;wtloginmqq2,&lt;/p&gt;mqqapi,&lt;/p&gt;mqqwpa，&lt;/p&gt;mqzone，&lt;/p&gt;mqq</td>
      <td>[注:若同时使用QQ和QZONE,则直接添加本格即可]</td>
    </tr>
    <tr>
      <td>新浪微博</td>
      <td>sinaweibo,&lt;/p&gt;sinaweibohd,&lt;/p&gt;sinaweibosso,&lt;/p&gt;sinaweibohdsso,&lt;/p&gt;weibosdk,&lt;/p&gt;weibosdk2.5</td>
      <td>[后两个若导入新浪SDK则需要]</td>
    </tr>
    <tr>
      <td>豆瓣</td>
      <td>无需配置</td>
      <td> </td>
    </tr>
    <tr>
      <td>开心网</td>
      <td>无需配置</td>
      <td> </td>
    </tr>
    <tr>
      <td>易信</td>
      <td>yixin,&lt;/p&gt; yixinopenapi</td>
      <td> </td>
    </tr>
    <tr>
      <td>Google+</td>
      <td>googlechrome, &lt;/p&gt;googlechrome-x-callback,&lt;/p&gt;hasgplus4,&lt;/p&gt;com.google.gppconsent,&lt;/p&gt;com.google.gppconsent.2.2.0,&lt;/p&gt;com.google.gppconsent.2.3.0,&lt;/p&gt;com.google.gppconsent.2.4.0,&lt;/p&gt;com.google.gppconsent.2.4.1</td>
      <td> </td>
    </tr>
    <tr>
      <td>人人网</td>
      <td>renrenapi,&lt;/p&gt;renrenios,&lt;/p&gt;renreniphone,&lt;/p&gt;renren,</td>
      <td> </td>
    </tr>
    <tr>
      <td>Facebook</td>
      <td>fbauth2</td>
      <td> </td>
    </tr>
    <tr>
      <td>Twitter</td>
      <td>无需配置</td>
      <td> </td>
    </tr>
    <tr>
      <td>Pocket</td>
      <td>pocket-oauth-v1</td>
      <td> </td>
    </tr>
    <tr>
      <td>Pinterest</td>
      <td>pinit</td>
      <td> </td>
    </tr>
    <tr>
      <td>Instagram</td>
      <td>instagram</td>
      <td> </td>
    </tr>
    <tr>
      <td>WhatsApp</td>
      <td>whatsapp</td>
      <td> </td>
    </tr>
    <tr>
      <td>Line</td>
      <td>line</td>
      <td> </td>
    </tr>
    <tr>
      <td>KakaoTalk</td>
      <td>kakaolink</td>
      <td> </td>
    </tr>
    <tr>
      <td>KaokaoStory</td>
      <td>storylink</td>
      <td> </td>
    </tr>
    <tr>
      <td>LinkedIn</td>
      <td>无需配置</td>
      <td> </td>
    </tr>
    <tr>
      <td>Tumblr</td>
      <td>无需配置</td>
      <td> </td>
    </tr>
    <tr>
      <td>非平台类</td>
      <td>无需配置</td>
      <td>( 如短信，复制，邮件等)</td>
    </tr>
  </tbody>
</table>

<h3 id="q-a-2">Q-A</h3>

<p>Q：我用xcode7编译的app，如果不在plist里面加scheme，ios9下qq就会不显示，因为我用了qqsdk里的判断是否安装qq的方法，我要是直接下载app store上的，没有加scheme，qq也是能显示。</p>

<p>A：本文中所罗列的新特性，多数情况下指的是 iOS9.X-SDK 新特性，AppStore 的版本是基于 iOS8.X-SDK或 iOS7.X-SDK，所以并不受 iOS9新特性约束。也就是说：<strong>Xcode7给iOS8打设备包不需要白名单也能调用“canOpenURL” ，Xcode7给iOS9设备打的包则不然，Xcode7和iOS9缺一不可，才需要适配URL Scheme。</strong></p>

<p>那么，如何确认自己项目所使用的 SDK？在Targets-&gt;Build Setting–&gt;Architectures</p>

<p><img src="http://i58.tinypic.com/amsa9u.jpg" alt="enter image description here" /></p>

<p>Q：我们自己的应用跳到微信、支付宝、微博等的URLScheme是固定几个，但是从微信、支付宝、微博跳回到我们的应用的URLScheme可能是成千上万个，那他们那些大厂是如何做这个白名单？</p>

<p>A：白名单策略影响的仅仅是 canOpenURL: 接口，OpenURL: 不受影响，这些大厂只调用 openURL: 所以不受 iOS9 的影响。</p>

<p>Q：文中提到了设置白名单的原因，然而，如果这些别有用心的APP在它自己的白名单列出它关心的APP, 然后依次调用canOpenURL来检测，照样可以监控用户都安装了哪些APP啊？所以我依然不明白苹果这样做得原因。</p>

<p>A：白名单的数目上限是50个。苹果这样子做，使得最多只能检测50个App。</p>

<p>Q：按照文中的适配方法，error原因就没有了的确没问题了，但是还是会打印如下信息：</p>

<p><code>Objective-C
 -canOpenURL: failed for URL: "XXXXXXXXXX" - error: "(null)"。
</code></p>

<p>A：这个模拟器的一个 bug，无论使用iOS9的真机还是模拟器均出现该问题，估计 Xcode 后续的升级中会修复掉。</p>

<p>那如何判断日志究竟是 Xcode bug 造成的还是没有适配造成的？看error的值，如果是null，则是 bug。（2015-09-21更）</p>

<h2 id="ipadslide-over--split-view">6. iPad适配Slide Over 和 Split View</h2>

<p><img src="http://cdn1.tnwcdn.com/wp-content/blogs.dir/1/files/2015/06/ew-.gif" alt="enter image description here" /></p>

<p>【iPad适配Slide Over 和 Split View】
若想适配multi tasking特性，唯一的建议：弃纯代码，改用storyboard、xib，纵观苹果WWDC所有Demo均是如此：</p>

<ol>
  <li>
    <p><a href="https://developer.apple.com/videos/wwdc/2015/?id=218">Mysteries of Auto Layout, Part 1</a></p>
  </li>
  <li>
    <p><a href="https://developer.apple.com/videos/wwdc/2015/?id=215">What’s New in Storyboards</a></p>
  </li>
  <li>
    <p><a href="https://developer.apple.com/videos/wwdc/2015/?id=407">Implementing UI Designs in Interface Builder</a></p>
  </li>
  <li>
    <p><a href="https://developer.apple.com/videos/wwdc/2015/?id=205">Getting Started with Multitasking on iPad in iOS 9</a></p>
  </li>
  <li>
    <p><a href="https://developer.apple.com/videos/wwdc/2015/?id=212">Optimizing Your App for Multitasking on iPad in iOS</a></p>
  </li>
</ol>

<h2 id="ui-">7.字体间隙变大导致 UI 显示异常</h2>

<p>iOS8中，字体是Helvetica，中文的字体有点类似于“华文细黑”。只是苹果手机自带渲染，所以看上去可能比普通的华文细黑要美观。iOS9中，中文系统字体变为了专为中国设计的“苹方” 有点类似于一种word字体“幼圆”。字体有轻微的加粗效果，并且最关键的是字体间隙变大了！</p>

<p>所以很多原本写死了width的label可能会出现“…”的情况：</p>

<table>
  <thead>
    <tr>
      <th>情况</th>
      <th>显示</th>
      <th>解释</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>XIB</td>
      <td>将 label 的 width 写死</td>
      <td>下面这两张图也可以直观的看出同一个界面，同一个label的变化。</td>
    </tr>
    <tr>
      <td>iOS8</td>
      <td><img src="http://images2015.cnblogs.com/blog/717809/201509/717809-20150919223903476-176844619.png" alt="enter image description here" /></td>
      <td>正常</td>
    </tr>
    <tr>
      <td>iOS9</td>
      <td><img src="http://images2015.cnblogs.com/blog/717809/201509/717809-20150919223918101-1917717144.png" alt="enter image description here" /></td>
      <td>最后四位数字、、、</td>
    </tr>
  </tbody>
</table>

<p>如果不将 label 的 width 写死，仅仅添加左端约束则右端的四个数字会越界</p>

<table>
  <thead>
    <tr>
      <th>情况</th>
      <th>显示</th>
      <th>解释</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>XIB</td>
      <td><img src="http://i60.tinypic.com/292r428.jpg" alt="enter image description here" /></td>
      <td>如果仅仅添加左端约束</td>
    </tr>
    <tr>
      <td>iOS8</td>
      <td><img src="http://i58.tinypic.com/2vj92bn.jpg" alt="enter image description here" /></td>
      <td>正常</td>
    </tr>
    <tr>
      <td>iOS9</td>
      <td><img src="http://i62.tinypic.com/2czaq1v.jpg" alt="enter image description here" /></td>
      <td>“3199”这四个数字越界了</td>
    </tr>
  </tbody>
</table>

<p>所以为了在界面显示上不出错，就算是固定长度的文字也还是建议使用sizetofit 或者ios向上取整 ceilf() 或者提前计算：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"><span class="bp">CGSize</span> <span class="n">size</span> <span class="o">=</span> <span class="p">[</span><span class="n">title</span> <span class="nl">sizeWithAttributes</span><span class="p">:</span><span class="l">@{</span><span class="nl">NSFontAttributeName</span><span class="p">:</span> <span class="p">[</span><span class="bp">UIFont</span> <span class="nl">systemFontOfSize</span><span class="p">:</span><span class="mf">14.0f</span><span class="p">]</span><span class="l">}</span><span class="p">];</span>
</span><span class="line"><span class="bp">CGSize</span> <span class="n">adjustedSize</span> <span class="o">=</span> <span class="n">CGSizeMake</span><span class="p">(</span><span class="n">ceilf</span><span class="p">(</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">),</span> <span class="n">ceilf</span><span class="p">(</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">));</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="xcode7-">8.升级 Xcode7 后的崩溃与警告</h2>

<h3 id="sdk--ios9--crash">旧版本新浪微博 SDK 在 iOS9 上会导致的 Crash</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"> <span class="n">app</span> <span class="n">was</span> <span class="n">compiled</span> <span class="n">with</span> <span class="n">optimization</span> <span class="o">-</span> <span class="n">stepping</span> <span class="n">may</span> <span class="n">behave</span> <span class="n">oddly</span><span class="p">;</span> <span class="n">variables</span> <span class="n">may</span> <span class="n">not</span> <span class="n">be</span> <span class="n">available</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>打印出来这句话，然后崩溃。多是启动的过程中程序就崩溃。</p>

<p>在iOS9下，新浪微博SDK里面使用的 JSONKit 在部分机型可能导致崩溃。崩溃信息如下图。</p>

<p><img src="http://wiki.mob.com/wp-content/uploads/2015/09/4062130C-1138-4352-89AF-E518F189A851.png" alt="enter image description here" /></p>

<p>解决：更新新浪微博SDK，新浪的SDK最新版做了对iOS9兼容。</p>

<h3 id="ios9--masonry-">iOS9 下使用 Masonry 会引起崩溃的一种情况</h3>

<p>在 iOS8（及以前）我们有这样的经验：</p>

<blockquote>
  <p><code>leading 与 left</code>  、 <code>trailing 与 right</code>  在正常情况下是等价的 但是当一些布局是从右至左时(比如阿拉伯文?没有类似的经验) 则会对调，换句话说就是基本可以不理不用，用left和right就好了</p>
</blockquote>

<p>（摘自 <a href="http://adad184.com/2014/09/28/use-masonry-to-quick-solve-autolayout/">《Masonry介绍与使用实践(快速上手Autolayout)》</a> ）</p>

<p>但在概念里，还是一直将 leading 与 left 划为等号，这样做在 iOS8（及以前）上是正常的，但在 iOS9 上这样的观念可能会引起崩溃，比如：</p>

<p><code>Objective-C
 make.left.equalTo(self.mas_leading).offset(15);
</code></p>

<p>应该为：</p>

<p><code>Objective-C
 make.left.equalTo(self.mas_left).offset(15);
</code></p>

<p>同理 mas_training 也需要改为right</p>

<p>同时也有人反馈说也需要作如下调整否则也会崩溃：</p>

<p>toplayoutGuide 替换成 mas_toplayoutguide
bottomlayoutguide 替换成 mas_bottomlayoutguide</p>

<p>而且使用类似 <code>make.top.equalTo(topView.mas_baseline).with.offset(5);</code> 涉及 <code>mas_baseline</code> 的语句也会引起崩溃。</p>

<p>暂时的解决方案是</p>

<p>使用 <code>make.top.equalTo(self.mas_topLayoutGuide).with.offset(5);</code> 来替换原来的  <code>self.topLayoutGuide.mas_baseline</code>  反正效果是一样的</p>

<p>原来的代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">headerView</span> <span class="nl">mas_makeConstraints</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="n">MASConstraintMaker</span> <span class="o">*</span><span class="n">make</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="bp">UIView</span> <span class="o">*</span><span class="n">topView</span> <span class="o">=</span> <span class="p">(</span><span class="bp">UIView</span> <span class="o">*</span><span class="p">)</span><span class="nb">self</span><span class="p">.</span><span class="n">topLayoutGuide</span><span class="p">;</span>
</span><span class="line">    <span class="n">make</span><span class="p">.</span><span class="n">top</span><span class="p">.</span><span class="n">equalTo</span><span class="p">(</span><span class="n">topView</span><span class="p">.</span><span class="n">mas_baseline</span><span class="p">).</span><span class="n">with</span><span class="p">.</span><span class="n">offset</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span><span class="line">    <span class="n">make</span><span class="p">.</span><span class="n">leading</span><span class="p">.</span><span class="n">equalTo</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">mas_leading</span><span class="p">).</span><span class="n">with</span><span class="p">.</span><span class="n">offset</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class="line">    <span class="n">make</span><span class="p">.</span><span class="n">right</span><span class="p">.</span><span class="n">equalTo</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">mas_right</span><span class="p">).</span><span class="n">with</span><span class="p">.</span><span class="n">offset</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">);</span>
</span><span class="line">    <span class="n">make</span><span class="p">.</span><span class="n">height</span><span class="p">.</span><span class="n">equalTo</span><span class="p">(</span><span class="mi">@34</span><span class="p">);</span>
</span><span class="line"><span class="p">}];</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>修改后：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">headerView</span> <span class="nl">mas_makeConstraints</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="n">MASConstraintMaker</span> <span class="o">*</span><span class="n">make</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="n">make</span><span class="p">.</span><span class="n">top</span><span class="p">.</span><span class="n">equalTo</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">mas_topLayoutGuide</span><span class="p">).</span><span class="n">with</span><span class="p">.</span><span class="n">offset</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span><span class="line">    <span class="n">make</span><span class="p">.</span><span class="n">left</span><span class="p">.</span><span class="n">equalTo</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">mas_left</span><span class="p">).</span><span class="n">with</span><span class="p">.</span><span class="n">offset</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class="line">    <span class="n">make</span><span class="p">.</span><span class="n">right</span><span class="p">.</span><span class="n">equalTo</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">mas_right</span><span class="p">).</span><span class="n">with</span><span class="p">.</span><span class="n">offset</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">);</span>
</span><span class="line">    <span class="n">make</span><span class="p">.</span><span class="n">height</span><span class="p">.</span><span class="n">equalTo</span><span class="p">(</span><span class="mi">@34</span><span class="p">);</span>
</span><span class="line"><span class="p">}];</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="xcode-">Xcode 升级后，旧的状态栏的样式设置方式会引起警告</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"><span class="o">&lt;</span><span class="n">Error</span><span class="o">&gt;:</span> <span class="nl">CGContextSaveGState</span><span class="p">:</span> <span class="n">invalid</span> <span class="n">context</span> <span class="mh">0x0</span><span class="p">.</span> <span class="n">If</span> <span class="n">you</span> <span class="n">want</span> <span class="n">to</span> <span class="n">see</span> <span class="n">the</span> <span class="n">backtrace</span><span class="p">,</span> <span class="n">please</span> <span class="n">set</span> <span class="n">CG_CONTEXT_SHOW_BACKTRACE</span> <span class="n">environmental</span> <span class="n">variable</span><span class="p">.</span>
</span><span class="line"><span class="o">&lt;</span><span class="n">Error</span><span class="o">&gt;:</span> <span class="nl">CGContextTranslateCTM</span><span class="p">:</span> <span class="n">invalid</span> <span class="n">context</span> <span class="mh">0x0</span><span class="p">.</span> <span class="n">If</span> <span class="n">you</span> <span class="n">want</span> <span class="n">to</span> <span class="n">see</span> <span class="n">the</span> <span class="n">backtrace</span><span class="p">,</span> <span class="n">please</span> <span class="n">set</span> <span class="n">CG_CONTEXT_SHOW_BACKTRACE</span> <span class="n">environmental</span> <span class="n">variable</span><span class="p">.</span>
</span><span class="line"><span class="o">&lt;</span><span class="n">Error</span><span class="o">&gt;:</span> <span class="nl">CGContextRestoreGState</span><span class="p">:</span> <span class="n">invalid</span> <span class="n">context</span> <span class="mh">0x0</span><span class="p">.</span> <span class="n">If</span> <span class="n">you</span> <span class="n">want</span> <span class="n">to</span> <span class="n">see</span> <span class="n">the</span> <span class="n">backtrace</span><span class="p">,</span> <span class="n">please</span> <span class="n">set</span> <span class="n">CG_CONTEXT_SHOW_BACKTRACE</span> <span class="n">environmental</span> <span class="n">variable</span><span class="p">.</span>
</span><span class="line"> <span class="err">```</span>
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>出错原因：设置 app 的状态栏样式的时候，使用了旧的方式，在 info.plist 里面的 <code>View controller-based status bar appearance</code> 默认会为 YES，即使不设置也是 YES，但一般 iOS6 的时候为了设置状态栏样式，需要将其设为NO，iOS7，8也兼容，但是到了iOS9 就会报警告。</p>

<p>解决办法：</p>

<p>删除原先的设置代码，通常老的设置方式是这样的：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"> <span class="c1">//设置状态栏的白色</span>
</span><span class="line">    <span class="p">[[</span><span class="bp">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="nl">setStatusBarStyle</span><span class="p">:</span><span class="n">UIStatusBarStyleLightContent</span><span class="p">];</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>删除的原因见下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"> <span class="c1">// Setting the statusBarStyle does nothing if your application is using the default UIViewController-based status bar system.</span>
</span><span class="line"><span class="k">@property</span><span class="p">(</span><span class="k">readwrite</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="n">UIStatusBarStyle</span> <span class="n">statusBarStyle</span> <span class="n">NS_DEPRECATED_IOS</span><span class="p">(</span><span class="mi">2</span><span class="n">_0</span><span class="p">,</span> <span class="mi">9</span><span class="n">_0</span><span class="p">,</span> <span class="s">&quot;Use -[UIViewController preferredStatusBarStyle]&quot;</span><span class="p">);</span>
</span><span class="line"><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setStatusBarStyle:</span><span class="p">(</span><span class="n">UIStatusBarStyle</span><span class="p">)</span><span class="nv">statusBarStyle</span> <span class="nf">animated:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span> <span class="n">NS_DEPRECATED_IOS</span><span class="p">(</span><span class="mi">2</span><span class="n">_0</span><span class="p">,</span> <span class="mi">9</span><span class="n">_0</span><span class="p">,</span> <span class="s">&quot;Use -[UIViewController preferredStatusBarStyle]&quot;</span><span class="p">);</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>修改方式是在 <code>Info.plist</code> 文件中做如下修改：</p>

<p>将 <code>View controller-based status bar appearance</code> 删除（默认为 YES），或设置为YES：</p>

<p>对应的 plist 里的 XML源码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"> ```Objective-C
</span><span class="line"> <span class="nt">&lt;key&gt;</span>UIViewControllerBasedStatusBarAppearance<span class="nt">&lt;/key&gt;</span>
</span><span class="line">	<span class="nt">&lt;true/&gt;</span>
</span><span class="line"> ```
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>看起来长这样：</p>

<p><img src="http://i61.tinypic.com/jrsjnd.jpg" alt="enter image description here" /></p>

<p>然后使用新的方式来实现状态栏的样式：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"><span class="o">-</span> <span class="p">(</span><span class="n">UIStatusBarStyle</span><span class="p">)</span><span class="n">preferredStatusBarStyle</span><span class="p">;</span>
</span><span class="line"><span class="p">-</span> <span class="p">(</span><span class="bp">UIViewController</span> <span class="o">*</span><span class="p">)</span><span class="nf">childViewControllerForStatusBarStyle</span><span class="p">;</span>
</span><span class="line"><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setNeedsStatusBarAppearanceUpdate</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>比如，你想将状态栏设置为白色，就可以这样写：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"><span class="c1">//设置状态栏的白色</span>
</span><span class="line"> <span class="o">-</span><span class="p">(</span><span class="n">UIStatusBarStyle</span><span class="p">)</span><span class="n">preferredStatusBarStyle</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="n">UIStatusBarStyleLightContent</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>记得要 clean 下或者删除应用程序重新运行</p>

<h4 id="demo4---navigationcontroller">Demo4—navigationController状态栏样式新的设置方法</h4>

<p>如果你按照上面的方法设置了，但还是不行。八成是 rootViewController 设置的问题，你必须设置 rootViewController，编译器才会去 rootViewController 中重载 preferredStatusBarStyle 方法。</p>

<p>另外当你在 appdelegate 中将 navigationController 设为 rootViewController 的时候：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line">     <span class="nb">self</span><span class="p">.</span><span class="n">window</span><span class="p">.</span><span class="n">rootViewController</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">navigationController</span><span class="p">;</span>
</span><span class="line"> <span class="err">```</span>
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>因为 rootViewController 变为了 navigationController，你在 ViewController 里重写 preferredStatusBarStyle 方法是不会起作用的。所以最好的方法是</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"> <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">viewDidLoad</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="p">[</span><span class="nb">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class="line">    <span class="nb">self</span><span class="p">.</span><span class="n">title</span> <span class="o">=</span> <span class="s">@&quot;微博@iOS程序犭袁&quot;</span><span class="p">;</span>
</span><span class="line">    <span class="nb">self</span><span class="p">.</span><span class="n">navigationController</span><span class="p">.</span><span class="n">navigationBar</span><span class="p">.</span><span class="n">barStyle</span> <span class="o">=</span> <span class="n">UIBarStyleBlack</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果你还是想重写 preferredStatusBarStyle 方法来达到作用，那最好使用分类来解决：</p>

<p>.h文件：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"> <span class="c1">//</span>
</span><span class="line"><span class="c1">//  UINavigationController+StatusBarStyle.h</span>
</span><span class="line"><span class="c1">//  微博@iOS程序犭袁</span>
</span><span class="line"><span class="c1">//</span>
</span><span class="line"><span class="c1">//  Created by  https://github.com/ChenYilong/iOS9AdaptationTips/ on 15/6/8.</span>
</span><span class="line"><span class="c1">//  Copyright (c) 2015年   http://weibo.com/luohanchenyilong/  . All rights reserved.</span>
</span><span class="line"><span class="c1">//</span>
</span><span class="line">
</span><span class="line"><span class="cp">#import &lt;UIKit/UIKit.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="k">@interface</span> <span class="bp">UINavigationController</span> <span class="nl">(StatusBarStyle)</span>
</span><span class="line">
</span><span class="line"><span class="k">@end</span>
</span><span class="line">
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>.m文件：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"> <span class="c1">//</span>
</span><span class="line"><span class="c1">//  UINavigationController+StatusBarStyle.m</span>
</span><span class="line"><span class="c1">//  微博@iOS程序犭袁</span>
</span><span class="line"><span class="c1">//</span>
</span><span class="line"><span class="c1">//  Created by  https://github.com/ChenYilong/iOS9AdaptationTips/ on 15/6/8.</span>
</span><span class="line"><span class="c1">//  Copyright (c) 2015年   http://weibo.com/luohanchenyilong/  . All rights reserved.</span>
</span><span class="line"><span class="c1">//</span>
</span><span class="line">
</span><span class="line"><span class="cp">#import &quot;UINavigationController+StatusBarStyle.h&quot;</span>
</span><span class="line">
</span><span class="line"><span class="k">@implementation</span> <span class="bp">UINavigationController</span> <span class="nl">(StatusBarStyle)</span>
</span><span class="line">
</span><span class="line"><span class="p">-</span> <span class="p">(</span><span class="n">UIStatusBarStyle</span><span class="p">)</span><span class="nf">preferredStatusBarStyle</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="c1">//also you may add any fancy condition-based code here</span>
</span><span class="line">    <span class="k">return</span> <span class="n">UIStatusBarStyleLightContent</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">@end</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我在仓库里给出了 navigation 的设置方法，见Demo4。</p>

<p>参考链接： <a href="http://stackoverflow.com/a/19513714/3395008">preferredStatusBarStyle isn’t called–For anyone using a UINavigationController:</a></p>

<h3 id="xcode7--debug--dsym-">Xcode7 在 debug 状态下也生成 .dSYM 文件引起的警告</h3>

<p>Xcode6 的工程升级到 Xcode7上来，会报警告：</p>

<p><img src="http://i57.tinypic.com/2a5zuia.jpg" alt="enter image description here" /></p>

<p>这是 debug 编译时导出符号文件出现的告警，</p>

<p>然而新建的Xcode7工程不会有该问题。</p>

<p>解决方法是让 debug 编译的时候不生成符号文件：</p>

<p><img src="http://i60.tinypic.com/2e23qyp.jpg" alt="enter image description here" /></p>

<h3 id="xcode7--8x--there-is-an-intenal-api-error">Xcode7 无法使用 8.x 系统的设备调试，一运行就报错 <code>there is an intenal API error</code></h3>

<p><img src="http://cdn.cocimg.com/bbs/attachment/Fid_21/21_296305_92094d6a71e587a.png" alt="enter image description here" /></p>

<p><code>Xcode7</code> 调试  <code>iOS8.x</code> 的真机，需要确保项目名改为英文，中间含有中文会报错  <code>there is an intenal API error</code></p>

<p>按照下面的步骤检查：</p>

<p>bulid settings  -&gt;    packaging  -&gt; product name</p>

<h3 id="html--iframe--safari--app">使用了 HTML 的 iframe 元素可能导致无法从 Safari 跳转至 App</h3>

<p>我们都知道，从网易新闻分享一条新闻到QQ，然后从QQ中打开链接再用safari打开链接，在iOS8上，这个时候会跳转到网易新闻App。但是现在（2015年09月23日）版本的网易新闻在 iOS9 就不能正常跳转，会跳转到 App Store 页面并提示要不要打开 App Store。</p>

<p>这是很可能是因为使用了 HTML 的 iframe 元素，并将自定义的链接放进了该元素中</p>

<p>举例说明：</p>

<p><img src="http://i61.tinypic.com/2wbvok8.jpg" alt="enter image description here" /></p>

<p>我之前写的一个 Demo： <a href="https://github.com/ChenYilong/CYLExternalURL">模仿 《简书 App》 的效果:在html中跳转到App中的对应页面,并能从App跳转到原来的网址</a>，在例子中直接调用自定义链接在 iOS9上是可以跳转到 App 中的，然而，如果用 iframe 元素包起来就会变不可用。</p>

<p>参考链接：</p>

<ol>
  <li><a href="http://www.w3school.com.cn/tags/tag_iframe.asp">HTML 的iframe 标签</a></li>
  <li><a href="http://stackoverflow.com/questions/31891777/ios-9-safari-iframe-src-with-custom-url-scheme-not-working">iOS 9 safari iframe src with custom url scheme not working</a></li>
</ol>

<h3 id="ios9">iOS9锁屏控制台会打印警告</h3>

<p>加入运行如下示例代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">viewDidLoad</span> <span class="p">{</span>
</span><span class="line">    <span class="p">[</span><span class="nb">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class="line">    <span class="kt">dispatch_queue_t</span> <span class="n">queue</span> <span class="o">=</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line">    <span class="n">dispatch_async</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="c1">//在这个10秒内锁屏</span>
</span><span class="line">         <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;准备休眠&quot;</span><span class="p">);</span>
</span><span class="line">        <span class="n">sleep</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class="line">        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;打印成功&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>应用运行过程中锁屏，总是会出现以下提示：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"><span class="o">**</span> <span class="o">-</span><span class="p">[</span><span class="bp">UIApplication</span> <span class="nl">_handleNonLaunchSpecificActions</span><span class="p">:</span><span class="nl">forScene</span><span class="p">:</span><span class="nl">withTransitionContext</span><span class="p">:</span><span class="nl">completion</span><span class="p">:]</span> <span class="o">**</span> <span class="n">unhandled</span> <span class="n">action</span> <span class="o">-&gt;</span> <span class="o">&lt;</span><span class="nl">FBSSceneSnapshotAction</span><span class="p">:</span> <span class="mh">0x16da76c0</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class="line">    <span class="n">handler</span> <span class="o">=</span> <span class="n">remote</span><span class="p">;</span>
</span><span class="line">    <span class="n">info</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nl">BSSettings</span><span class="p">:</span> <span class="mh">0x16d80e50</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class="line">        <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>当应用处于空闲状态时（无网络请求）锁屏对于用户而言并无较大影响，</p>

<p>但是当应用在执行某个异步任务时（比如下拉刷新一下列表）锁屏，重新解锁进入就可能会发现异步任务失败，控制台也会提示 Error 信息：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"><span class="o">**</span> <span class="o">-</span><span class="p">[</span><span class="bp">UIApplication</span> <span class="nl">_handleNonLaunchSpecificActions</span><span class="p">:</span><span class="nl">forScene</span><span class="p">:</span><span class="nl">withTransitionContext</span><span class="p">:</span><span class="nl">completion</span><span class="p">:]</span> <span class="o">**</span> <span class="n">unhandled</span> <span class="n">action</span> <span class="o">-&gt;</span> <span class="o">&lt;</span><span class="nl">FBSSceneSnapshotAction</span><span class="p">:</span> <span class="mh">0x16da76c0</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class="line">    <span class="n">handler</span> <span class="o">=</span> <span class="n">remote</span><span class="p">;</span>
</span><span class="line">    <span class="n">info</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nl">BSSettings</span><span class="p">:</span> <span class="mh">0x16d80e50</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class="line">        <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="n">error</span> <span class="k">in</span> <span class="nl">__connection_block_invoke_2</span><span class="p">:</span> <span class="n">Connection</span> <span class="n">interrupted</span>
</span><span class="line"> <span class="err">```</span>
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>以上情况不易复现，但确有发生。</p>

<p>在 iOS8 系统下测试并未发现此问题。</p>

<p>对此并未找到合理的解释和对应的解决办法，如果你有解决方法，欢迎提 PR !</p>

<h3 id="didfinishlaunchingwithoptionswindowrootviewcontroller">在<code>didFinishLaunchingWithOptions</code>结束后还没有设置window的<code>rootViewController</code>会导致崩溃</h3>

<p>iOS9 不允许在 <code>didFinishLaunchingWithOptions</code> 结束了之后，还没有设置 window 的 <code>rootViewController</code> 。 也许是 Xcode7 的编译器本身就不支持。</p>

<p>崩溃时的控制台日志提示：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"><span class="o">***</span> <span class="n">Assertion</span> <span class="n">failure</span> <span class="k">in</span> <span class="o">-</span><span class="p">[</span><span class="bp">UIApplication</span> <span class="nl">_runWithMainScene</span><span class="p">:</span><span class="nl">transitionContext</span><span class="p">:</span><span class="nl">completion</span><span class="p">:],</span> <span class="o">/</span><span class="n">BuildRoot</span><span class="o">/</span><span class="n">Library</span><span class="o">/</span><span class="n">Caches</span><span class="o">/</span><span class="n">com</span><span class="p">.</span><span class="n">apple</span><span class="p">.</span><span class="n">xbs</span><span class="o">/</span><span class="n">Sources</span><span class="o">/</span><span class="n">UIKit_Sim</span><span class="o">/</span><span class="n">UIKit</span><span class="o">-</span><span class="mf">3505.16</span><span class="o">/</span><span class="bp">UIApplication</span><span class="p">.</span><span class="nl">m</span><span class="p">:</span><span class="mi">3294</span>
</span><span class="line">
</span><span class="line"><span class="o">***</span>  <span class="n">Terminating</span> <span class="n">app</span> <span class="n">due</span> <span class="n">to</span> <span class="n">uncaught</span> <span class="n">exception</span> <span class="err">&#39;</span><span class="n">NSInternalInconsistencyException</span><span class="err">&#39;</span><span class="p">,</span> <span class="nl">reason</span><span class="p">:</span> <span class="err">&#39;</span><span class="n">Application</span> <span class="n">windows</span> <span class="n">are</span> <span class="n">expected</span> <span class="n">to</span> <span class="n">have</span> <span class="n">a</span> <span class="n">root</span> <span class="n">view</span> <span class="n">controller</span> <span class="n">at</span> <span class="n">the</span> <span class="n">end</span> <span class="n">of</span> <span class="n">application</span> <span class="n">launch</span><span class="err">&#39;</span>
</span><span class="line">
</span><span class="line"><span class="o">***</span> <span class="n">First</span> <span class="n">throw</span> <span class="n">call</span> <span class="nl">stack</span><span class="p">:</span>
</span><span class="line"><span class="cm">/*省略*/</span>
</span><span class="line"><span class="n">libc</span><span class="o">++</span><span class="n">abi</span><span class="p">.</span><span class="nl">dylib</span><span class="p">:</span> <span class="n">terminating</span> <span class="n">with</span> <span class="n">uncaught</span> <span class="n">exception</span> <span class="n">of</span> <span class="n">type</span> <span class="bp">NSException</span>
</span><span class="line"><span class="p">(</span><span class="n">lldb</span><span class="p">)</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>解决的方法是先设初始化个值，之后再赋值替换掉：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"><span class="bp">UIWindow</span> <span class="o">*</span><span class="n">window</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIWindow</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame</span><span class="p">:[</span><span class="n">UIScreenmainScreen</span><span class="p">].</span><span class="n">bounds</span><span class="p">];</span>
</span><span class="line"><span class="n">window</span><span class="p">.</span><span class="n">rootViewController</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIViewController</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>尤其注意一种情况，在 iOS8以前，我们有时候会通过在 AppDelegate 中添加另一个 UIWindow ，并修改其 Level 来达到 addSubview 的效果，因而也不设置 window 的 <code>rootViewController</code> ，而是把它直接以视图的形式展示了，则在 iOS8 上是警告，在 iOS9 上就崩溃了。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"><span class="o">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nl">application</span><span class="p">:(</span><span class="bp">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="n">application</span> <span class="nl">didFinishLaunchingWithOptions</span><span class="p">:(</span><span class="bp">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="n">launchOptions</span> <span class="p">{</span>
</span><span class="line">    <span class="nb">self</span><span class="p">.</span><span class="n">window</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIWindow</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame</span><span class="p">:[[</span><span class="bp">UIScreen</span> <span class="n">mainScreen</span><span class="p">]</span> <span class="n">bounds</span><span class="p">]];</span>
</span><span class="line">    <span class="nb">self</span><span class="p">.</span><span class="n">window</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">yellowColor</span><span class="p">];</span>
</span><span class="line">    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">window</span> <span class="n">makeKeyAndVisible</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">    <span class="bp">UIWindow</span> <span class="o">*</span><span class="n">normalWindow</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIWindow</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame</span><span class="p">:[[</span><span class="bp">UIScreen</span> <span class="n">mainScreen</span><span class="p">]</span> <span class="n">bounds</span><span class="p">]];</span>
</span><span class="line">    <span class="n">normalWindow</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">blueColor</span><span class="p">];</span>
</span><span class="line">    <span class="n">normalWindow</span><span class="p">.</span><span class="n">windowLevel</span> <span class="o">=</span> <span class="n">UIWindowLevelAlert</span><span class="p">;</span>
</span><span class="line">    <span class="p">[</span><span class="n">normalWindow</span> <span class="n">makeKeyAndVisible</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这种情况，在 <code>didFinishLaunchingWithOptions</code> 需要修改原来的策略，将第二个 window 类型改为其他类型，比如 viewController 类型、navigation 类型、tabbarController 类型等。</p>

<h2 id="demo5demo6-----api">9.Demo5、Demo6— 搜索 API</h2>

<p>导入两个 framework，</p>

<p>然后像设置tableView 的 cell 一样设置下每一个“搜索元素”，搜索元素的组成如下：</p>

<p><img src="http://i57.tinypic.com/144b22w.jpg" alt="enter image description here" /></p>

<p>详情见 Demo6 代码。</p>

<p><img src="http://image17-c.poco.cn/mypoco/myphoto/20150923/21/17338872420150923214730010.gif?370x686_110" alt="enter image description here" /></p>

<p>既然刚才说了搜索元素与 tableView 的 cell 非常相似：那么我们就展示一下如何让 tableView 与 CoreSpotlightSearch 进行结合：</p>

<p>详见 Demo6，Demo6 与 Demo5 的主要差异在于：在点击搜索结果跳转到 App 后，还会进一步根据搜索的内容 push 到相应的详情页中：</p>

<p><img src="http://image17-c.poco.cn/mypoco/myphoto/20150924/00/17338872420150924001340035.gif?306x572_110" alt="enter image description here" /></p>

<h2 id="ios">10.iOS国际化问题：当前设备语言字符串返回有变化。</h2>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="o">&lt;</span><span class="n">div</span> <span class="k">class</span><span class="o">=</span><span class="err">&#39;</span><span class="n">bogus</span><span class="o">-</span><span class="n">wrapper</span><span class="err">&#39;</span><span class="o">&gt;&lt;</span><span class="n">notextile</span><span class="o">&gt;&lt;</span><span class="n">figure</span> <span class="k">class</span><span class="o">=</span><span class="err">&#39;</span><span class="n">code</span><span class="err">&#39;</span><span class="o">&gt;&lt;</span><span class="n">div</span> <span class="k">class</span><span class="o">=</span><span class="s">&quot;highlight&quot;</span><span class="o">&gt;&lt;</span><span class="n">table</span><span class="o">&gt;&lt;</span><span class="n">tr</span><span class="o">&gt;&lt;</span><span class="n">td</span> <span class="k">class</span><span class="o">=</span><span class="s">&quot;gutter&quot;</span><span class="o">&gt;&lt;</span><span class="n">pre</span> <span class="k">class</span><span class="o">=</span><span class="s">&quot;line-numbers&quot;</span><span class="o">&gt;&lt;</span><span class="n">span</span> <span class="k">class</span><span class="o">=</span><span class="err">&#39;</span><span class="n">line</span><span class="o">-</span><span class="n">number</span><span class="err">&#39;</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;</span>
</span><span class="line"><span class="o">&lt;</span><span class="n">span</span> <span class="k">class</span><span class="o">=</span><span class="err">&#39;</span><span class="n">line</span><span class="o">-</span><span class="n">number</span><span class="err">&#39;</span><span class="o">&gt;</span><span class="mi">2</span><span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;</span>
</span><span class="line"><span class="o">&lt;</span><span class="n">span</span> <span class="k">class</span><span class="o">=</span><span class="err">&#39;</span><span class="n">line</span><span class="o">-</span><span class="n">number</span><span class="err">&#39;</span><span class="o">&gt;</span><span class="mi">3</span><span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;</span>
</span><span class="line"><span class="o">&lt;</span><span class="n">span</span> <span class="k">class</span><span class="o">=</span><span class="err">&#39;</span><span class="n">line</span><span class="o">-</span><span class="n">number</span><span class="err">&#39;</span><span class="o">&gt;</span><span class="mi">4</span><span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;</span>
</span><span class="line"><span class="o">&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">td</span><span class="o">&gt;&lt;</span><span class="n">td</span> <span class="k">class</span><span class="o">=</span><span class="err">&#39;</span><span class="n">code</span><span class="err">&#39;</span><span class="o">&gt;&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span> <span class="k">class</span><span class="o">=</span><span class="err">&#39;&#39;</span><span class="o">&gt;&lt;</span><span class="n">span</span> <span class="k">class</span><span class="o">=</span><span class="err">&#39;</span><span class="n">line</span><span class="err">&#39;</span><span class="o">&gt;</span><span class="bp">NSUserDefaults</span> <span class="o">*</span><span class="n">defaults</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">];</span>
</span><span class="line"><span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;&lt;</span><span class="n">span</span> <span class="k">class</span><span class="o">=</span><span class="err">&#39;</span><span class="n">line</span><span class="err">&#39;</span><span class="o">&gt;</span><span class="bp">NSArray</span> <span class="o">*</span><span class="n">allLanguage</span> <span class="o">=</span> <span class="p">[</span><span class="n">defaults</span> <span class="nl">objectForKey</span><span class="p">:</span><span class="s">@&quot;AppleLanguages&quot;</span><span class="p">];</span>
</span><span class="line"><span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;&lt;</span><span class="n">span</span> <span class="k">class</span><span class="o">=</span><span class="err">&#39;</span><span class="n">line</span><span class="err">&#39;</span><span class="o">&gt;</span><span class="bp">NSString</span> <span class="o">*</span><span class="n">currentLanguage</span> <span class="o">=</span> <span class="p">[</span><span class="n">allLanguage</span> <span class="nl">objectAtIndex</span><span class="p">:</span><span class="mi">0</span><span class="p">];</span>
</span><span class="line"><span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;&lt;</span><span class="n">span</span> <span class="k">class</span><span class="o">=</span><span class="err">&#39;</span><span class="n">line</span><span class="err">&#39;</span><span class="o">&gt;</span><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;The current language is : %@&quot;</span><span class="p">,</span> <span class="n">currentLanguage</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">td</span><span class="o">&gt;&lt;/</span><span class="n">tr</span><span class="o">&gt;&lt;/</span><span class="n">table</span><span class="o">&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;&lt;/</span><span class="n">figure</span><span class="o">&gt;&lt;/</span><span class="n">notextile</span><span class="o">&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>iOS 9 之前：以上返回结果：语言字符串代码。例如：”zh-Hans”</p>

<p>iOS 9:以上返回结果：语言字符串代码 + 地区代码。例如：”zh-Hans-US”</p>

<p>备注：<br />
1.请注意判断当前语言类型，不要用以下形式的代码了，不然在iOS9上就会遇到坑。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">if ([currentLanguage isEqualToString:@"zh-Hans"])</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可以使用：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">if ([currentLanguage hasPrefix:@"zh-Hans"])</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>另外：对于中文，语言有：</p>

<ul>
  <li>简体中文:zh-Hans</li>
  <li>繁体中文:zh-Hant</li>
  <li>香港中文:zh-HK</li>
  <li>澳门中文:zh-MO</li>
  <li>台湾中文:zh-TW</li>
  <li>新加坡中文:zh-SG</li>
</ul>

<p><strong>备注：以上iOS9 当前语言字符串返回结果：语言字符串代码 + 地区代码。在某些情况下不是这样，本人手机型号：大陆版电信iPhone5S/A1533/16GB测试结果：zh-HK/zh-TW，在地区为”中国”、”中国香港”、”中国台湾”的时候，显示的还是zh-HK/zh-TW，一旦切换到其它地区，设备语言会自动的切换到中文繁体。请开发人员注意中文的问题！</strong></p>

<h2 id="uitableview">11.UITableView显示异常</h2>

<p>原本在 Xcode6 上完好的项目，在 Xcode7 上一编译， <code>tableView</code> 出了两个问题 ：</p>

<ol>
  <li>代码创建的 <code>tableView</code> 无法隐藏 cell 分割线</li>
  <li><code>reloadData</code> 刷新失效；</li>
</ol>

<h3 id="tableview--cell-">代码创建的 <code>tableView</code> 无法隐藏 cell 分割线</h3>

<p>iOS9 里面用到 tableView 突然跑出来了很多 cell 的分割线， 但是在用xib创建的 tableview，就不存在这个问题</p>

<p>解决方法是将设置分割线隐藏的方法 <code>self.tableView.separatorStyle = UITableViewCellSeparatorStyleNone;</code> 写在 <code>-layoutSubviews</code> 中：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">layoutSubviews</span><span class="p">{</span>
</span><span class="line">    <span class="p">[</span><span class="nb">super</span> <span class="n">layoutSubviews</span><span class="p">];</span>
</span><span class="line">    <span class="nb">self</span><span class="p">.</span><span class="n">tableView</span><span class="p">.</span><span class="n">separatorStyle</span> <span class="o">=</span> <span class="n">UITableViewCellSeparatorStyleNone</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"> <span class="err">```</span>
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>也有人发现另一种方法，就是每次 reloadData 之前都进行一次设置：设置分割线隐藏，这样也可以解决：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line">    <span class="nb">self</span><span class="p">.</span><span class="n">tableView</span><span class="p">.</span><span class="n">separatorStyle</span> <span class="o">=</span> <span class="n">UITableViewCellSeparatorStyleNone</span><span class="p">;</span>
</span><span class="line">   <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">tableView</span> <span class="n">reloadData</span><span class="p">]</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>虽然也可以解决但是不推荐，这样写会给其他人造成困扰：不知所云。</p>

<h3 id="reloaddata-"><code>reloadData</code> 刷新失效</h3>

<p>现象： <code>[tableView reloadData]</code> 无效，有一行 cell 明明改变了但是刷新不出来。</p>

<p>感觉可能是这个方法和某种新加的特性冲突了，猜测可能是 <code>reloadData</code> 的操作被推迟到下一个 <code>RunLoop</code> 执行最终失效。</p>

<p>解决的方法是，注释 <code>[tableView reloadData]</code> ，改用局部刷新：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">tableView</span> <span class="nl">reloadSections</span><span class="p">:[</span><span class="bp">NSIndexSet</span> <span class="nl">indexSetWithIndex</span><span class="p">:</span><span class="mi">0</span><span class="p">]</span> <span class="nl">withRowAnimation</span><span class="p">:</span><span class="n">UITableViewRowAnimationNone</span><span class="p">];</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这两个推测均属 Xcode7 的bug，将来 Apple 肯定会修复。</p>

<h1 id="section-2">结束语</h1>

<p>疏漏之处，可前往阅读下<a href="http://asciiwwdc.com">这个网站</a>，这里有每年 WWDC 演讲的英文记录。</p>

<hr />

<p>Posted by <a href="http://weibo.com/luohanchenyilong/">微博@iOS程序犭袁</a><br />
原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">Creative Commons BY-NC-ND 3.0</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby gems内存泄露]]></title>
    <link href="http://helloyokoy.github.io/blog/ruby-gems-memory-leak/"/>
    <updated>2015-10-22T15:01:34+08:00</updated>
    <id>http://helloyokoy.github.io/blog/ruby-gems-memory-leak</id>
    <content type="html"><![CDATA[<p>请大家检查下 Gemfile.lock，若在使用如下版本的gem包，那么请及时更新</p>

<ul>
  <li>
    <p>therubyracer &lt; 0.12.2</p>
  </li>
  <li>
    <p>sidekiq &lt; 3.5.1</p>
  </li>
  <li>
    <p>celluloid &gt; 0.16.0, &lt; 0.17.2</p>
  </li>
  <li>
    <p>zipruby &lt;= 0.3.6</p>
  </li>
  <li>
    <p>redcarpet &lt; 3.3.3</p>
  </li>
  <li>
    <p>grape &lt; 0.2.5</p>
  </li>
</ul>

<p><a href="https://github.com/ASoftCo/leaky-gems">https://github.com/ASoftCo/leaky-gems</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotion简介]]></title>
    <link href="http://helloyokoy.github.io/blog/rubymotion/"/>
    <updated>2015-10-15T15:52:38+08:00</updated>
    <id>http://helloyokoy.github.io/blog/rubymotion</id>
    <content type="html"><![CDATA[<h2 id="rubymotion-">RubyMotion 是什么</h2>
<p><img src="https://ruby-china-files.b0.upaiyun.com/photo/2015/aa191c47356e1b30b1f1a7d7e82fea3c.gif" alt="icon" /></p>

<h2 id="section">统一的运行时环境</h2>
<p>在 iOS 以及 OS X 系统之上，RubyMotion 基于 Objective-C Runtime 和 Foundation 类实现了 Ruby 语言。 在 Andorid 系统之上，RubyMotion 基于 Android Java Runtime，Dalvik 以及 ART 实现了 Ruby 语言。由于这种异常紧密的集成，Ruby 可以自如的调用各平台的接口而不会产生任何性能损失。你可以轻松自如的混编 Ruby 和 Objective-C 或者 Ruby 和 Java，自由的访问各平台提供的最新的 API，自由调用各种第三方库。</p>

<h2 id="section-1">完全编译</h2>

<p>RubyMotion 使用基于 LLVM 构建(参见原理)的革命性的、先进的预编译器（AOT Complier）将项目中的 Ruby 代码编译成经过优化的机器代码。在 iOS 以及 Android 项目，编译器可以生成 32 位和 64 位的 ARM 目标代码，在 OS X 项目则可以生成 32 位和 64 位的 Intel 目标代码。原始的 Ruby 代码不会出现在程序中，也不会在运行期间被解释执行。RubyMotion 的典型项目的程序包大小在 1MB 以下。</p>

<h2 id="section-2">自动管理内存</h2>

<p>在 Ruby 语言中，你无需考虑内存管理事宜。因为，RubyMotion 会自动释放内存中那些你创建的但是却不再会被使用的对象。针对 iOS 和 OS X 平台，我们提供了一个自定义的内存模型，在设计上类似 Objective-C 的 ARC 机制。这个模型无需再使用额外内存或者代码来处理不再使用的对象的声明和回收。针对 Android 平台，我们使用 Java 运行时环境的 GC 来管理内存。</p>

<!--more-->

<h2 id="section-3">支持并行</h2>

<p>绝大斗数 Android 设备以及最新的 iOS 和 OS X 硬件都支持多核处理器。所以在设计应用程序时，考虑到支持并发是非常重要的。RubyMotion 被设计成没有全局锁且是可重入的（re-entrant），主要目的就是可以让代码并行的执行。针对 iOS 和 OS X 平台，RubyMotion 为 Grand Central Dispatch 提供了方便的接口，你可以自如的使用 CPU 核心来平衡需要大量计算的任务。</p>

<h2 id="rubymotion">要不要选择 RubyMotion</h2>

<p>如果你喜欢 Ruby，当然你需要来尝试 RubyMotion，并且你会爱上他。并且，选择 RubyMotion 意味着你可以像开发 Rails 应用一样使用 Rake 工具链，同时又不会放弃 AutoLayout 等原生开发时必须的技术。你可以使用来自人类希望的 JetBrains 出品的 RubyMine，也可以使用 SublimeText 或者 VIM(Emacs)。你会看到类似 Rails 的文件组织结构。作为一个 Rails 开发者，你会感到所有的开发环境都是如此的令人感到熟悉。一个人，凭借 Ruby 实现真正意义上的全端全栈，似乎指日可待啊～</p>

<h2 id="section-4">社区发展</h2>

<p>RubyMotion 存在已经第四个年头，所以目前是一个稳定的项目。由于之前没有提供免费试用版，所以造成好多人想去学习，却因为感觉到相对昂贵的价格而止步不前。现在不用了，快去 <a href="http://www.rubymotion.com/download/">http://www.rubymotion.com/download/</a> 下载免费版把玩吧……</p>

<p>在社区发展方面，社区贡献了非常多的 Gems。得益于 Ruby 强大的 DSL 生成能力和元编程特性，非常多的 Gems 对原生开发冗余的编程模型和繁杂的 API 调用做了非常好的封装。<a href="http://motion-toolbox.com/">http://motion-toolbox.com/</a> 里面收录了绝大多数优质的 RubyMotion 的 Gems。</p>

<h2 id="section-5">相关资料</h2>

<p><a href="https://ruby-china.org/topics/22416">RubyMotion Workshop Beijing 资料总结</a>
<a href="http://www.rubymotion.com/download/">RubyMotion 官网</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[android 开发遇到的坑]]></title>
    <link href="http://helloyokoy.github.io/blog/android-mistake/"/>
    <updated>2015-10-12T14:21:57+08:00</updated>
    <id>http://helloyokoy.github.io/blog/android-mistake</id>
    <content type="html"><![CDATA[<p>作为一个有三、四年Android应用开发经验的码农，自然会遇到很多坑，下面是我能够想起的一些坑（实践证明不记笔记可不是个好习惯），后面有想到其它坑会陆续补上。</p>

<ul>
  <li>
    <p>在Android library中不能使用switch-case语句访问资源ID：
<a href="http://zmywly8866.github.io/2014/12/24/android-can-not-use-switch-to-load-resource-in-libproject-solution.html">在Android library中不能使用switch-case语句访问资源ID的原因分析及解决方案</a></p>
  </li>
  <li>
    <p>不能在Activity没有完全显示时显示PopupWindow和Dialog：<a href="http://stackoverflow.com/questions/4187673/problems-creating-a-popup-window-in-android-activity">popupwindow - Problems creating a Popup Window in Android Activity</a></p>
  </li>
  <li>
    <p>在多进程之间不要用SharedPreferences共享数据，虽然可以（MODE_MULTI_PROCESS），但极不稳定：<a href="http://stackoverflow.com/questions/22129717/mode-multi-process-for-sharedpreferences-isnt-working">android - MODE_MULTI_PROCESS for SharedPreferences isn’t working</a></p>
  </li>
</ul>

<!--more-->

<ul>
  <li>
    <p>有些时候不能使用Application的Context，不然会报错（比如启动Activity，显示Dialog等）：
<img src="https://pic3.zhimg.com/e3f3236cbd96c69cdea10d014bacbeae_b.png" alt="icon" /></p>
  </li>
  <li>
    <p>同一个应用的JNI代码，不要轻易换NDK编译的版本，否则会有很多问题（主要是一些方法实现不一样，并且高版本对代码的检测更严格），比如r8没有问题，但到r9就有问题了，这是个大坑；</p>
  </li>
  <li>
    <p>Android的JNI代码中，有返回类型的函数没有返回值编译的时候也不会报错；</p>
  </li>
  <li>
    <p>当前Activity的onPause方法执行结束后才会执行下一个Activity的onCreate方法，所以在onPause方法中不适合做耗时较长的工作，这会影响到页面之间的跳转效率；</p>
  </li>
  <li>
    <p>谨慎使用Android的透明主题，透明主题会导致很多问题，比如：如果新的Activity采用了透明主题，那么当前Activity的onStop方法不会被调用；在设置为透明主题的Activity界面按Home键时，可能会导致刷屏不干净的问题；进入主题为透明主题的界面会有明显的延时感；</p>
  </li>
  <li>
    <p>不要在非UI线程中初始化ViewStub，否则会返回null；</p>
  </li>
  <li>
    <p>公共接口一定要考虑到代码重入的情况，能设计为单例就尽量用单例；</p>
  </li>
  <li>
    <p>不要通过Bundle传递大块的数据，否则会报TransactionTooLargeException异常：<a href="http://stackoverflow.com/questions/12819617/issue-passing-large-data-to-second-activity">java - Issue: Passing large data to second Activity</a></p>
  </li>
  <li>
    <p>尽量不要通过Application缓存数据，这不稳定：
<a href="http://zmywly8866.github.io/2014/12/26/android-do-not-store-data-in-the-application-object.html">不要在Android的Application对象中缓存数据!</a></p>
  </li>
  <li>
    <p>尽量不要使用AnimationDrawable，它在初始化的时候就将所有图片加载到内存中，特别占内存，并且还不能释放，释放之后下次进入再次加载时会报错；</p>
  </li>
  <li>
    <p>9图不能通过tinypng压缩，不然会有问题；</p>
  </li>
  <li>
    <p>genymotion模拟器快是因为它是基于x86架构的，如果你的应用中用到了so，但没有x86架构的so，只能放弃使用它；Android Studio的模拟器也一样；</p>
  </li>
  <li>
    <p>Eclipse的Android开发环境配置好后不要轻易升级ADT和build tools，不然会浪费你很多时间，还有就是一个workspace中的工程不要太多，不然每次启动都会很慢；</p>
  </li>
  <li>
    <p>Android studio每个版本、gradle每个版本差别都比较大（我是这样认为的），对于jni代码的编译建议在Eclipse中进行，如果在Android studio中开发jni会浪费很多时间，主要是编译脚本的配置比较麻烦；</p>
  </li>
  <li>
    <p>Eclipse中的Lint太不靠谱，特别是主工程中依赖library的时候，很多提示都是有问题的，建议使用Android Studio的工程清理工具，特别推荐；</p>
  </li>
  <li>
    <p>AsyncTask默认自己维护一个静态的线程池，而该线程池只允许同时执行一个线程，也就是说，不管多少个AsyncTask,只要是调用execute()方法，都是共享这个默认进程池的，你的任务必须在之前的任务执行完以后，才能执行。<a href="http://zmywly8866.github.io/2015/09/29/android-call-asynctask-excute-not-run.html">调用AsyncTask的excute方法不能立即执行程序的原因分析及改善方案</a></p>
  </li>
</ul>

<hr />
<p>著作权归作者所有。</p>

<p>商业转载请联系作者获得授权，非商业转载请注明出处。</p>

<p>作者：张明云</p>

<p>链接：http://www.zhihu.com/question/27818921/answer/70279930</p>

<p>来源：知乎</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails gems 推荐]]></title>
    <link href="http://helloyokoy.github.io/blog/rails-gems-recomend/"/>
    <updated>2015-10-05T12:31:27+08:00</updated>
    <id>http://helloyokoy.github.io/blog/rails-gems-recomend</id>
    <content type="html"><![CDATA[<p>Rails社区的gem库，按我感觉质量普遍比较高，这跟Rails社区的氛围有关，以下推荐的是我个人在项目中时常用到的并且比较主流的gem，想到哪儿写到哪儿，挂一漏万。</p>

<h5 id="bootstrapbootstrap-sass">1.bootstrap（bootstrap-sass）</h5>

<p>这个不用解释了吧，对于没有专业前端小伙伴的项目和团队是福音。而且对于想要学习前端技术的同学，bootstrap的源码非常值得进行深入的学习和理解。当然，缺点也是有的，就是大家的网站做出来都比较像，建议有条件的小伙伴使用的时候还是多进行一些个性化修改。</p>

<h5 id="capistranocapistrano--rubygemsorg">2.Capistrano（capistrano | RubyGems.org）</h5>

<p>Capistrano最初就是用来向服务器部署ruby应用的，当然现在也开始支持其他类型项目的部署。Capistrano是一种在多台服务器上运行脚本的开源工具，它主要用于部署web应用。它自动完成多台服务器上新版本的同步更新，包括数据库的改变。使用起来非常方便，基本也是Rails应用开发必备。</p>

<h5 id="bcryptbcrypt--rubygemsorg">3.bcrypt（bcrypt | RubyGems.org）</h5>

<p>bcrypt是一个跨平台的文件加密工具。由它加密的文件可在所有支持的操作系统和处理器上进行转移。它的口令必须是8至56个字符，并将在内部被转化为448位的密钥。在rails上使用起来相当简便，web开发一般是少不了的。</p>

<h5 id="sprocketssprockets--rubygemsorg">4.sprockets（sprockets | RubyGems.org）</h5>

<p>Sprockets 是一个 Ruby 库，用来检查 JavaScript 文件的相互依赖关系，用以优化网页中引入的js文件，以避免加载不必要的js文件，加快网页访问速度。这个现在貌似是rails工程默认自带gem，记不太清了，足见重要性。但是我在使用中发现有时候会跟bootstrap的js库发生冲突，主要是版本问题，有使用的小伙伴需要注意一下。</p>

<!--more-->

<h5 id="paperclippaperclip--rubygemsorg">5.Paperclip（paperclip | RubyGems.org）</h5>

<p>paperclip基本上已经是rails的御用图片上传gem了，功能强大使用方便，但是唯一不太好的就是图片剪裁上面功能比较有限。paperclip依赖于ImageMagic，大部分linux包管理器（如apt yum portage等）中应该都能找到这个软件包。</p>

<h5 id="rmagickrmagick--rubygemsorg">6.rmagick（rmagick | RubyGems.org）</h5>

<p>这个gem弥补了paperclip在图片剪裁上的不足。功能十分十分十分的强大，文档也很齐全，只不过是全英文，中文资料比较少。如果项目有要开发头像剪裁上传，那么用rmagic剪裁，paperclip上传是比较好的解决方案。</p>

<h5 id="friendlyidfriendlyid--rubygemsorg">7.friendly_id（friendly_id | RubyGems.org）</h5>

<p>现在大部分网站都已经是友好的url地址了，如果你的rails项目还用数字作为id进行查询那就太low了。</p>

<h5 id="willpaginatewillpaginate">8.will_paginate（will_paginate）</h5>

<p>老版本的will_paginate分业是基于plugin方式的，新版本的will_paginate已经抛弃了这样的做法，转而使用gem的方式。这样一来安装和使用更加方便，配合一些前端的分页加载库，会让分页加载功能开发非常快捷。</p>

<h5 id="ransackransack--rubygemsorg">9.ransack（ransack | RubyGems.org）</h5>

<p>搜索功能一般分为分词和不分词的，如果你只想做用户和文章标题检索之类的功能，那么不分词的搜索gem比较合适，类似的gem挺多的，我常用的是这个。</p>

<h5 id="sunspotsunspot--rubygemsorg">10.sunspot（sunspot | RubyGems.org）</h5>

<p>接上面，全文搜索的gem也不少，sunspot对于小型项目的话，稍微有些重。如果没有那么多要求的话，sphinx也可以考虑，速度快，占用资源低。</p>

<h5 id="gecodergeocoder--rubygemsorg">11.Gecoder（geocoder | RubyGems.org）</h5>

<p>说实话在web上做定位确实比较乏力，尽量还是用手机客户端吧</p>

<h5 id="pumapumapuma--github">12.puma（puma/puma · GitHub）</h5>

<p>对于想要处理并发请求的web项目，Puma 是和 Unicorn相竞争的 Web 服务器，它能够处理并发请求。Puma 使用线程，以及工作者进程，能够更多的利用可用的 CPU。在 Puma 中，如果整个基础代码是线程安全的，那么你可用利用线程。否则，在使用 Puma 的时候，你只能使用工作者进程进行拓展。Puma的设置也比较简单，官方有详细的使用文档，RubyChina也使用Puma，个人推荐。</p>

<h5 id="emojiwpetersonemoji--github">13.Emoji（wpeterson/emoji · GitHub）</h5>

<p>现在只要涉及社交的项目估计很少有不用表情的了，Emoji是个集成度比较高的Emoji表情转码库，使用方便，当然大部分情况下还是要配合前端使用。</p>

<p>暂时想到这么多，欢迎补充，待续。。。。</p>

<hr />
<p>著作权归作者所有。</p>

<p>商业转载请联系作者获得授权，非商业转载请注明出处。</p>

<p>作者：孙笛</p>

<p>链接：http://www.zhihu.com/question/31083216/answer/50654456</p>

<p>来源：知乎</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby on rails 快速学习]]></title>
    <link href="http://helloyokoy.github.io/blog/ruby-fast-learn/"/>
    <updated>2015-09-02T12:07:16+08:00</updated>
    <id>http://helloyokoy.github.io/blog/ruby-fast-learn</id>
    <content type="html"><![CDATA[<p>快速学习Ruby on Rails，这应该是个伪命题，没有什么事情是能够快速学习的，尤其是编程，而且是Rails这样极其复杂的框架，它由无数顶级高手成年累月的心血堆砌而成，融合了web开发领域内几乎全部的最佳实践。</p>

<p>如果想快速入门，那么其他一些人提过的 Rails Tutorial，或者 Rails for Zombies 都是很好的选择，但相信我，即便你能快速做出简单的网站，依旧会对整个开发环境和知识体系一头雾水，在面临现实世界的需求时往往会捉襟见肘，花费更多的时间来补充缺失的知识。</p>

<p>所以，我认为如果你的目的不是创业，而是学习的话，全面有效成体系地吸收知识是更好的选择，这方面，读书是最好的方式，不过市场上滥竽充数的书籍实在很多，对于新手来说，怎样用有限的时间读最合适的书，是很重要的。</p>

<p>我在学习和使用Ruby与Rails的过程中，读过大部分在Amazon排名靠前的相关书籍，当然有些不错的书，随着技术的进化，已经略显陈旧。以下给出的阅读列表，是在现在依然有效的选择：</p>

<!--more-->

<h4 id="section">起点阶段</h4>

<p>强烈建议至少具备如下知识后再开始Rails开发</p>

<h4 id="html-and-css">Html and CSS</h4>

<p>结构和样式不止是设计人员的事，web开发必须要熟悉Head First HTML与CSS（第2版）虽然已经出版了很久，但依然是最好的Html&amp;CSS入门书</p>

<h4 id="linux">Linux</h4>

<p>几乎所有的开发环境都严重依赖于GNU/Linux为主的命令行环境，因此需要学习linux的基本概念和操作</p>

<p>The Linux Command Line</p>

<p>目前最好的linux command line学习指南，生动，清晰，详细，无论是菜鸟还是多年的老手都能从中受益，远超过之前作为标准教材的practical guide to xx系列。No starch这个出版社既有延续至今的Hacker精神，也懂得如何发掘有趣的作者</p>

<h4 id="http-and-rest">HTTP and Rest</h4>

<p>Web开发对于Http的深入理解是必须的，另外Rails还使用Rest协议作为基本指导原则，所以需要深入理解Http和RestRESTful Web Services中文版 这本是目前为止最好的描述HTTP与Rest的作品，可以让你重新认识Web，更何况其中的示例是Ruby语言(因为这本书合著者是Sam Ruby)</p>

<h4 id="programming">Programming</h4>

<p>程序员修炼之道 这本书告诉你，如何做才能成为一个注重实效的程序员，涉及了非常多的理念和实践，虽然都不深入，但至少让你知道世界是什么样子的，是任何程序员最应该在新手阶段读的书，也是对整个业界影响最大的经典之一</p>

<h4 id="git-and-version-control">Git and Version Control</h4>

<p>版本控制在项目中是一开始就要使用的，不止是开发，一切事情都需要版本控制Pro Git 这本是迄今为止讲解Git最清楚最深入的书，对于新手，不建议看后面的实现原理，先读前几章了解概念和学习日常实践使用是最重要的</p>

<h4 id="ruby">Ruby</h4>

<p>如果只是在Rails中使用的Ruby，可以使用一些免费的快速入门教程，不过，系统地学习Ruby，可以了解到很多面向对象开发或函数式编程的思想，对于熟悉和掌握Rails帮助非常大Programming Ruby 1.9 公认的Ruby入门经典，不过对于新手来说，只推荐前半的入门部分，高阶内容可以稍后再来学习</p>

<h4 id="rails">Rails</h4>

<p>Learn Web Development with the Ruby on Rails Tutorial</p>

<p>最后是Rails自身的学习，这本书的最新版涵盖Rails4，是目前为止最好最完整的Rails入门教程，可以在线看，还有大量的视频搭配</p>

<h4 id="section-1">进阶阶段</h4>
<p>具备下面的知识，可以让你或多或少地理解Rails Way，并真正开始写出合格的Rails应用</p>

<h4 id="programming-1">Programming</h4>

<p>重构</p>

<p>这本”重构”是当年石破天惊的经典著作，讲解如何持续改进和让代码优雅干净，拥有直到现在还依然适用的价值，尤其为Ruby On Rails社区广泛接受，这本书有将其中的Java语言换成Ruby后的版本(重构(Ruby版) (豆瓣))</p>

<p>UNIX编程艺术</p>

<p>由公认的黑客领袖之一Eric S.Raymond撰写的这本书总结了长久以来的Unix领域中的设计和开发哲学，思想乃至文化体系，是了解Ruby和Rails诞生于其中的Unix黑客文化必不可少的读物</p>

<h4 id="ruby-1">Ruby</h4>

<p>深入理解Ruby，除了上边提到的Programming Ruby 1.9以及重构等通用编程书之外，还有以下几个选择</p>

<p>Ruby编程语言</p>

<p>Ruby之父松本行弘和O’Reilly的王牌作者合作，诞生了这本讲解Ruby最透彻的经典著作</p>

<p>Eloquent Ruby</p>

<p>Ruby社区的编程指南之一，介绍了Ruby社群的文化，品味和编程原则，强烈地反映了Ruby程序员的共同特质: 幽默，健谈，追求乐趣，热爱生活</p>

<h4 id="test">Test</h4>

<p>测试驱动开发(TDD)以及之后进化的行为驱动开发(BDD)是Ruby和Rails社群的核心文化之一，只有彻底理解并运用BDD，才是合格的Rails开发者</p>

<p>The RSpec Book</p>

<p>唯一的也是必读的BDD介绍作品，由RSpec核心成员撰写</p>

<p>Git</p>

<p>可以坚持把Pro Git的后半部分学习完，没有更深入和清楚的书了</p>

<p>CSS</p>

<p>CSS权威指南</p>

<p>Eric Meyer的CSS权威指南至今仍然是CSS2讲解最全面和最深入的参考书</p>

<p>Javascript and jQuery</p>

<p>Web开发的交互性会越来越多，Javascript已经成为了相当严肃的编程语言</p>

<p>JavaScript权威指南</p>

<p>目前最全面最好的Javascript学习书籍</p>

<p>jQuery基础教程 （第4版）</p>

<p>唯一尚可称得上紧跟jQuery发展脚步的学习指南</p>

<h4 id="rails-1">Rails</h4>

<p>Rails发展的实在太快了，最好的方法也许是跟踪在线文档，不过还是推荐这本</p>

<p>The Rails 4 Way</p>

<p>这本书的Rails 3版本讲解Rails的哲学和细节相当到位，不过Rails 4版本还没有出版，非常值得在今年3月份第一时间拿下它。</p>

<p>— More</p>

<p>上边的书籍都读过的话，可能你终于能了解到Rails背后涉及的概念和实践有多么庞大惊人，也了解到了还有多么深的知识鸿沟需要跨越，了解到了一切都还只是开始，不过值得庆幸的是，一切事情都需要个开始</p>

<hr />
<p>著作权归作者所有。</p>

<p>商业转载请联系作者获得授权，非商业转载请注明出处。</p>

<p>作者：李路</p>

<p>链接：http://www.zhihu.com/question/19552402/answer/22336708</p>

<p>来源：知乎</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[android https请求no peer certificate解决方案]]></title>
    <link href="http://helloyokoy.github.io/blog/android-httpsqing-qiu-no-peer-certificatejie-jue-fang-an/"/>
    <updated>2015-08-12T16:30:44+08:00</updated>
    <id>http://helloyokoy.github.io/blog/android-httpsqing-qiu-no-peer-certificatejie-jue-fang-an</id>
    <content type="html"><![CDATA[<h3 id="section">解决方案一</h3>
<hr />

<p>写了一个自定义类继承SSLSocketFactory：</p>

<pre><code>import java.io.IOException;
import java.net.Socket;
import java.net.UnknownHostException;
import java.security.KeyManagementException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.UnrecoverableKeyException;

import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

import org.apache.http.conn.ssl.SSLSocketFactory;

public class SSLSocketFactoryEx extends SSLSocketFactory {
    
    SSLContext sslContext = SSLContext.getInstance("TLS");
    
    public SSLSocketFactoryEx(KeyStore truststore) 
                    throws NoSuchAlgorithmException, KeyManagementException,
                    KeyStoreException, UnrecoverableKeyException {
            super(truststore);
            
            TrustManager tm = new X509TrustManager() {
                    public java.security.cert.X509Certificate[] getAcceptedIssuers() {return null;}  

        @Override  
        public void checkClientTrusted(
                        java.security.cert.X509Certificate[] chain, String authType)
                                        throws java.security.cert.CertificateException {}  

        @Override  
        public void checkServerTrusted(
                        java.security.cert.X509Certificate[] chain, String authType)
                                        throws java.security.cert.CertificateException {}
    };  
    sslContext.init(null, new TrustManager[] { tm }, null);  
}  

@Override  
public Socket createSocket(Socket socket, String host, int port,boolean autoClose) throws IOException, UnknownHostException {  
        return sslContext.getSocketFactory().createSocket(socket, host, port,autoClose);  
}  

@Override  
public Socket createSocket() throws IOException {  
    return sslContext.getSocketFactory().createSocket();  
}  
}
</code></pre>

<!--more-->

<p>再来看看如何做回调：</p>

<pre><code>public static HttpClient getNewHttpClient() {  
    try {  
        KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());  
        trustStore.load(null, null);  
        
        SSLSocketFactory sf = new SSLSocketFactoryEx(trustStore);  
        sf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);  

        HttpParams params = new BasicHttpParams();  
        HttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);  
        HttpProtocolParams.setContentCharset(params, HTTP.UTF_8);  

        SchemeRegistry registry = new SchemeRegistry();  
        registry.register(new Scheme("http", PlainSocketFactory.getSocketFactory(), 80));  
        registry.register(new Scheme("https", sf, 443));  

        ClientConnectionManager ccm = new ThreadSafeClientConnManager(params, registry);  

        return new DefaultHttpClient(ccm, params);  
    } catch (Exception e) {  
        return new DefaultHttpClient();  
    }  
}  
</code></pre>

<p>现在就可以拿这个HTTPClient去请求数据了</p>

<h3 id="section-1">解决方案二</h3>
<hr />

<p><a href="http://www.cnblogs.com/P_Chou/archive/2010/12/27/https-ssl-certification.html" title="Title">http://www.cnblogs.com/P_Chou/archive/2010/12/27/https-ssl-certification.html</a>讲的非常清楚https-ssl的认证过程，膜拜下该作者</p>

<p>1.浏览器访问https地址，保存提示的证书到本地，放到android项目中的assets目录。</p>

<p>2.导入证书，代码如下。</p>

<p>3.把证书添加为信任。</p>

<pre><code>String requestHTTPSPage(String mUrl) {
    InputStream ins = null;
    String result = "";
    try {
        ins = context.getAssets().open("app_pay.cer"); //下载的证书放到项目中的assets目录中
        CertificateFactory cerFactory = CertificateFactory
                .getInstance("X.509");
        Certificate cer = cerFactory.generateCertificate(ins);
        KeyStore keyStore = KeyStore.getInstance("PKCS12", "BC");
        keyStore.load(null, null);
        keyStore.setCertificateEntry("trust", cer);
 
        SSLSocketFactory socketFactory = new SSLSocketFactory(keyStore);
        Scheme sch = new Scheme("https", socketFactory, 443);
        HttpClient mHttpClient = new DefaultHttpClient();
        mHttpClient.getConnectionManager().getSchemeRegistry()
                .register(sch);
 
        BufferedReader reader = null;
        try {
            Log.d(TAG, "executeGet is in,murl:" + mUrl);
            HttpGet request = new HttpGet();
            request.setURI(new URI(mUrl));
            HttpResponse response = mHttpClient.execute(request);
            if (response.getStatusLine().getStatusCode() != 200) {
                request.abort();
                return result;
            }
 
            reader = new BufferedReader(new InputStreamReader(response
                    .getEntity().getContent()));
            StringBuffer buffer = new StringBuffer();
            String line = null;
            while ((line = reader.readLine()) != null) {
                buffer.append(line);
            }
            result = buffer.toString();
            Log.d(TAG, "mUrl=" + mUrl + "\nresult = " + result);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (reader != null) {
                reader.close();
            }
        }
    } catch (Exception e) {
        // TODO: handle exception
    } finally {
        try {
            if (ins != null)
                ins.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    return result;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MJExtension介绍]]></title>
    <link href="http://helloyokoy.github.io/blog/mjextensionjie-shao/"/>
    <updated>2015-08-10T10:35:13+08:00</updated>
    <id>http://helloyokoy.github.io/blog/mjextensionjie-shao</id>
    <content type="html"><![CDATA[<p><img src="https://camo.githubusercontent.com/7fb40e923eeafbf4a699b9c8a54f53d88f2a70b9/687474703a2f2f696d616765732e636e6974626c6f672e636f6d2f626c6f67323031352f3439373237392f3230313530352f3035313030343331363733363634312e706e67" alt="icon" title="icon" /></p>

<h3 id="mjextension">MJExtension</h3>
<hr />

<p>The fastest, most convenient and most nonintrusive conversion between JSON and model.</p>

<p>世界上转换速度最快、使用最简单方便的字典转模型框架</p>

<p>GitHub：CoderMJLee ｜ Blog：mjios(Chinese) ｜ PR is welcome，or feedback</p>

<h3 id="getting-started">Getting Started【开始使用】</h3>
<hr />
<p>####Features【能做什么】</p>

<ul>
  <li>MJExtension是一套字典和模型之间互相转换的超轻量级框架</li>
  <li>JSON –&gt; Model、Core Data Model</li>
  <li>JSONString –&gt; Model、Core Data Model</li>
  <li>Model、Core Data Model –&gt; JSON</li>
  <li>JSON Array –&gt; Model Array、Core Data Model Array</li>
  <li>JSONString –&gt; Model Array、Core Data Model Array</li>
  <li>Model Array、Core Data Model Array –&gt; JSON Array</li>
  <li>Coding all properties of model in one line code.</li>
  <li>只需要一行代码，就能实现模型的所有属性进行Coding（归档和解档）</li>
</ul>

<!--more-->

<h4 id="why-use-mjextension-why-not-use-jsonmodel-or-mantle">Why use MJExtension, why not use JSONModel or Mantle</h4>

<h5 id="mjextension-is-faster-than-jsonmodel-and-mantle">MJExtension is faster than JSONModel and Mantle【转换速率】</h5>

<ul>
  <li>MJExtension &gt; JSONModel &gt; Mantle (Feel free to test it yourself)</li>
  <li>各位开发者也可以自行测试</li>
</ul>

<h5 id="mjextension-is-more-easy-to-gomjextension">MJExtension is more easy to go【MJExtension更加容易使用】</h5>

<ul>
  <li>
    <p>JSONModel</p>

    <ul>
      <li>You must let all model class extend JSONModel class</li>
      <li>要求所有模型类必须继承自JSONModel基类</li>
    </ul>
  </li>
  <li>
    <p>Mantle</p>

    <ul>
      <li>You must let all model class extend MTModel class.</li>
      <li>要求所有模型类必须继承自MTModel基类</li>
    </ul>
  </li>
  <li>
    <p>MJExtension</p>

    <ul>
      <li>Your model class doesn’t need to extend another base class. You don’t need to modify any model file. Nonintrusive, convenient.</li>
      <li>不需要你的模型类继承任何特殊基类，也不需要修改任何模型代码，毫无污染，毫无侵入性</li>
    </ul>
  </li>
</ul>

<h3 id="installation">Installation【安装】</h3>
<hr />
<p>####From CocoaPods【使用CocoaPods】</p>

<pre><code>pod 'MJExtension'
</code></pre>

<h4 id="manually">Manually【手动导入】</h4>

<ul>
  <li>Drag all source files under floder MJExtension to your project.【将MJExtension文件夹中的所有源代码拽入项目中】</li>
  <li>
    <p>Import the main header file：#import “MJExtension.h”【导入主头文件：#import “MJExtension.h”】</p>

    <pre><code>  MJExtension.h
  MJConst.h               MJConst.m
  MJFoundation.h          MJFoundation.m
  MJProperty.h            MJProperty.m
  MJType.h                MJType.m
  NSObject+MJCoding.h     NSObject+MJCoding.m
  NSObject+MJProperty.h   NSObject+MJProperty.m
  NSObject+MJKeyValue.h   NSObject+MJKeyValue.m
</code></pre>
  </li>
</ul>

<h3 id="examples">Examples【示例】</h3>
<hr />

<h4 id="the-most-simple-json---model">The most simple JSON -&gt; Model【最简单的字典转模型】</h4>

<pre><code>typedef enum {
SexMale,
SexFemale
} Sex;

@interface User : NSObject
@property (copy, nonatomic) NSString *name;
@property (copy, nonatomic) NSString *icon;
@property (assign, nonatomic) unsigned int age;
@property (copy, nonatomic) NSString *height;
@property (strong, nonatomic) NSNumber *money;
@property (assign, nonatomic) Sex sex;
@property (assign, nonatomic, getter=isGay) BOOL gay;
@end

/***********************************************/

NSDictionary *dict = @{
@"name" : @"Jack",
@"icon" : @"lufy.png",
@"age" : @20,
@"height" : @"1.55",
@"money" : @100.9,
@"sex" : @(SexFemale),
@"gay" : @"true"
//   @"gay" : @"1"
//   @"gay" : @"NO"
};

// JSON -&gt; User
User *user = [User objectWithKeyValues:dict];

NSLog(@"name=%@, icon=%@, age=%zd, height=%@, money=%@, sex=%d, gay=%d", user.name, user.icon, user.age, user.height, user.money, user.sex, user.gay);
// name=Jack, icon=lufy.png, age=20, height=1.550000, money=100.9, sex=1
</code></pre>

<h4 id="jsonstring---modeljson">JSONString -&gt; Model【JSON字符串转模型】</h4>

<pre><code>// 1.Define a JSONString
NSString *jsonString = @"{\"name\":\"Jack\", \"icon\":\"lufy.png\", \"age\":20}";

// 2.JSONString -&gt; User
User *user = [User objectWithKeyValues:jsonString];

// 3.Print user's properties
NSLog(@"name=%@, icon=%@, age=%d", user.name, user.icon, user.age);
// name=Jack, icon=lufy.png, age=20
</code></pre>

<h4 id="model-contains-model">Model contains model【模型中嵌套模型】</h4>

<pre><code>@interface Status : NSObject
@property (copy, nonatomic) NSString *text;
@property (strong, nonatomic) User *user;
@property (strong, nonatomic) Status *retweetedStatus;
@end

/***********************************************/

NSDictionary *dict = @{
@"text" : @"Agree!Nice weather!",
@"user" : @{
    @"name" : @"Jack",
    @"icon" : @"lufy.png"
},
@"retweetedStatus" : @{
    @"text" : @"Nice weather!",
    @"user" : @{
        @"name" : @"Rose",
        @"icon" : @"nami.png"
    }
}
};

// JSON -&gt; Status
Status *status = [Status objectWithKeyValues:dict];

NSString *text = status.text;
NSString *name = status.user.name;
NSString *icon = status.user.icon;
NSLog(@"text=%@, name=%@, icon=%@", text, name, icon);
// text=Agree!Nice weather!, name=Jack, icon=lufy.png

NSString *text2 = status.retweetedStatus.text;
NSString *name2 = status.retweetedStatus.user.name;
NSString *icon2 = status.retweetedStatus.user.icon;
NSLog(@"text2=%@, name2=%@, icon2=%@", text2, name2, icon2);
// text2=Nice weather!, name2=Rose, icon2=nami.png
</code></pre>

<h4 id="model-contains-model-array">Model contains model-array【模型中有个数组属性，数组里面又要装着其他模型】</h4>

<pre><code>@interface Ad : NSObject
@property (copy, nonatomic) NSString *image;
@property (copy, nonatomic) NSString *url;
@end

@interface StatusResult : NSObject
/** Contatins status model */
@property (strong, nonatomic) NSMutableArray *statuses;
/** Contatins ad model */
@property (strong, nonatomic) NSArray *ads;
@property (strong, nonatomic) NSNumber *totalNumber;
@end

/***********************************************/

// Tell MJExtension what type model will be contained in statuses and ads.
[StatusResult setupObjectClassInArray:^NSDictionary *{
return @{
           @"statuses" : @"Status",
           // @"statuses" : [Status class],
           @"ads" : @"Ad"
           // @"ads" : [Ad class]
       };
}];
// Equals: StatusResult.m implements +objectClassInArray method.

NSDictionary *dict = @{
@"statuses" : @[
                  @{
                      @"text" : @"Nice weather!",
                      @"user" : @{
                          @"name" : @"Rose",
                          @"icon" : @"nami.png"
                      }
                  },
                  @{
                      @"text" : @"Go camping tomorrow!",
                      @"user" : @{
                          @"name" : @"Jack",
                          @"icon" : @"lufy.png"
                      }
                  }
              ],
@"ads" : @[
             @{
                 @"image" : @"ad01.png",
                 @"url" : @"http://www.ad01.com"
             },
             @{
                 @"image" : @"ad02.png",
                 @"url" : @"http://www.ad02.com"
             }
         ],
@"totalNumber" : @"2014"
};

// JSON -&gt; StatusResult
StatusResult *result = [StatusResult objectWithKeyValues:dict];

NSLog(@"totalNumber=%@", result.totalNumber);
// totalNumber=2014

// Printing
for (Status *status in result.statuses) {
NSString *text = status.text;
NSString *name = status.user.name;
NSString *icon = status.user.icon;
NSLog(@"text=%@, name=%@, icon=%@", text, name, icon);
}
// text=Nice weather!, name=Rose, icon=nami.png
// text=Go camping tomorrow!, name=Jack, icon=lufy.png

// Printing
for (Ad *ad in result.ads) {
NSLog(@"image=%@, url=%@", ad.image, ad.url);
}
// image=ad01.png, url=http://www.ad01.com
// image=ad02.png, url=http://www.ad02.com
</code></pre>

<h4 id="model-name---json-key-mappingkey">Model name - JSON key mapping【模型中的属性名和字典中的key不相同(或者需要多级映射)】</h4>

<pre><code>@interface Bag : NSObject
@property (copy, nonatomic) NSString *name;
@property (assign, nonatomic) double price;
@end

@interface Student : NSObject
@property (copy, nonatomic) NSString *ID;
@property (copy, nonatomic) NSString *desc;
@property (copy, nonatomic) NSString *nowName;
@property (copy, nonatomic) NSString *oldName;
@property (copy, nonatomic) NSString *nameChangedTime;
@property (strong, nonatomic) Bag *bag;
@end

/***********************************************/

// How to map
[Student setupReplacedKeyFromPropertyName:^NSDictionary *{
return @{
           @"ID" : @"id",
           @"desc" : @"desciption",
           @"oldName" : @"name.oldName",
           @"nowName" : @"name.newName",
           @"nameChangedTime" : @"name.info[1].nameChangedTime",
           @"bag" : @"other.bag"
       };
}];
// Equals: Student.m implements +replacedKeyFromPropertyName method.

NSDictionary *dict = @{
@"id" : @"20",
@"desciption" : @"kids",
@"name" : @{
    @"newName" : @"lufy",
    @"oldName" : @"kitty",
    @"info" : @[
             @"test-data",
             @{
                         @"nameChangedTime" : @"2013-08"
                     }
              ]
},
@"other" : @{
    @"bag" : @{
        @"name" : @"a red bag",
        @"price" : @100.7
    }
}
};

// JSON -&gt; Student
Student *stu = [Student objectWithKeyValues:dict];

// Printing
NSLog(@"ID=%@, desc=%@, oldName=%@, nowName=%@, nameChangedTime=%@",
  stu.ID, stu.desc, stu.oldName, stu.nowName, stu.nameChangedTime);
// ID=20, desc=kids, oldName=kitty, nowName=lufy, nameChangedTime=2013-08
NSLog(@"bagName=%@, bagPrice=%f", stu.bag.name, stu.bag.price);
// bagName=a red bag, bagPrice=100.700000
</code></pre>

<h4 id="json-array---model-array">JSON array -&gt; model array【将一个字典数组转成模型数组】</h4>

<pre><code>NSArray *dictArray = @[
                     @{
                         @"name" : @"Jack",
                         @"icon" : @"lufy.png"
                     },
                     @{
                         @"name" : @"Rose",
                         @"icon" : @"nami.png"
                     }
                 ];

// JSON array -&gt; User array
NSArray *userArray = [User objectArrayWithKeyValuesArray:dictArray];

// Printing
for (User *user in userArray) {
NSLog(@"name=%@, icon=%@", user.name, user.icon);
}
// name=Jack, icon=lufy.png
// name=Rose, icon=nami.png
</code></pre>

<h4 id="model---json">Model -&gt; JSON【将一个模型转成字典】</h4>

<pre><code>// New model
User *user = [[User alloc] init];
user.name = @"Jack";
user.icon = @"lufy.png";

Status *status = [[Status alloc] init];
status.user = user;
status.text = @"Nice mood!";

// Status -&gt; JSON
NSDictionary *statusDict = status.keyValues;
NSLog(@"%@", statusDict);
/*
 	{
 		text = "Nice mood!";
 		user =     {
 		icon = "lufy.png";
 		name = Jack;
 		};
 	}
 	*/

// More complex situation
Student *stu = [[Student alloc] init];
stu.ID = @"123";
stu.oldName = @"rose";
stu.nowName = @"jack";
stu.desc = @"handsome";
stu.nameChangedTime = @"2018-09-08";

Bag *bag = [[Bag alloc] init];
bag.name = @"a red bag";
bag.price = 205;
stu.bag = bag;

NSDictionary *stuDict = stu.keyValues;
NSLog(@"%@", stuDict);
/*
{
ID = 123;
bag =     {
    name = "\U5c0f\U4e66\U5305";
    price = 205;
};
desc = handsome;
nameChangedTime = "2018-09-08";
nowName = jack;
oldName = rose;
}
 */
</code></pre>

<h4 id="model-array---json-array">Model array -&gt; JSON array【将一个模型数组转成字典数组】</h4>

<pre><code>// New model array
User *user1 = [[User alloc] init];
user1.name = @"Jack";
user1.icon = @"lufy.png";

User *user2 = [[User alloc] init];
user2.name = @"Rose";
user2.icon = @"nami.png";

NSArray *userArray = @[user1, user2];

// Model array -&gt; JSON array
NSArray *dictArray = [User keyValuesArrayWithObjectArray:userArray];
NSLog(@"%@", dictArray);
/*
 	(
 	{
 	icon = "lufy.png";
 name = Jack;
 },
 	{
 	icon = "nami.png";
 	name = Rose;
 	}
 )
 	*/
</code></pre>

<h4 id="core-data">Core Data</h4>

<pre><code>NSDictionary *dict = @{
                     @"name" : @"Jack",
                     @"icon" : @"lufy.png",
                     @"age" : @20,
                     @"height" : @1.55,
                     @"money" : @"100.9",
                     @"sex" : @(SexFemale),
                     @"gay" : @"true"
                 };

// This demo just provide simple steps
NSManagedObjectContext *context = nil;
User *user = [User objectWithKeyValues:dict context:context];

[context save:nil];
</code></pre>

<h4 id="coding">Coding</h4>

<pre><code>#import "MJExtension.h"

@implementation Bag
// NSCoding Implementation
MJCodingImplementation
@end

/***********************************************/

// what properties not to be coded
[Bag setupIgnoredCodingPropertyNames:^NSArray *{
return @[@"name"];
}];
// Equals: Bag.m implements +ignoredCodingPropertyNames method.

// Create model
Bag *bag = [[Bag alloc] init];
bag.name = @"Red bag";
bag.price = 200.8;

NSString *file = [NSHomeDirectory() stringByAppendingPathComponent:@"Desktop/	bag.data"];
// Encoding
[NSKeyedArchiver archiveRootObject:bag toFile:file];

// Decoding
Bag *decodedBag = [NSKeyedUnarchiver unarchiveObjectWithFile:file];
NSLog(@"name=%@, price=%f", decodedBag.name, decodedBag.price);
// name=(null), price=200.800000
</code></pre>

<h4 id="camel---underline">Camel -&gt; underline【统一转换属性名（比如驼峰转下划线）】</h4>

<pre><code>// Dog
#import "MJExtension.h"

@implementation Dog
+ (NSString *)replacedKeyFromPropertyName121:(NSString *)propertyName
{
// nickName -&gt; nick_name
return [propertyName underlineFromCamel];
}
@end

// NSDictionary
NSDictionary *dict = @{
                   @"nick_name" : @"旺财",
                   @"sale_price" : @"10.5",
                   @"run_speed" : @"100.9"
                   };
// NSDictionary -&gt; Dog
Dog *dog = [Dog objectWithKeyValues:dict];

// printing
NSLog(@"nickName=%@, scalePrice=%f runSpeed=%f", dog.nickName, dog.salePrice, dog.runSpeed);
</code></pre>

<h4 id="nsstring---nsdate-nil---nsdatenil">NSString -&gt; NSDate, nil -&gt; @”“【过滤字典的值（比如字符串日期处理为NSDate、字符串nil处理为@”“）】</h4>

<pre><code>// Book
#import "MJExtension.h"

@implementation Book
- (id)newValueFromOldValue:(id)oldValue property:(MJProperty *)property
{
if ([property.name isEqualToString:@"publisher"]) {
    if (oldValue == nil) return @"";
} else if (property.type.typeClass == [NSDate class]) {
    NSDateFormatter *fmt = [[NSDateFormatter alloc] init];
    fmt.dateFormat = @"yyyy-MM-dd";
    return [fmt dateFromString:oldValue];
}

return oldValue;
}
@end

// NSDictionary
NSDictionary *dict = @{
                   @"name" : @"5分钟突破iOS开发",
                   @"publishedTime" : @"2011-09-10"
                   };
// NSDictionary -&gt; Book
Book *book = [Book objectWithKeyValues:dict];

// printing
NSLog(@"name=%@, publisher=%@, publishedTime=%@", book.name, book.publisher, book.publishedTime);
</code></pre>

<h4 id="more-use-cases">More use cases【更多用法】</h4>

<ul>
  <li>Please reference to NSObject+MJKeyValue.h and NSObject+MJCoding.h</li>
  <li><a href="https://github.com/CoderMJLee/MJExtension" title="url">github地址</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fresco介绍]]></title>
    <link href="http://helloyokoy.github.io/blog/frescojie-shao/"/>
    <updated>2015-08-09T17:09:42+08:00</updated>
    <id>http://helloyokoy.github.io/blog/frescojie-shao</id>
    <content type="html"><![CDATA[<p><img src="http://frescolib.org/static/fresco-logo.png" alt="icon" title="icon" /></p>

<h3 id="fresco">关于 Fresco</h3>
<p>Fresco 是一个强大的图片加载组件。</p>

<p>Fresco 中设计有一个叫做 image pipeline 的模块。它负责从网络，从本地文件系统，本地资源加载图片。为了最大限度节省空间和CPU时间，它含有3级缓存设计（2级内存，1级文件）。</p>

<p>Fresco 中设计有一个叫做 Drawees 模块，方便地显示loading图，当图片不再显示在屏幕上时，及时地释放内存和空间占用。</p>

<p>Fresco 支持 Android2.3(API level 9) 及其以上系统。</p>

<!--more-->

<h3 id="section">特性</h3>

<h4 id="section-1">内存管理</h4>

<p>解压后的图片，即Android中的Bitmap，占用大量的内存。大的内存占用势必引发更加频繁的GC。在5.0以下，GC将会显著地引发界面卡顿。</p>

<p>在5.0以下系统，Fresco将图片放到一个特别的内存区域。当然，在图片不显示的时候，占用的内存会自动被释放。这会使得APP更加流畅，减少因图片内存占用而引发的OOM。</p>

<p>Fresco 在低端机器上表现一样出色，你再也不用因图片内存占用而思前想后。</p>

<h4 id="section-2">图片的渐进式呈现</h4>
<p>渐进式的JPEG图片格式已经流行数年了，渐进式图片格式先呈现大致的图片轮廓，然后随着图片下载的继续，呈现逐渐清晰的图片，这对于移动设备，尤其是慢网络有极大的利好，可带来更好的用户体验。</p>

<p>Android 本身的图片库不支持此格式，但是Fresco支持。使用时，和往常一样，仅仅需要提供一个图片的URI即可，剩下的事情，Fresco会处理。</p>

<h4 id="gifwebp">Gif图和WebP格式</h4>
<p>是的，支持加载Gif图，支持WebP格式。</p>

<h4 id="section-3">图像的呈现</h4>
<p>Fresco 的 Drawees 设计，带来一些有用的特性：</p>

<ul>
  <li>自定义居中焦点(对人脸等图片显示非常有帮助)</li>
  <li>圆角图，当然圆圈也行。</li>
  <li>下载失败之后，点击重现下载</li>
  <li>自定义占位图，自定义overlay, 或者进度条</li>
  <li>指定用户按压时的overlay</li>
</ul>

<h4 id="section-4">图像的加载</h4>
<p>Fresco 的 image pipeline 设计，允许用户在多方面控制图片的加载：</p>

<ul>
  <li>为同一个图片指定不同的远程路径，或者使用已经存在本地缓存中的图片</li>
  <li>先显示一个低解析度的图片，等高清图下载完之后再显示高清图</li>
  <li>加载完成回调通知</li>
  <li>对于本地图，如有EXIF缩略图，在大图加载完成之前，可先显示缩略图</li>
  <li>缩放或者旋转图片</li>
  <li>处理已下载的图片</li>
  <li>WebP 支持</li>
</ul>

<h3 id="section-5">了解更多</h3>
<ul>
  <li>相关博客: <a href="https://code.facebook.com/posts/366199913563917" title="Title">Fresco的发布</a></li>
  <li><a href="http://www.fresco-cn.org/docs/download-fresco.html" title="Title">下载</a>Fresco</li>
  <li><a href="http://www.fresco-cn.org/docs/index.html" title="Title">文档</a></li>
  <li><a href="https://github.com/facebook/fresco" title="Title">GitHub</a>的源码</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ios依赖注入框架objection]]></title>
    <link href="http://helloyokoy.github.io/blog/iosyi-lai-zhu-ru-kuang-jia-objection/"/>
    <updated>2015-07-10T21:52:44+08:00</updated>
    <id>http://helloyokoy.github.io/blog/iosyi-lai-zhu-ru-kuang-jia-objection</id>
    <content type="html"><![CDATA[<blockquote>
  <p>objection 是一个轻量级的依赖注入框架，受Guice的启发，Google Wallet 也是使用的该项目。「依赖注入」是面向对象编程的一种设计模式，用来减少代码之间的耦合度。通常基于接口来实现，也就是说不需要new一个对象，而是通过相关的控制器来获取对象。2013年最火的PHP框架 laravel 就是其中的典型。</p>
</blockquote>

<p>假设有以下场景：ViewControllerA.view里有一个button，点击之后push一个ViewControllerB，最简单的写法类似这样：</p>

<pre><code>- (void)viewDidLoad
{
	[super viewDidLoad];
	UIButton *button = [UIButton buttonWithType:UIButtonTypeSystem];
	button.frame = CGRectMake(100, 100, 100, 30);
	[self.view addSubview:button];
}
 
- (void)buttonTapped
{
	ViewControllerB *vc = [[ViewControllerB alloc] init];
	[self.navigationController pushViewController:vc animated:YES];
}
</code></pre>

<p>这样写的一个问题是，ViewControllerA需要import ViewControllerB，也就是对ViewControllerB产生了依赖。依赖的东西越多，维护起来就越麻烦，也容易出现循环依赖的问题，而objection正好可以处理这些问题。</p>

<!--more-->

<p>实现方法是：先定义一个协议(protocol)，然后通过objection来注册这个协议对应的class，需要的时候，可以获取该协议对应的object。对于使用方无需关心到底使用的是哪个Class，反正该有的方法、属性都有了(在协议中指定)。这样就去除了对某个特定Class的依赖。也就是通常所说的「面向接口编程」。</p>

<pre><code>JSObjectionInjector *injector = [JSObjection defaultInjector]; // [1]
UIViewController &lt;ViewControllerAProtocol&gt; *vc = [injector getObject:@protocol(ViewControllerAProtocol)]; // [2]
vc.backgroundColor = [UIColor lightGrayColor]; // [3]
UINavigationController *nc = [[UINavigationController alloc] initWithRootViewController:vc];
self.window.rootViewController = nc;
</code></pre>

<ol>
  <li>获取默认的injector，这个injector已经注册过ViewControllerAProtocol了。</li>
  <li>获取ViewControllerAProtocol对应的Object。</li>
  <li>拿到VC后，设置它的某些属性，比如这里的backgroundColor，因为在ViewControllerAProtocol里有定义这个属性，所以不会有warning。</li>
</ol>

<p>可以看到这里没有引用ViewControllerA。再来看看这个ViewControllerAProtocol是如何注册到injector中的，这里涉及到了Module，对Protocol的注册都是在Module中完成的。Module只要继承JSObjectionModule这个Class即可。</p>

<pre><code>@interface ViewControllerAModule : JSObjectionModule
@end
 
@implementation ViewControllerAModule
- (void)configure
{
	[self bindClass:[ViewControllerA class] toProtocol:@protocol(ViewControllerAProtocol)];
}
@end
</code></pre>

<p>绑定操作是在configure方法里进行的，这个方法在被添加到injector里时会被自动触发。</p>

<pre><code>JSObjectionInjector *injector = [JSObjection defaultInjector]; // [1]
injector = injector ? : [JSObjection createInjector]; // [2]
injector = [injector withModule:[[ViewControllerAModule alloc] init]]; // [3]
[JSObjection setDefaultInjector:injector]; // [4]
</code></pre>

<ol>
  <li>获取默认的 injector</li>
  <li>如果默认的 injector 不存在，就新建一个</li>
  <li>往这个 injector 里注册我们的 Module</li>
  <li>设置该 injector 为默认的 injector</li>
</ol>

<p>这段代码可以直接放到 + (void)load里执行，这样就可以避免在AppDelegate里import各种Module。</p>

<p>因为我们无法直接获得对应的Class，所以必须要在协议里定义好对外暴露的方法和属性，然后该Class也要实现该协议。</p>

<pre><code>@protocol ViewControllerAProtocol &lt;NSObject&gt;
@property (nonatomic) NSUInteger currentIndex;
@property (nonatomic) UIColor *backgroundColor;
@end
 
@interface ViewControllerA : UIViewController &lt;ViewControllerAProtocol&gt;
@end
</code></pre>

<p>通过objection实现依赖注入后，就能更好地实现SRP(Single Responsibility Principle)，代码更简洁，心情更舒畅，生活更美好。</p>

<p>github地址: <a href="https://github.com/atomicobject/objection" title="url">https://github.com/atomicobject/objection</a></p>

<p>demo地址: <a href="https://github.com/helloyokoy/bizhi" title="url">https://github.com/helloyokoy/bizhi</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby招聘]]></title>
    <link href="http://helloyokoy.github.io/blog/rubyzhao-pin/"/>
    <updated>2015-07-09T16:24:29+08:00</updated>
    <id>http://helloyokoy.github.io/blog/rubyzhao-pin</id>
    <content type="html"><![CDATA[<p><img src="https://ruby-china-files.b0.upaiyun.com/photo/2014/a490df4656f969d72b2f560c411d9b64.jpg" alt="alt text" title="logo" /></p>

<p><img src="https://ruby-china-files.b0.upaiyun.com/photo/2014/f5046f117c0bc0081ee8b7431f150cea.jpg" alt="alt text" title="Title" /></p>

<!--more-->

<p><img src="https://ruby-china-files.b0.upaiyun.com/photo/2014/9d7da2a7d66050e201486c8168f269a5.jpg" alt="alt text" title="Title" /></p>

<p><img src="https://ruby-china-files.b0.upaiyun.com/photo/2014/ac3ec0fc602bff211e45a87e87d02a13.jpg" alt="alt text" title="Title" /></p>

<p><img src="https://ruby-china-files.b0.upaiyun.com/photo/2014/68f11d523efd63d722aa71cd109e3308.jpg" alt="alt text" title="Title" /></p>

<p><img src="https://ruby-china-files.b0.upaiyun.com/photo/2014/cf83aeab19c568f2448e80ba517d4891.jpg" alt="alt text" title="Title" /></p>

<p><img src="https://ruby-china-files.b0.upaiyun.com/photo/2014/30831a38a59aaabd2618494454670792.jpg" alt="alt text" title="Title" /></p>

<p>有意者请发送简历至： <a href="&#109;&#097;&#105;&#108;&#116;&#111;:&#109;&#105;&#110;&#046;&#103;&#111;&#110;&#103;&#064;&#100;&#106;&#105;&#046;&#099;&#111;&#109;">&#109;&#105;&#110;&#046;&#103;&#111;&#110;&#103;&#064;&#100;&#106;&#105;&#046;&#099;&#111;&#109;</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IOS多线程]]></title>
    <link href="http://helloyokoy.github.io/blog/iosduo-xian-cheng/"/>
    <updated>2015-06-18T22:25:55+08:00</updated>
    <id>http://helloyokoy.github.io/blog/iosduo-xian-cheng</id>
    <content type="html"><![CDATA[<blockquote>
  <p>在这篇文章中，我将为你整理一下 iOS 开发中几种多线程方案，以及其使用方法和注意事项。当然也会给出几种多线程的案例，在实际使用中感受它们的区别。还有一点需要说明的是，这篇文章将会使用 Swift 和 Objective-c 两种语言讲解，双语幼儿园。OK，let’t begin!</p>
</blockquote>

<h2 id="section">概述</h2>
<hr />
<p>这篇文章中，我不会说多线程是什么、线程和进程的区别、多线程有什么用，当然我也不会说什么是串行、什么是并行等问题，这些我们应该都知道的。</p>

<p>在 iOS 中其实目前有 4 套多线程方案，他们分别是：</p>

<pre><code>Pthreads
NSThread
GCD
NSOperation &amp; NSOperationQueue
</code></pre>

<p>所以接下来，我会一一讲解这些方案的使用方法和一些案例。在将这些内容的时候，我也会顺带说一些多线程周边产品。比如： 线程同步、 延时执行、 单例模式 等等。</p>

<!--more-->

<h3 id="pthreads">Pthreads</h3>

<p>其实这个方案不用说的，只是拿来充个数，为了让大家了解一下就好了。百度百科里是这么说的：</p>

<p>POSIX线程（POSIX threads），简称Pthreads，是线程的POSIX标准。该标准定义了创建和操纵线程的一整套API。在类Unix操作系统（Unix、Linux、Mac OS X等）中，都使用Pthreads作为操作系统的线程。</p>

<p>简单地说，这是一套在很多操作系统上都通用的多线程API，所以移植性很强（然并卵），当然在 iOS 中也是可以的。不过这是基于 c语言 的框架，使用起来这酸爽！感受一下：</p>

<p>OBJECTIVE-C</p>

<p>当然第一步要包含头文件</p>

<pre><code>#import
</code></pre>

<p>然后创建线程，并执行任务</p>

<pre><code>- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event {
pthread_t thread;
//创建一个线程并自动执行
pthread_create(&amp;thread, NULL, start, NULL);
}
void *start(void *data) {
NSLog(@"%@", [NSThread currentThread]);
return NULL;
} 打印输出：


2015-07-27 23:57:21.689 testThread[10616:2644653] {number = 2, name = (null)} 看代码就会发现他需要 c语言函数，这是比较蛋疼的，更蛋疼的是你需要手动处理线程的各个状态的转换即管理生命周期，比如，这段代码虽然创建了一个线程，但并没有销毁。
</code></pre>

<p>SWIFT</p>

<p>很遗憾，在我目前的 swift1.2 中无法执行这套方法，原因是这个函数需要传入一个函数指针 CFunctionPointer类型，但是目前 swift 无法将方法转换成此类型。听说 swift 2.0 引入一个新特性 @convention(c), 可以完成 Swift 方法转换成 c 语言指针的。在这里可以看到</p>

<p>那么，Pthreads 方案的多线程我就介绍这么多，毕竟做 iOS 开发几乎不可能用到。但是如果你感兴趣的话，或者说想要自己实现一套多线程方案，从底层开始定制，那么可以去搜一下相关资料。</p>

<h3 id="nsthread">NSThread</h3>

<p>这套方案是经过苹果封装后的，并且完全面向对象的。所以你可以直接操控线程对象，非常直观和方便。但是，它的生命周期还是需要我们手动管理，所以这套方案也是偶尔用用，比如 [NSThread currentThread]，它可以获取当前线程类，你就可以知道当前线程的各种属性，用于调试十分方便。下面来看看它的一些用法。</p>

<h5 id="section-1">创建并启动</h5>

<p>先创建线程类，再启动
OBJECTIVE-C</p>

  	// 创建
  	NSThread *thread = [[NSThread alloc] initWithTarget:self 	selector:@selector(run:) object:nil];
  	// 启动
  	[thread start];

<p>SWIFT</p>

  	//创建
  	let thread = NSThread(target: self, selector: “run:”, object: nil)
  	//启动
  	thread.start()

<h5 id="section-2">创建并自动启动</h5>

<p>OBJECTIVE-C</p>

  	[NSThread detachNewThreadSelector:@selector(run:) toTarget:self withObject:nil];
<p>SWIFT</p>

  	NSThread.detachNewThreadSelector(“run:”, toTarget: self, withObject: nil)
<p>使用 NSObject 的方法创建并自动启动</p>

<p>OBJECTIVE-C</p>

  	[self performSelectorInBackground:@selector(run:) withObject:nil];
<p>SWIFT</p>

<p>很遗憾 too! 苹果认为 performSelector: 不安全，所以在 Swift 去掉了这个方法。</p>

<pre><code>Note: The performSelector: method and related selector-invoking methods are not imported in Swift because they are inherently unsafe.
</code></pre>

<h5 id="section-3">其他方法</h5>

<p>除了创建启动外，NSThread 还以很多方法，下面我列举一些常见的方法，当然我列举的并不完整，更多方法大家可以去类的定义里去看。</p>

<p>OBJECTIVE-C</p>

<pre><code>//取消线程
- (void)cancel;
//启动线程
- (void)start;
//判断某个线程的状态的属性
@property (readonly, getter=isExecuting) BOOL executing;
@property (readonly, getter=isFinished) BOOL finished;
@property (readonly, getter=isCancelled) BOOL cancelled;
//设置和获取线程名字
-(void)setName:(NSString *)n;
-(NSString *)name;
//获取当前线程信息
+ (NSThread *)currentThread;
//获取主线程信息
+ (NSThread *)mainThread;
//使当前线程暂停一段时间，或者暂停到某个时刻
+ (void)sleepForTimeInterval:(NSTimeInterval)time;
+ (void)sleepUntilDate:(NSDate *)date; SWIFT
</code></pre>

<p>Swift的方法名字和OC的方法名都一样，我就不浪费空间列举出来了。</p>

<p>其实，NSThread 用起来也挺简单的，因为它就那几种方法。同时，我们也只有在一些非常简单的场景才会用 NSThread, 毕竟它还不够智能，不能优雅地处理多线程中的其他高级概念。所以接下来要说的内容才是重点。</p>

<h3 id="gcd">GCD</h3>

<p>Grand Central Dispatch，听名字就霸气。它是苹果为多核的并行运算提出的解决方案，所以会自动合理地利用更多的CPU内核（比如双核、四核），最重要的是它会自动管理线程的生命周期（创建线程、调度任务、销毁线程），完全不需要我们管理，我们只需要告诉干什么就行。同时它使用的也是 c语言，不过由于使用了 Block（Swift里叫做闭包），使得使用起来更加方便，而且灵活。所以基本上大家都使用 GCD 这套方案，老少咸宜，实在是居家旅行、杀人灭口，必备良药。不好意思，有点中二，咱们继续。</p>

<h5 id="section-4">任务和队列</h5>

<p>在 GCD 中，加入了两个非常重要的概念： 任务 和 队列。</p>

<p>任务：即操作，你想要干什么，说白了就是一段代码，在 GCD 中就是一个 Block，所以添加任务十分方便。任务有两种执行方式： 同步执行 和 异步执行，他们之间的区别是 是否会创建新的线程。
同步执行：只要是同步执行的任务，都会在当前线程执行，不会另开线程。</p>

<p>异步执行：只要是异步执行的任务，都会另开线程，在别的线程执行。</p>

<p>更新：</p>

<p>这里说的并不准确，同步（sync） 和 异步（async） 的主要区别在于会不会阻塞当前线程，直到 Block 中的任务执行完毕！</p>

<p>如果是 同步（sync） 操作，它会阻塞当前线程并等待 Block 中的任务执行完毕，然后当前线程才会继续往下运行。</p>

<p>如果是 异步（async）操作，当前线程会直接往下执行，它不会阻塞当前线程。</p>

<p>队列：用于存放任务。一共有两种队列， 串行队列 和 并行队列。
串行队列 中的任务会根据队列的定义 FIFO 的执行，一个接一个的先进先出的进行执行。</p>

<p>更新：放到串行队列的任务，GCD 会 FIFO（先进先出） 地取出来一个，执行一个，然后取下一个，这样一个一个的执行。</p>

<p>并行队列 中的任务根据同步或异步有不同的执行方式。虽然很绕，但请看下表：</p>

<p>更新：放到串行队列的任务，GCD 也会 FIFO的取出来，但不同的是，它取出来一个就会放到别的线程，然后再取出来一个又放到另一个的线程。这样由于取的动作很快，忽略不计，看起来，所有的任务都是一起执行的。不过需要注意，GCD 会根据系统资源控制并行的数量，所以如果任务很多，它并不会让所有任务同时执行。</p>

<h5 id="section-5">创建队列</h5>

<p>主队列：这是一个特殊的 串行队列。什么是主队列，大家都知道吧，它用于刷新 UI，任何需要刷新 UI 的工作都要在主队列执行，所以一般耗时的任务都要放到别的线程执行。</p>

<p>//OBJECTIVE-C
  dispatch_queue_t queue = ispatch_get_main_queue();
  //SWIFT
  let queue = ispatch_get_main_queue()
自己创建的队列：凡是自己创建的队列都是 串行队列。其中第一个参数是标识符，用于 DEBUG 的时候标识唯一的队列，可以为空。大家可以看xcode的文档查看参数意义。
更新：自己可以创建 串行队列, 也可以创建 并行队列。看下面的代码（代码已更新），它有两个参数，第一个上面已经说了，第二个才是最重要的。
第二个参数用来表示创建的队列是串行的还是并行的，传入 DISPATCH_QUEUE_SERIAL 或 NULL 表示创建串行队列。传入 DISPATCH_QUEUE_CONCURRENT 表示创建并行队列。</p>

   	//OBJECTIVE-C
  	dispatch_queue_t queue = dispatch_queue_create(“tk.bourne.testQueue”, NULL);
  	//SWIFT
  	let queue = dispatch_queue_create(“tk.bourne.testQueue”, nil);
<p>全局并行队列：这应该是唯一一个并行队列，只要是并行任务一般都加入到这个队列。</p>

  	//OBJECTIVE-C
  	dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
  	//SWIFT
  	let queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0)

<h5 id="section-6">创建任务</h5>

<p>同步任务：不会另开线程 (SYNC)</p>

<p>OBJECTIVE-C</p>

  	dispatch_sync(, ^{
<pre><code>  //code here
  NSLog(@"%@", [NSThread currentThread]);
  	}); SWIFT
</code></pre>

  	dispatch_sync(, { () -&gt; Void in
<pre><code>  //code here
  println(NSThread.currentThread())
  	}) 异步任务：会另开线程 (ASYNC)
</code></pre>

<p>OBJECTIVE-C</p>

  	dispatch_async(, ^{
<pre><code>  //code here
  NSLog(@"%@", [NSThread currentThread]);
  	}); SWIFT
</code></pre>

  	dispatch_async(, { () -&gt; Void in
<pre><code>  //code here
  println(NSThread.currentThread())
  	})
</code></pre>

<p>更新：</p>

<p>为了更好的理解同步和异步，和各种队列的使用，下面看两个示例：</p>

<p>示例一：</p>

<p>以下代码在主线程调用，结果是什么？</p>

<pre><code>NSLog("之前 - %@", NSThread.currentThread())
dispatch_sync(dispatch_get_main_queue(), { () -&gt; Void in 
    NSLog("sync - %@", NSThread.currentThread())
})
NSLog("之后 - %@", NSThread.currentThread()) 答案：
</code></pre>

<p>只会打印第一句：之前 - {number = 1, name = main} ，然后主线程就卡死了，你可以在界面上放一个按钮，你就会发现点不了了。</p>

<p>解释：</p>

<p>同步任务会阻塞当前线程，然后把 Block 中的任务放到指定的队列中执行，只有等到 Block 中的任务完成后才会让当前线程继续往下运行。</p>

<p>那么这里的步骤就是：打印完第一句后，dispatch_sync 立即阻塞当前的主线程，然后把 Block 中的任务放到 main_queue 中，可以 main_queue 中的任务会被取出来放到主线程中执行，但主线程这个时候已经被阻塞了，所以 Block 中的任务就不能完成，它不完成，dispatch_sync 就会一直阻塞主线程，这就是死锁现象。导致主线程一直卡死。</p>

<p>示例二：</p>

<p>以下代码会产生什么结果？</p>

<pre><code>let queue = dispatch_queue_create("myQueue", DISPATCH_QUEUE_SERIAL)
   		NSLog("之前 - %@", NSThread.currentThread())
	dispatch_async(queue, { () -&gt; Void in
    NSLog("sync之前 - %@", NSThread.currentThread())
    dispatch_sync(queue, { () -&gt; Void in
         NSLog("sync - %@", NSThread.currentThread())
    })
    NSLog("sync之后 - %@", NSThread.currentThread())
   		})
  	NSLog("之后 - %@", NSThread.currentThread()) 答案：

2015-07-30 02:06:51.058 test[33329:8793087] 之前 - {number = 1, name = main}

2015-07-30 02:06:51.059 test[33329:8793356] sync之前 - {number = 2, name = (null)}

2015-07-30 02:06:51.059 test[33329:8793087] 之后 - {number = 1, name = main}
</code></pre>

<p>很明显 sync - %@ 和 sync之后 - %@ 没有被打印出来！这是为什么呢？我们再来分析一下：</p>

<p>分析：</p>

<p>我们按执行顺序一步步来哦：</p>

<p>使用 DISPATCH_QUEUE_SERIAL 这个参数，创建了一个 串行队列。
打印出 之前 - %@ 这句。
dispatch_async 异步执行，所以当前线程不会被阻塞，于是有了两条线程，一条当前线程继续往下打印出 之后 - %@这句, 另一台执行 Block 中的内容打印 sync之前 - %@ 这句。因为这两条是并行的，所以打印的先后顺序无所谓。</p>

<p>注意，高潮来了。现在的情况和上一个例子一样了。dispatch_sync同步执行，于是它所在的线程会被阻塞，一直等到 sync 里的任务执行完才会继续往下。于是 sync 就高兴的把自己 Block 中的任务放到 queue 中，可谁想 queue 是一个串行队列，一次执行一个任务，所以 sync 的 Block 必须等到前一个任务执行完毕，可万万没想到的是 queue 正在执行的任务就是被 sync 阻塞了的那个。于是又发生了死锁。所以 sync 所在的线程被卡死了。剩下的两句代码自然不会打印。
队列组</p>

<p>队列组可以将很多队列添加到一个组里，这样做的好处是，当这个组里所有的任务都执行完了，队列组会通过一个方法通知我们。下面是使用方法，这是一个很实用的功能。</p>

<p>OBJECTIVE-C</p>

<pre><code>//1.创建队列组
dispatch_group_t group = dispatch_group_create();
//2.创建队列
dispatch_queue_t queue = 	dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
//3.多次使用队列组的方法执行任务, 只有异步方法
//3.1.执行3次循环
dispatch_group_async(group, queue, ^{
for (NSInteger i = 0; i &lt; 3; i++) {
    NSLog(@"group-01 - %@", [NSThread currentThread]);
}
});
//3.2.主队列执行8次循环
dispatch_group_async(group, dispatch_get_main_queue(), ^{
for (NSInteger i = 0; i &lt; 8; i++) {
    NSLog(@"group-02 - %@", [NSThread currentThread]);
}
});
//3.3.执行5次循环
dispatch_group_async(group, queue, ^{
for (NSInteger i = 0; i &lt; 5; i++) {
    NSLog(@"group-03 - %@", [NSThread currentThread]);
}
});
//4.都完成后会自动通知
dispatch_group_notify(group, dispatch_get_main_queue(), ^{
NSLog(@"完成 - %@", [NSThread currentThread]);
}); SWIFT


//1.创建队列组
let group = dispatch_group_create()
//2.创建队列
let queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0)
//3.多次使用队列组的方法执行任务, 只有异步方法
//3.1.执行3次循环
dispatch_group_async(group, queue) { () -&gt; Void in
for _ in 0.. Void in
for _ in 0.. Void in
for _ in 0.. Void in
NSLog("完成 - %@", NSThread.currentThread())
} 打印结果


2015-07-28 03:40:34.277 test[12540:3319271] group-03 - {number = 3, name = (null)}
2015-07-28 03:40:34.277 test[12540:3319146] group-02 - {number = 1, name = main}
2015-07-28 03:40:34.277 test[12540:3319146] group-02 - {number = 1, name = main}
2015-07-28 03:40:34.277 test[12540:3319271] group-03 - {number = 3, name = (null)}
2015-07-28 03:40:34.278 test[12540:3319146] group-02 - {number = 1, name = main}
2015-07-28 03:40:34.278 test[12540:3319271] group-03 - {number = 3, name = (null)}
2015-07-28 03:40:34.278 test[12540:3319271] group-03 - {number = 3, name = (null)}
2015-07-28 03:40:34.278 test[12540:3319146] group-02 - {number = 1, name = main}
2015-07-28 03:40:34.277 test[12540:3319273] group-01 - {number = 2, name = (null)}
2015-07-28 03:40:34.278 test[12540:3319271] group-03 - {number = 3, name = (null)}
2015-07-28 03:40:34.278 test[12540:3319146] group-02 - {number = 1, name = main}
2015-07-28 03:40:34.278 test[12540:3319273] group-01 - {number = 2, name = (null)}
2015-07-28 03:40:34.278 test[12540:3319146] group-02 - {number = 1, name = main}
2015-07-28 03:40:34.278 test[12540:3319273] group-01 - {number = 2, name = (null)}
2015-07-28 03:40:34.279 test[12540:3319146] group-02 - {number = 1, name = main}
2015-07-28 03:40:34.279 test[12540:3319146] group-02 - {number = 1, name = main}
2015-07-28 03:40:34.279 test[12540:3319146] 完成 - {number = 1, name = main} 这些就是 GCD 的基本功能，但是它的能力远不止这些，等讲完 NSOperation 后，我们再来看看它的一些其他方面用途。而且，只要你想象力够丰富，你可以组合出更好的用法。
</code></pre>

<p>更新：关于GCD，还有两个需要说的：</p>

<pre><code>func dispatch_barrier_async(_ queue: dispatch_queue_t, _ block: dispatch_block_t):
</code></pre>

<p>这个方法重点是你传入的 queue，当你传入的 queue 是通过 DISPATCH_QUEUE_CONCURRENT 参数自己创建的 queue 时，这个方法会阻塞这个 queue（注意是阻塞 queue ，而不是阻塞当前线程），一直等到这个 queue 中排在它前面的任务都执行完成后才会开始执行自己，自己执行完毕后，再会取消阻塞，使这个 queue 中排在它后面的任务继续执行。</p>

<p>如果你传入的是其他的 queue, 那么它就和 dispatch_async 一样了。</p>

<pre><code>func dispatch_barrier_sync(_ queue: dispatch_queue_t, _ block: dispatch_block_t):
</code></pre>

<p>这个方法的使用和上一个一样，传入 自定义的并发队列（DISPATCH_QUEUE_CONCURRENT），它和上一个方法一样的阻塞 queue，不同的是 这个方法还会 阻塞当前线程。</p>

<p>如果你传入的是其他的 queue, 那么它就和 dispatch_sync 一样了。</p>

<h3 id="nsoperationnsoperationqueue">NSOperation和NSOperationQueue</h3>

<p>NSOperation 是苹果公司对 GCD 的封装，完全面向对象，所以使用起来更好理解。 大家可以看到 NSOperation 和 NSOperationQueue 分别对应 GCD 的 任务 和 队列 。操作步骤也很好理解：</p>

<p>将要执行的任务封装到一个 NSOperation 对象中。
将此任务添加到一个 NSOperationQueue 对象中。
然后系统就会自动在执行任务。至于同步还是异步、串行还是并行请继续往下看：</p>

<h5 id="section-7">添加任务</h5>

<p>值得说明的是，NSOperation 只是一个抽象类，所以不能封装任务。但它有 2 个子类用于封装任务。分别是：NSInvocationOperation 和 NSBlockOperation 。创建一个 Operation 后，需要调用 start 方法来启动任务，它会 默认在当前队列同步执行。当然你也可以在中途取消一个任务，只需要调用其 cancel 方法即可。</p>

<p>NSInvocationOperation : 需要传入一个方法名。</p>

<p>OBJECTIVE-C</p>

  	//1.创建NSInvocationOperation对象
  	NSInvocationOperation *operation = [[NSInvocationOperation alloc] 	initWithTarget:self selector:@selector(run) object:nil];
<p>//2.开始执行
  [operation start];
SWIFT</p>

<p>在 Swift 构建的和谐社会里，是容不下 NSInvocationOperation 这种不是类型安全的败类的。苹果如是说。这里有相关解释</p>

<p>NSBlockOperation
OBJECTIVE-C</p>

  	//1.创建NSBlockOperation对象
  	NSBlockOperation *operation = [NSBlockOperation blockOperationWithBlock:^{
<pre><code>  NSLog(@"%@", [NSThread currentThread]);
  	}];
  	//2.开始任务
  	[operation start]; SWIFT
</code></pre>

  	//1.创建NSBlockOperation对象
  	let operation = NSBlockOperation { () -&gt; Void in
<pre><code>  println(NSThread.currentThread())
  	}
  	//2.开始任务
  	operation.start() 之前说过这样的任务，默认会在当前线程执行。但是 NSBlockOperation 还有一个方法：addExecutionBlock: ，通过这个方法可以给 Operation 添加多个执行 Block。这样 Operation 中的任务 会并发执行，它会 在主线程和其它的多个线程 执行这些任务，注意下面的打印结果：
</code></pre>

<p>OBJECTIVE-C</p>

<pre><code>  //1.创建NSBlockOperation对象
  NSBlockOperation *operation = [NSBlockOperation blockOperationWithBlock:^{
      NSLog(@"%@", [NSThread currentThread]);
  }];
  //添加多个Block
  for (NSInteger i = 0; i &lt; 5; i++) {
      [operation addExecutionBlock:^{
          NSLog(@"第%ld次：%@", i, [NSThread currentThread]);
      }];
  }
  //2.开始任务
  [operation start]; SWIFT


    //1.创建NSBlockOperation对象
    let operation = NSBlockOperation { () -&gt; Void in
        NSLog("%@", NSThread.currentThread())
    }
    //2.添加多个Block
    for i in 0.. Void in
            NSLog("第%ld次 - %@", i, NSThread.currentThread())
        }
    }
    //2.开始任务
    operation.start() 打印输出

2015-07-28 17:50:16.585 test[17527:4095467] 第2次 -{number = 1, name = main}
2015-07-28 17:50:16.585 test[17527:4095666] 第1次 -{number = 4, name = (null)}
2015-07-28 17:50:16.585 test[17527:4095665]{number = 3, name = (null)}
2015-07-28 17:50:16.585 test[17527:4095662] 第0次 -{number = 2, name = (null)}
2015-07-28 17:50:16.586 test[17527:4095666] 第3次 -{number = 4, name = (null)}
2015-07-28 17:50:16.586 test[17527:4095467] 第4次 -{number = 1, name = main} NOTE：addExecutionBlock 方法必须在 start() 方法之前执行，否则就会报错：

‘*** -[NSBlockOperation addExecutionBlock:]: blocks cannot be added after the operation has started executing or finished'
</code></pre>

<p>NOTE：大家可能发现了一个问题，为什么我在 Swift 里打印输出使用 NSLog() 而不是 println() 呢？原因是使用 print() / println() 输出的话，它会简单地使用 流（stream） 的概念，学过 C++ 的都知道。它会把需要输出的每个字符一个一个的输出到控制台。普通使用并没有问题，可是当多线程同步输出的时候问题就来了，由于很多 println() 同时打印，就会导致控制台上的字符混乱的堆在一起，而NSLog() 就没有这个问题。到底是什么样子的呢？你可以把上面 NSLog() 改为 println() ，然后一试便知。</p>

<h5 id="operation">自定义Operation</h5>

<p>除了上面的两种 Operation 以外，我们还可以自定义 Operation。自定义 Operation 需要继承 NSOperation 类，并实现其 main() 方法，因为在调用 start() 方法的时候，内部会调用 main() 方法完成相关逻辑。所以如果以上的两个类无法满足你的欲望的时候，你就需要自定义了。你想要实现什么功能都可以写在里面。除此之外，你还需要实现 cancel() 在内的各种方法。所以这个功能提供给高级玩家，我在这里就不说了，等我需要用到时在研究它，到时候可能会再做更新。</p>

<h5 id="section-8">创建队列</h5>

<p>看过上面的内容就知道，我们可以调用一个 NSOperation 对象的 start() 方法来启动这个任务，但是这样做他们默认是 同步执行 的。就算是 addExecutionBlock 方法，也会在 当前线程和其他线程 中执行，也就是说还是会占用当前线程。这是就要用到队列 NSOperationQueue 了。而且，按类型来说的话一共有两种类型：主队列、其他队列。只要添加到队列，会自动调用任务的 start() 方法</p>

<p>主队列</p>

<p>细心的同学就会发现，每套多线程方案都会有一个主线程（当然啦，说的是iOS中，像 pthread 这种多系统的方案并没有，因为 UI线程 理论需要每种操作系统自己定制）。这是一个特殊的线程，必须串行。所以添加到主队列的任务都会一个接一个地排着队在主线程处理。</p>

<pre><code>//OBJECTIVE-C
NSOperationQueue *queue = [NSOperationQueue mainQueue];
//SWIFT
let queue = NSOperationQueue.mainQueue() 其他队列 因为主队列比较特殊，所以会单独有一个类方法来获得主队列。那么通过初始化产生的队列就是其他队列了，因为只有这两种队列，除了主队列，其他队列就不需要名字了。
</code></pre>

<p>注意：其他队列的任务会在其他线程并行执行。</p>

<p>OBJECTIVE-C</p>

<pre><code>//1.创建一个其他队列    
NSOperationQueue *queue = [[NSOperationQueue alloc] init];
//2.创建NSBlockOperation对象
NSBlockOperation *operation = [NSBlockOperation blockOperationWithBlock:^{
NSLog(@"%@", [NSThread currentThread]);
}];
//3.添加多个Block
for (NSInteger i = 0; i &lt; 5; i++) {
[operation addExecutionBlock:^{
    NSLog(@"第%ld次：%@", i, [NSThread currentThread]);
}];
}
//4.队列添加任务
[queue addOperation:operation]; SWIFT

//1.创建其他队列
let queue = NSOperationQueue()
//2.创建NSBlockOperation对象
let operation = NSBlockOperation { () -&gt; Void in
NSLog("%@", NSThread.currentThread())
}
//3.添加多个Block
for i in 0.. Void in
    NSLog("第%ld次 - %@", i, NSThread.currentThread())
}
}
//4.队列添加任务
queue.addOperation(operation) 打印输出


2015-07-28 20:26:28.463 test[18622:4443534]{number = 5, name = (null)}
2015-07-28 20:26:28.463 test[18622:4443536] 第2次 -{number = 2, name = (null)}
2015-07-28 20:26:28.463 test[18622:4443535] 第0次 -{number = 4, name = (null)}
2015-07-28 20:26:28.463 test[18622:4443533] 第1次 -{number = 3, name = (null)}
2015-07-28 20:26:28.463 test[18622:4443534] 第3次 -{number = 5, name = (null)}
2015-07-28 20:26:28.463 test[18622:4443536] 第4次 -{number = 2, name = (null)} OK, 这时应该发问了，大家将 NSOperationQueue 与 GCD的队列 相比较就会发现，这里没有并行队列，那如果我想要10个任务在其他线程串行的执行怎么办？
</code></pre>

<p>这就是苹果封装的妙处，你不用管串行、并行、同步、异步这些名词。NSOperationQueue 有一个参数 maxConcurrentOperationCount 最大并发数，用来设置最多可以让多少个任务同时执行。当你把它设置为 1 的时候，他不就是串行了嘛！</p>

<p>NSOperationQueue 还有一个添加任务的方法，- (void)addOperationWithBlock:(void (^)(void))block; ，这是不是和 GCD 差不多？这样就可以添加一个任务到队列中了，十分方便。</p>

<p>NSOperation 有一个非常实用的功能，那就是添加依赖。比如有 3 个任务：A: 从服务器上下载一张图片，B：给这张图片加个水印，C：把图片返回给服务器。这时就可以用到依赖了:</p>

<p>OBJECTIVE-C</p>

<pre><code>//1.任务一：下载图片
NSBlockOperation *operation1 = [NSBlockOperation blockOperationWithBlock:^{
NSLog(@"下载图片 - %@", [NSThread currentThread]);
[NSThread sleepForTimeInterval:1.0];
}];
//2.任务二：打水印
NSBlockOperation *operation2 = [NSBlockOperation blockOperationWithBlock:^{
NSLog(@"打水印   - %@", [NSThread currentThread]);
[NSThread sleepForTimeInterval:1.0];
}];
//3.任务三：上传图片
NSBlockOperation *operation3 = [NSBlockOperation blockOperationWithBlock:^{
NSLog(@"上传图片 - %@", [NSThread currentThread]);
[NSThread sleepForTimeInterval:1.0];
}];
//4.设置依赖
[operation2 addDependency:operation1];      //任务二依赖任务一
[operation3 addDependency:operation2];      //任务三依赖任务二
//5.创建队列并加入任务
NSOperationQueue *queue = [[NSOperationQueue alloc] init];
[queue addOperations:@[operation3, operation2, operation1] 	waitUntilFinished:NO]; SWIFT


//1.任务一：下载图片
let operation1 = NSBlockOperation { () -&gt; Void in
NSLog("下载图片 - %@", NSThread.currentThread())
NSThread.sleepForTimeInterval(1.0)
}
//2.任务二：打水印
let operation2 = NSBlockOperation { () -&gt; Void in
NSLog("打水印   - %@", NSThread.currentThread())
NSThread.sleepForTimeInterval(1.0)
}
//3.任务三：上传图片
let operation3 = NSBlockOperation { () -&gt; Void in
NSLog("上传图片 - %@", NSThread.currentThread())
NSThread.sleepForTimeInterval(1.0)
}
//4.设置依赖
operation2.addDependency(operation1)    //任务二依赖任务一
operation3.addDependency(operation2)    //任务三依赖任务二
//5.创建队列并加入任务
let queue = NSOperationQueue()
queue.addOperations([operation3, operation2, operation1], 	waitUntilFinished: false) 打印结果



2015-07-28 21:24:28.622 test[19392:4637517] 下载图片 -{number = 2, name = (null)}
2015-07-28 21:24:29.622 test[19392:4637515] 打水印 -{number = 3, name = (null)}
2015-07-28 21:24:30.627 test[19392:4637515] 上传图片 -{number = 3, name = (null)} 注意：不能添加相互依赖，会死锁，比如 A依赖B，B依赖A。 可以使用 removeDependency 来解除依赖关系。 可以在不同的队列之间依赖，反正就是这个依赖是添加到任务身上的，和队列没关系。 其他方法
</code></pre>

<p>以上就是一些主要方法, 下面还有一些常用方法需要大家注意：</p>

<pre><code>NSOperation

BOOL executing; //判断任务是否正在执行
BOOL finished; //判断任务是否完成
void (^completionBlock)(void); //用来设置完成后需要执行的操作
- (void)cancel; //取消任务
- (void)waitUntilFinished; //阻塞当前线程直到此任务执行完毕
NSOperationQueue

NSUInteger operationCount; //获取队列的任务数
- (void)cancelAllOperations; //取消队列中所有的任务
- (void)waitUntilAllOperationsAreFinished; //阻塞当前线程直到此队列中的所有任务执行完毕
[queue setSuspended:YES]; // 暂停queue
[queue setSuspended:NO]; // 继续queue 好啦，到这里差不多就讲完了。当然，我讲的并不完整，可能有一些知识我并没有讲到，但作为常用方法，这些已经足够了。不过我在这里只是告诉你了一些方法的功能，只是怎么把他们用到合适的地方，就需要多多实践了。下面我会说一些关于多线程的案例，是大家更加什么地了解。
</code></pre>

<h3 id="section-9">其他用法</h3>

<p>在这部分，我会说一些和多线程知识相关的案例，可能有些很简单，大家早都知道的，不过因为这篇文章讲的是多线程嘛，所以应该尽可能的全面嘛。还有就是，我会尽可能的使用多种方法实现，让大家看看其中的区别。</p>

<h5 id="section-10">线程同步</h5>

<p>所谓线程同步就是为了防止多个线程抢夺同一个资源造成的数据安全问题，所采取的一种措施。当然也有很多实现方法，请往下看：</p>

<p>互斥锁 ：给需要同步的代码块加一个互斥锁，就可以保证每次只有一个线程访问此代码块。
OBJECTIVE-C</p>

<pre><code>@synchronized(self) {
//需要执行的代码块
}
SWIFT


objc_sync_enter(self)
//需要执行的代码块
objc_sync_exit(self)
</code></pre>

<p>同步执行 ：我们可以使用多线程的知识，把多个线程都要执行此段代码添加到同一个串行队列，这样就实现了线程同步的概念。当然这里可以使用 GCD 和 NSOperation 两种方案，我都写出来。
OBJECTIVE-C</p>

  	//GCD
  	//需要一个全局变量queue，要让所有线程的这个操作都加到一个queue中
  	dispatch_sync(queue, ^{
<pre><code>  NSInteger ticket = lastTicket;
  [NSThread sleepForTimeInterval:0.1];
  NSLog(@"%ld - %@",ticket, [NSThread currentThread]);
  ticket -= 1;
  lastTicket = ticket;
  	});
  	//NSOperation &amp; NSOperationQueue
  	//重点：1. 全局的 NSOperationQueue, 所有的操作添加到同一个queue中
  	//       2. 设置 queue 的 maxConcurrentOperationCount 为 1
  	//       3. 如果后续操作需要Block中的结果，就需要调用每个操作的	waitUntilFinished，阻塞当前线程，一直等到当前操作完成，才允许执行后面的。	waitUntilFinished 要在添加到队列之后！
 	 NSBlockOperation *operation = [NSBlockOperation 	blockOperationWithBlock:^{
  NSInteger ticket = lastTicket;
  [NSThread sleepForTimeInterval:1];
  NSLog(@"%ld - %@",ticket, [NSThread currentThread]);
  ticket -= 1;
  lastTicket = ticket;
  	}];
  	[queue addOperation:operation];
  	[operation waitUntilFinished];
  	//后续要做的事 SWIFT
</code></pre>

<p>这里的 swift 代码，我就不写了，因为每句都一样，只是语法不同而已，照着 OC 的代码就能写出 Swift 的。这篇文章已经老长老长了，我就不浪费篇幅了，又不是高中写作文。</p>

<h5 id="section-11">延迟执行</h5>

<p>所谓延迟执行就是延时一段时间再执行某段代码。下面说一些常用方法。</p>

<h6 id="perform">perform</h6>

<p>OBJECTIVE-C</p>

 	 // 3秒后自动调用self的run:方法，并且传递参数：@”abc”
  	[self performSelector:@selector(run:) withObject:@”abc” afterDelay:3];

<p>SWIFT</p>

<p>之前就已经说过，Swift 里去掉了这个方法。</p>

<h6 id="gcd-1">GCD</h6>

<p>可以使用 GCD 中的 dispatch_after 方法，OC 和 Swift 都可以使用，这里只写 OC 的，Swift 的是一样的。</p>

<p>OBJECTIVE-C</p>

<pre><code>// 创建队列
dispatch_queue_t queue = 	dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
// 设置延时，单位秒
double delay = 3; 
dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delay * NSEC_PER_SEC)), queue, ^{
// 3秒后需要执行的任务
}); ######NSTimer
</code></pre>

<p>NSTimer 是iOS中的一个计时器类，除了延迟执行还有很多用法，不过这里直说延迟执行的用法。同样只写 OC 版的，Swift 也是相同的。</p>

<p>OBJECTIVE-C</p>

<pre><code>[NSTimer scheduledTimerWithTimeInterval:3.0 target:self selector:@selector(run:) userInfo:@"abc" repeats:NO];
</code></pre>

<h5 id="section-12">单例模式</h5>

<p>至于什么是单例模式，我也不多说，我只说说一般怎么实现。在 Objective-C 中，实现单例的方法已经很具体了，虽然有别的方法，但是一般都是用一个标准的方法了，下面来看看。</p>

<p>OBJECTIVE-C</p>

<pre><code>@interface Tool : NSObject
+ (instancetype)sharedTool;
@end
@implementation Tool
static id _instance;
+ (instancetype)sharedTool {
static dispatch_once_t onceToken;
dispatch_once(&amp;onceToken, ^{
    _instance = [[Tool alloc] init];
});
return _instance;
}
@end 这里之所以将单例模式，是因为其中用到了 GCD 的 dispatch_once 方法。下面看 Swift 中的单例模式，在Swift中单例模式非常简单！想知道怎么从 OC 那么复杂的方法变成下面的写法的，请看这里
</code></pre>

<p>SWIFT</p>

<pre><code>class Tool: NSObject {
static let sharedTool = Tool()
// 私有化构造方法，阻止其他对象使用这个类的默认的'()'构造方法
private override init() {}
} #####从其他线程回到主线程的方法
</code></pre>

<p>我们都知道在其他线程操作完成后必须到主线程更新UI。所以，介绍完所有的多线程方案后，我们来看看有哪些方法可以回到主线程。</p>

<p>NSThread</p>

<pre><code>//Objective-C
[self performSelectorOnMainThread:@selector(run) withObject:nil waitUntilDone:NO];
//Swift
//swift 取消了 performSelector 方法。 GCD

//Objective-C
dispatch_async(dispatch_get_main_queue(), ^{
});
//Swift
dispatch_async(dispatch_get_main_queue(), { () -&gt; Void in
}) NSOperationQueue

//Objective-C
[[NSOperationQueue mainQueue] addOperationWithBlock:^{
}];
//Swift
NSOperationQueue.mainQueue().addOperationWithBlock { () -&gt; Void in
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[eventbus介绍]]></title>
    <link href="http://helloyokoy.github.io/blog/eventbusjie-shao/"/>
    <updated>2015-05-10T21:37:33+08:00</updated>
    <id>http://helloyokoy.github.io/blog/eventbusjie-shao</id>
    <content type="html"><![CDATA[<p><img src="https://github.com/greenrobot/EventBus/raw/master/EventBus-Publish-Subscribe.png" alt="icon" title="icon" /></p>

<blockquote>
  <p>EventBus是一款针对Android优化的发布/订阅事件总线。主要功能是替代Intent,Handler,BroadCast在Fragment，Activity，Service，线程之间传递消息.优点是开销小，代码更优雅。以及将发送者和接收者解耦。</p>
</blockquote>

<h3 id="eventbus">1.下载EventBus的类库</h3>

<p>源码：<a href="https://github.com/greenrobot/EventBus" title="url">https://github.com/greenrobot/EventBus</a></p>

<!--more-->

<h3 id="section">2.基本使用</h3>

<ol>
  <li>
    <p>自定义一个类，可以是空类，比如：</p>

    <pre><code> public class AnyEventType {  
     public AnyEventType(){}  
 }  
</code></pre>
  </li>
  <li>
    <p>在要接收消息的页面注册：</p>

    <pre><code> eventBus.register(this);  
</code></pre>
  </li>
  <li>
    <p>发送消息</p>

    <pre><code> eventBus.post(new AnyEventType event);  
</code></pre>
  </li>
  <li>
    <p>接受消息的页面实现(共有四个函数，各功能不同，这是其中之一，可以选择性的实现，这里先实现一个)：</p>

    <pre><code> public void onEvent(AnyEventType event) {}  
</code></pre>
  </li>
  <li>
    <p>解除注册</p>

    <pre><code> eventBus.unregister(this);  
</code></pre>
  </li>
</ol>

<p>详细教程: <a href="http://blog.csdn.net/harvic880925/article/details/40660137" title="url">http://blog.csdn.net/harvic880925/article/details/40660137</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[android开源框架]]></title>
    <link href="http://helloyokoy.github.io/blog/androidkai-yuan-kuang-jia/"/>
    <updated>2015-05-09T17:42:35+08:00</updated>
    <id>http://helloyokoy.github.io/blog/androidkai-yuan-kuang-jia</id>
    <content type="html"><![CDATA[<h3 id="volley">1、volley</h3>

<p>项目地址 https://github.com/smanikandan14/Volley-demo</p>

<ol>
  <li>JSON，图像等的异步下载；</li>
  <li>网络请求的排序（scheduling）</li>
  <li>网络请求的优先级处理</li>
  <li>缓存</li>
  <li>多级别取消请求</li>
  <li>和Activity和生命周期的联动（Activity结束时同时取消所有网络请求）</li>
</ol>

<h3 id="android-async-http">2、android-async-http</h3>

<p>项目地址：https://github.com/loopj/android-async-http</p>

<p>文档介绍：http://loopj.com/android-async-http/</p>

<ol>
  <li>在匿名回调中处理请求结果</li>
  <li>在UI线程外进行http请求</li>
  <li>文件断点上传</li>
  <li>智能重试</li>
  <li>默认gzip压缩</li>
  <li>支持解析成Json格式</li>
  <li>可将Cookies持久化到SharedPreferences
<!--more-->
###3、Afinal框架</li>
</ol>

<p>项目地址：https://github.com/yangfuhai/afinal</p>

<p>主要有四大模块：</p>

<ol>
  <li>数据库模块：android中的orm框架，使用了线程池对sqlite进行操作。</li>
  <li>注解模块：android中的ioc框架，完全注解方式就可以进行UI绑定和事件绑定。无需findViewById和setClickListener等。</li>
  <li>网络模块：通过httpclient进行封装http数据请求，支持ajax方式加载，支持下载、上传文件功能。</li>
  <li>图片缓存模块：通过FinalBitmap，imageview加载bitmap的时候无需考虑bitmap加载过程中出现的oom和android容器快速滑动时候出现的图片错位等现象。FinalBitmap可以配置线程加载线程数量，缓存大小，缓存路径，加载显示动画等。FinalBitmap的内存管理使用lru算法，没有使用弱引用（android2.3以后google已经不建议使用弱引用，android2.3后强行回收软引用和弱引用，详情查看android官方文档），更好的管理bitmap内存。FinalBitmap可以自定义下载器，用来扩展其他协议显示网络图片，比如ftp等。同时可以自定义bitmap显示器，在imageview显示图片的时候播放动画等（默认是渐变动画显示）。</li>
  <li>
    <h3 id="xutils">4、xUtils框架</h3>
  </li>
</ol>

<p>项目地址：https://github.com/wyouflf/xUtils</p>

<p>主要有四大模块：</p>

<ol>
  <li>数据库模块：android中的orm框架，一行代码就可以进行增删改查；
         支持事务，默认关闭；
         可通过注解自定义表名，列名，外键，唯一性约束，NOT NULL约束，CHECK约束等（需要混淆的时候请注解表名和列名）；
         支持绑定外键，保存实体时外键关联实体自动保存或更新；
         自动加载外键关联实体，支持延时加载；
         支持链式表达查询，更直观的查询语义，参考下面的介绍或sample中的例子。</li>
  <li>注解模块：android中的ioc框架，完全注解方式就可以进行UI，资源和事件绑定；
         新的事件绑定方式，使用混淆工具混淆后仍可正常工作；
         目前支持常用的20种事件绑定，参见ViewCommonEventListener类和包com.lidroid.xutils.view.annotation.event。</li>
  <li>网络模块：支持同步，异步方式的请求；
         支持大文件上传，上传大文件不会oom；
         支持GET，POST，PUT，MOVE，COPY，DELETE，HEAD，OPTIONS，TRACE，CONNECT请求；
         下载支持301/302重定向，支持设置是否根据Content-Disposition重命名下载的文件；
         返回文本内容的请求(默认只启用了GET请求)支持缓存，可设置默认过期时间和针对当前请求的过期时间。</li>
  <li>图片缓存模块：加载bitmap的时候无需考虑bitmap加载过程中出现的oom和android容器快速滑动时候出现的图片错位等现象；
         支持加载网络图片和本地图片；
         内存管理使用lru算法，更好的管理bitmap内存；
         可配置线程加载线程数量，缓存大小，缓存路径，加载显示动画等…</li>
</ol>

<h3 id="thinkandroid">5、ThinkAndroid</h3>

<p>项目地址：https://github.com/white-cat/ThinkAndroid</p>

<p>主要有以下模块：</p>

<ol>
  <li>MVC模块：实现视图与模型的分离。</li>
  <li>ioc模块：android中的ioc模块，完全注解方式就可以进行UI绑定、res中的资源的读取、以及对象的初始化。</li>
  <li>数据库模块：android中的orm框架，使用了线程池对sqlite进行操作。</li>
  <li>http模块：通过httpclient进行封装http数据请求，支持异步及同步方式加载。</li>
  <li>缓存模块：通过简单的配置及设计可以很好的实现缓存，对缓存可以随意的配置</li>
  <li>图片缓存模块：imageview加载图片的时候无需考虑图片加载过程中出现的oom和android容器快速滑动时候出现的图片错位等现象。</li>
  <li>配置器模块：可以对简易的实现配对配置的操作，目前配置文件可以支持Preference、Properties对配置进行存取。</li>
  <li>日志打印模块：可以较快的轻易的是实现日志打印，支持日志打印的扩展，目前支持对sdcard写入本地打印、以及控制台打印</li>
  <li>下载器模块:可以简单的实现多线程下载、后台下载、断点续传、对下载进行控制、如开始、暂停、删除等等。</li>
  <li>网络状态检测模块：当网络状态改变时，对其进行检</li>
</ol>

<h3 id="loonandroid">6、LoonAndroid</h3>

<p>项目地址：https://github.com/gdpancheng/LoonAndroid</p>

<p>主要有以下模块：</p>

<ol>
  <li>自动注入框架（只需要继承框架内的application既可）</li>
  <li>图片加载框架（多重缓存，自动回收，最大限度保证内存的安全性）</li>
  <li>网络请求模块（继承了基本上现在所有的http请求）</li>
  <li>eventbus（集成一个开源的框架）</li>
  <li>验证框架（集成开源框架）</li>
  <li>json解析（支持解析成集合或者对象）</li>
  <li>数据库（不知道是哪位写的 忘记了）</li>
  <li>多线程断点下载（自动判断是否支持多线程，判断是否是重定向）</li>
  <li>自动更新模块</li>
  <li>一系列工具类</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[leakCanary内寸泄露检测]]></title>
    <link href="http://helloyokoy.github.io/blog/leakcannei-xie-lu-jian-ce/"/>
    <updated>2015-04-11T17:53:41+08:00</updated>
    <id>http://helloyokoy.github.io/blog/leakcannei-xie-lu-jian-ce</id>
    <content type="html"><![CDATA[<h2 id="leakcanary">LeakCanary</h2>

<p>Android 和 Java 内存泄露检测。</p>

<blockquote>
  <p>“A small leak will sink a great ship.” - Benjamin Franklin</p>
</blockquote>

<blockquote>
  <p>千里之堤， 毁于蚁穴。 – 《韩非子·喻老》</p>
</blockquote>

<p><img src="https://raw.githubusercontent.com/liaohuqiu/leakcanary/master/assets/screenshot.png" alt="alt text" title="Title" /></p>

<h4 id="demo">demo</h4>

<p>一个非常简单的 LeakCanary demo: <a href="https://github.com/liaohuqiu/leakcanary-demo" title="Title">https://github.com/liaohuqiu/leakcanary-demo</a></p>

<!--more-->

<h3 id="section">开始使用</h3>

<p>在 build.gradle 中加入引用，不同的编译使用不同的引用：</p>

<pre><code>dependencies {
   			 debugCompile 'com.squareup.leakcanary:leakcanary-android:1.3'
   			 releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3'
 	}
</code></pre>

<p>在 Application 中：</p>

<pre><code>public class ExampleApplication extends Application {
	@Override public void onCreate() {
	super.onCreate();
	LeakCanary.install(this);
  		}
}
</code></pre>

<p>这样，就万事俱备了！ 在 debug build 中，如果检测到某个 activity 有内存泄露，LeakCanary 就是自动地显示一个通知。</p>

<h4 id="leakcanary-1">为什么需要使用 LeakCanary？</h4>
<p>问得好，看这个文章LeakCanary: <a href="http://www.liaohuqiu.net/cn/posts/leak-canary/" title="Title">让内存泄露无所遁形</a></p>

<h3 id="section-1">如何使用</h3>

<p>使用 RefWatcher 监控那些本该被回收的对象。</p>

<pre><code>RefWatcher refWatcher = {...};

// 监控
refWatcher.watch(schrodingerCat);
LeakCanary.install() 会返回一个预定义的 RefWatcher，同时也会启用一个 	ActivityRefWatcher，用于自动监控调用 Activity.onDestroy() 之后泄露的 activity。

public class ExampleApplication extends Application {
</code></pre>

  	public static RefWatcher getRefWatcher(Context context) {
<pre><code>	ExampleApplication application = (ExampleApplication) 	context.getApplicationContext();
return application.refWatcher;
  	}
</code></pre>

  	private RefWatcher refWatcher;

  	@Override public void onCreate() {
<pre><code>	super.onCreate();
	refWatcher = LeakCanary.install(this);
  	}
} 使用 RefWatcher 监控 Fragment：

public abstract class BaseFragment extends Fragment {
</code></pre>

  	@Override public void onDestroy() {
<pre><code>	super.onDestroy();
	RefWatcher refWatcher = ExampleApplication.getRefWatcher(getActivity());
	refWatcher.watch(this);
  	}
} ###工作机制
</code></pre>

<ol>
  <li>
    <p>RefWatcher.watch() 创建一个 KeyedWeakReference 到要被监控的对象。</p>
  </li>
  <li>
    <p>然后在后台线程检查引用是否被清除，如果没有，调用GC。</p>
  </li>
  <li>
    <p>如果引用还是未被清除，把 heap 内存 dump 到 APP 对应的文件系统中的一个 .hprof 文件中。</p>
  </li>
  <li>
    <p>在另外一个进程中的 HeapAnalyzerService 有一个 HeapAnalyzer 使用HAHA 解析这个文件。</p>
  </li>
  <li>
    <p>得益于唯一的 reference key, HeapAnalyzer 找到 KeyedWeakReference，定位内存泄露。</p>
  </li>
  <li>
    <p>HeapAnalyzer 计算 到 GC roots 的最短强引用路径，并确定是否是泄露。如果是的话，建立导致泄露的引用链。</p>
  </li>
  <li>
    <p>引用链传递到 APP 进程中的 DisplayLeakService， 并以通知的形式展示出来。</p>
  </li>
</ol>

<h3 id="leak-trace">如何复制 leak trace？</h3>

<p>在 Logcat 中，你可以看到类似这样的 leak trace：</p>

<pre><code>In com.example.leakcanary:1.0:1 com.example.leakcanary.MainActivity has leaked:

* GC ROOT thread java.lang.Thread.&lt;Java Local&gt; (named 'AsyncTask #1')
* references com.example.leakcanary.MainActivity$3.this$0 (anonymous class extends android.os.AsyncTask)
* leaks com.example.leakcanary.MainActivity instance

* Reference Key: e71f3bf5-d786-4145-8539-584afaecad1d
* Device: Genymotion generic Google Nexus 6 - 5.1.0 - API 22 - 1440x2560 vbox86p
* Android Version: 5.1 API: 22
* Durations: watch=5086ms, gc=110ms, heap dump=435ms, analysis=2086ms 你甚至可以通过分享按钮把这些东西分享出去。
</code></pre>

<h3 id="sdk-">SDK 导致的内存泄露</h3>

<p>随着时间的推移，很多SDK 和厂商 ROM 中的内存泄露问题已经被尽快修复了。但是，当这样的问题发生时，一般的开发者能做的事情很有限。</p>

<p>LeakCanary 有一个已知问题的忽略列表，AndroidExcludedRefs.java，如果你发现了一个新的问题，请提一个 issue 并附上 leak trace, reference key, 机器型号和 SDK 版本。如果可以附带上 dump 文件的 链接那就再好不过了。</p>

<p>对于最新发布的 Android，这点尤其重要。你有机会在帮助在早期发现新的内存泄露，这对整个 Android 社区都有极大的益处。</p>

<p>开发版本的 Snapshots 包在这里： Sonatype’s snapshots repository。</p>

<h3 id="leak-trace-">leak trace 之外</h3>

<p>有时，leak trace 不够，你需要通过 MAT 或者 YourKit 深挖 dump 文件。</p>

<p>通过以下方法，你能找到问题所在：</p>

<ol>
  <li>查找所有的 com.squareup.leakcanary.KeyedWeakReference 实例。</li>
  <li>检查 key 字段</li>
  <li>Find the KeyedWeakReference that has a key field equal to the reference key reported by LeakCanary.</li>
  <li>找到 key 和 和 logcat 输出的 key 值一样的 KeyedWeakReference。</li>
  <li>referent 字段对应的就是泄露的对象。</li>
  <li>剩下的，就是动手修复了。最好是检查到 GC root 的最短强引用路径开始。</li>
</ol>

<h3 id="section-2">自定义</h3>

<h4 id="ui-">UI 样式</h4>

<p>DisplayLeakActivity 有一个默认的图标和标签，你只要在你自己的 APP 资源中，替换以下资源就可。</p>

<pre><code>res/
  	drawable-hdpi/
__leak_canary_icon.png
  	drawable-mdpi/
__leak_canary_icon.png
  	drawable-xhdpi/
__leak_canary_icon.png
  	drawable-xxhdpi/
__leak_canary_icon.png
  	drawable-xxxhdpi/
__leak_canary_icon.png
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;resources&gt;
  	&lt;string name="__leak_canary_display_activity_label"&gt;MyLeaks&lt;/string&gt;
&lt;/resources&gt;
</code></pre>

<h3 id="leak-trace-1">保存 leak trace</h3>

<pre><code>DisplayLeakActivity saves up to 7 heap dumps &amp; leak traces in the app directory. You can change that number by providing R.integer.__leak_canary_max_stored_leaks in your app:
</code></pre>

<p>在 APP 的目录中，DisplayLeakActivity 保存了 7 个 dump 文件和 leak trace。你可以在你的 APP 中，定义 R.integer.__leak_canary_max_stored_leaks 来覆盖类库的默认值。</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;resources&gt;
  	&lt;integer name="__leak_canary_max_stored_leaks"&gt;20&lt;/integer&gt;
&lt;/resources&gt; ###上传 leak trace 到服务器
</code></pre>

<p>你可以改变处理完成的默认行为，将 leak trace 和 heap dump 上传到你的服务器以便统计分析。</p>

<p>创建一个 LeakUploadService， 最简单的就是继承 DisplayLeakService ：</p>

<pre><code>public class LeakUploadService extends DisplayLeakService {
  	@Override
  	protected void afterDefaultHandling(HeapDump heapDump, AnalysisResult result, 	String leakInfo) {
	if (!result.leakFound || result.excludedLeak) {
  	return;
	}
	myServer.uploadLeakBlocking(heapDump.heapDumpFile, leakInfo);
  	}
} 请确认 release 版本 使用 RefWatcher.DISABLED：

public class ExampleApplication extends Application {
</code></pre>

  	public static RefWatcher getRefWatcher(Context context) {
<pre><code>	ExampleApplication application = (ExampleApplication) context.getApplicationContext();
	return application.refWatcher;
  	}
</code></pre>

  	private RefWatcher refWatcher;

  	@Override public void onCreate() {
<pre><code>	super.onCreate();
	refWatcher = installLeakCanary();
  	}
</code></pre>

  	protected RefWatcher installLeakCanary() {
<pre><code>	return RefWatcher.DISABLED;
  	}
}
</code></pre>

<p>自定义 RefWatcher：</p>

<pre><code>public class DebugExampleApplication extends ExampleApplication {
  	protected RefWatcher installLeakCanary() {
	return LeakCanary.install(app, LeakUploadService.class);
  	}
}
</code></pre>

<p>别忘了注册 service：</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"
	xmlns:tools="http://schemas.android.com/tools"
&gt;
  	&lt;application android:name="com.example.DebugExampleApplication"&gt;
	&lt;service android:name="com.example.LeakUploadService" /&gt;
  	&lt;/application&gt;
&lt;/manifest&gt;
</code></pre>

<p><img src="https://github.com/liaohuqiu/leakcanary/raw/master/assets/icon_512.png" alt="alt text" title="Title" /></p>

<p>本文转载自  <a href="http://www.liaohuqiu.net/cn/posts/leak-canary-read-me/" title="Title">srain博客</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ios整套框架easyios]]></title>
    <link href="http://helloyokoy.github.io/blog/ioszheng-tao-kuang-jia-easyios/"/>
    <updated>2015-04-10T22:10:43+08:00</updated>
    <id>http://helloyokoy.github.io/blog/ioszheng-tao-kuang-jia-easyios</id>
    <content type="html"><![CDATA[<h3 id="easyios-">EasyIOS 以提升开发效率为宗旨</h3>
<hr />

<ul>
  <li>
    <p>代码分离 -Model-View-ViewModel- 分离ViewController中的大量逻辑代码，解决ViewController承担了过多角色而造成的代码质量低下。增加视图与模型的绑定特性。</p>
  </li>
  <li>
    <p>自动持久化 -Model to Db– 我再也不想思考如何实现持久化了。在我的想法里，将模型对象直接扔到一个bucket里，然后它就能自动的对数据进行存储、缓存、合并以及唯一化。我应当关注于描述对象间的属性和联系，以及我希望它们分组的方式。其他的实现细节都应该是不可见的。</p>
  </li>
  <li>
    <p>自动RESTful API –Json to Model- 一旦我给程序发出指令，将一个API响应对应到一个数据对象，网络和JSON转换应该被自动完成。我只想关注如何将JSON中那些项目展示给用户。</p>
  </li>
  <li>
    <p>有表现力的触发器和响应 -ReactiveCocoa– 我想用源于响应意图（Intent）的语法来描述事件的响应和触发器，我不关心它们间的连接是如何实现的，并且这些连接也不应该在重构时出错。</p>
  </li>
  <li>
    <p>简洁明了的网络请求 -Action and Request- 对于简单的GET、POST请求，可以进行对象化操作，我只想告诉程序，链接在哪里，有哪些参数，接下来就自动拉取到想要的数据，顺便帮我把缓存也做齐了，也是极好的。</p>
  </li>
  <li>
    <p>便捷的UI布局 – FLKAutolayout-更加便捷的进行autolayout布局,不管你使用springs &amp; struts或者AutoLayout，每种方法都需要你明确相关视图如何排列。你需要花大量的时间编写和修正这些排列，特别是现在有这么多设备需要适配 的情况下。没有什么是自动写好的，UI布局依赖于对细节的不断调整。推荐开发期间Debug工具FLEX,pod ‘FLEX’, ‘~&gt; 1.1.1’需要手动集成，发布release版本时请删除。</p>
  </li>
  <li>友好的线程控制 -GCDObjC-</li>
  <li>便捷的正则匹配</li>
  <li>富文本的Label</li>
  <li>and so on……</li>
</ul>

<!--more-->

<h3 id="the-mvvmmodel-view-viewmodel">The MVVM(Model-View-ViewModel)</h3>
<hr />
<p>全新基于MVVM(Model-View-ViewModel)编程模式架构，开启EasyIOS开发函数式编程新篇章。</p>

<p>EasyIOS 2.0类似AngularJs，最为核心的是：MVVM、ORM、模块化、自动化双向数据绑定、等等</p>

<p>喜欢swift的同学，同样有swift的2.0 demo <a href="https://github.com/zhuchaowe/RACSwift" title="Title">RACSwift for EasyIOS</a>，供大家学习。</p>

<p>关于有疑问什么是MVVM，以及为什么IOS开发需要MVVM思想编程的，请看文章用<a href="http://easyios.08dream.com/index.php?s=/Home/Article/detail/id/10036.html" title="Title">Model-View-ViewModel构建iOS App</a>有详细介绍.</p>

<p>EasyIOS 2.0是基于MVVM编程思想进行构建的，封装了Scene,SceneModel,Model，Action四种模型来对IOS进行开发，4种模型的定义解决了IOS开发中ViewController承担了过多角色而造成的代码质量低下，使得结构思路更加清晰。</p>

<ol>
  <li>其中Scene就是ViewController的子类，仅仅负责界面的展示逻辑</li>
  <li>Model数据模型，父类实现了ORM，可以实现json、object、sqlite三者之间的一键转换,</li>
  <li>SceneModel 视图-数据模型，主要负责 视图与模型的绑定工作，其中binding的工作交给了ReactiveCocoa。</li>
  <li>SceneModel包含Action成员，Action类主要负责网络数据的请求,数据缓存，数据解析工作</li>
</ol>

<p>如果你有看Github的Trending Objective-C榜单，那你肯定是见过ReactiveCocoa了。如果你在微博上关注唐巧、onevcat等国内开发者。那也应该听说过ReactiveCocoa了。</p>

<ul>
  <li>
    <p>ReactiveCocoa简称RAC，就是基于响应式编程思想的Objective-C实践，它是Github的一个开源项目，你可以在<a href="https://github.com/ReactiveCocoa/ReactiveCocoa" title="Title">这里</a>找到它。</p>
  </li>
  <li>
    <p>二次封装AFNetworking，集成到Action，增加了网络缓存功能，轻松控制是否启用缓存。</p>
  </li>
  <li>
    <p>采用ReactiveCocoa 框架，实现响应式编程，减少代码复杂度。</p>
  </li>
  <li>
    <p>Model类整合JsonModel的类库和MojoDataBase类库</p>
  </li>
  <li>
    <p>整合了很多开源的优秀代码</p>
  </li>
</ul>

<h3 id="section">常用类库：</h3>
<hr />

<ul>
  <li>
    <p>Action 负责网络数据请求</p>
  </li>
  <li>
    <p>Model 负责数据存储</p>
  </li>
  <li>
    <p>SceneModel 负责Scene与Model的绑定，调用action进行数据请求</p>
  </li>
  <li>
    <p>Scene 一个视图相当于UIViewController,提供了快速集成网络请求和下拉刷新上拉加载的方法。</p>
  </li>
  <li>
    <p>SceneTableView 一个TableView，配合Scene提供了集成下拉刷新上拉加载的方法</p>
  </li>
  <li>
    <p>SceneCollectionView 一个CollectionView，配合Scene提供了集成下拉刷新上拉加载的方法</p>
  </li>
</ul>

<p>github地址: <a href="https://github.com/zhuchaowe/EasyIOS" title="Title">https://github.com/zhuchaowe/EasyIOS</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Afinal介绍]]></title>
    <link href="http://helloyokoy.github.io/blog/afinaljie-shao/"/>
    <updated>2015-03-10T11:38:38+08:00</updated>
    <id>http://helloyokoy.github.io/blog/afinaljie-shao</id>
    <content type="html"><![CDATA[<p><img src="https://camo.githubusercontent.com/c6e3b3f79af58e45555a754cf0814f0e5eb32b9a/687474703a2f2f636f64652e676f6f676c652e636f6d2f702f6166696e616c2f6c6f676f3f6363743d31333531353136353335" alt="icon" title="icon" /></p>

<h3 id="afinal">Afinal简介</h3>
<hr />
<ul>
  <li>
    <p>Afinal 是一个android的sqlite orm 和 ioc 框架。同时封装了android中的http框架，使其更加简单易用；</p>
  </li>
  <li>
    <p>使用finalBitmap，无需考虑bitmap在android中加载的时候oom的问题和快速滑动的时候图片加载位置错位等问题。</p>
  </li>
  <li>
    <p>Afinal的宗旨是简洁，快速。约定大于配置的方式。尽量一行代码完成所有事情。</p>
  </li>
</ul>

<h3 id="afinal-1">目前Afinal主要有四大模块：</h3>
<hr />

<ul>
  <li>
    <p>FinalDB模块：android中的orm框架，一行代码就可以进行增删改查。支持一对多，多对一等查询。</p>
  </li>
  <li>
    <p>FinalActivity模块：android中的ioc框架，完全注解方式就可以进行UI绑定和事件绑定。无需findViewById和setClickListener等。</p>
  </li>
  <li>
    <p>FinalHttp模块：通过httpclient进行封装http数据请求，支持ajax方式加载。</p>
  </li>
  <li>
    <p>FinalBitmap模块：通过FinalBitmap，imageview加载bitmap的时候无需考虑bitmap加载过程中出现的oom和android容器快速滑动时候出现的图片错位等现象。FinalBitmap可以配置线程加载线程数量，缓存大小，缓存路径，加载显示动画等。FinalBitmap的内存管理使用lru算法，没有使用弱引用（android2.3以后google已经不建议使用弱引用，android2.3后强行回收软引用和弱引用，详情查看android官方文档），更好的管理bitmap内存。FinalBitmap可以自定义下载器，用来扩展其他协议显示网络图片，比如ftp等。同时可以自定义bitmap显示器，在imageview显示图片的时候播放动画等（默认是渐变动画显示）。</p>
  </li>
</ul>

<h4 id="afinal-2">使用afinal快速开发框架需要有以下权限：</h4>

<pre><code>&lt;uses-permission android:name="android.permission.INTERNET" /&gt;
&lt;uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" /&gt; * 第一个是访问网络 * 第二个是访问sdcard * 访问网络是请求网络图片的时候需要或者是http数据请求时候需要，访问sdcard是图片缓存的需要。
</code></pre>

<!--more-->

<h3 id="finaldb">FinalDB使用方法：</h3>
<hr />
<p>关于finalDb的更多介绍，请点击<a href="http://my.oschina.net/yangfuhai/blog/87459" title="Title">这里</a></p>

<pre><code>FinalDb db = FinalDb.create(this);
User user = new User(); //这里需要注意的是User对象必须有id属性，或者有通过@ID注解的属性
user.setEmail("mail@tsz.net");
user.setName("michael yang");
db.save(user);
</code></pre>

<h4 id="finaldb-onetomany">FinalDB OneToMany懒加载使用方法：</h4>

<p>模型定义：</p>

<pre><code>public class Parent{
private int id;
@OneToMany(manyColumn = "parentId")
private OneToManyLazyLoader&lt;Parent ,Child&gt; children;
/*....*/
}
public class Child{
private int id;
private String text;
@ManyToOne(column = "parentId")
private  Parent  parent;
/*....*/
} 使用：

List&lt;Parent&gt; all = db.findAll(Parent.class);
    for( Parent  item : all){
        if(item.getChildren ().getList().size()&gt;0)
            Toast.makeText(this,item.getText() + item.getChildren().getList().get(0).getText(),Toast.LENGTH_LONG).show();
    }
</code></pre>

<h3 id="finalactivity">FinalActivity使用方法：</h3>

<ul>
  <li>完全注解方式就可以进行UI绑定和事件绑定</li>
  <li>
    <p>无需findViewById和setClickListener等</p>

    <pre><code>  public class AfinalDemoActivity extends FinalActivity {
</code></pre>

  	//无需调用findViewById和setOnclickListener等
  	@ViewInject(id=R.id.button,click=”btnClick”) Button button;
  	@ViewInject(id=R.id.textView) TextView textView;

  	public void onCreate(Bundle savedInstanceState) {
    <pre><code> 	super.onCreate(savedInstanceState);
 	setContentView(R.layout.main);
  	}
</code></pre>

  	public void btnClick(View v){
    <pre><code> 		textView.setText("text set form button");
  	}
  }
</code></pre>
  </li>
  <li>
    <p>在其他侵入式框架下使用（如ActionBarShelock）</p>

   	protected void onCreate(Bundle savedInstanceState) {
    <pre><code> 		super.onCreate(savedInstanceState);
  	setContentView(view);
  	FinalActivity.initInjectedView(this);
   	}
</code></pre>
  </li>
  <li>
    <p>在Fragment中使用</p>

   	public View onCreateView(LayoutInflater inflater, ViewGroup container,
    <pre><code>    Bundle savedInstanceState) {
 		View viewRoot = inflater.inflate(R.layout.map_frame, container, false);
 		FinalActivity.initInjectedView(this,viewRoot);
 	 	}
</code></pre>
  </li>
</ul>

<h3 id="finalhttp">FinalHttp使用方法：</h3>

<h4 id="get">普通get方法</h4>

<pre><code>FinalHttp fh = new FinalHttp();
fh.get("http://www.yangfuhai.com", new AjaxCallBack(){

@Override
public void onLoading(long count, long current) { //每1秒钟自动被回调一次
        textView.setText(current+"/"+count);
}

@Override
public void onSuccess(String t) {
        textView.setText(t==null?"null":t);
}

@Override
public void onStart() {
    //开始http请求的时候回调
}

@Override
public void onFailure(Throwable t, String strMsg) {
    //加载失败的时候回调
}
}); ####使用FinalHttp上传文件 或者 提交数据 到服务器（post方法）
</code></pre>

<p>文件上传到服务器，服务器如何接收，请查看<a href="http://www.oschina.net/question/105836_85825" title="Title">这里</a></p>

<pre><code>AjaxParams params = new AjaxParams();
params.put("username", "michael yang");
params.put("password", "123456");
params.put("email", "test@tsz.net");
params.put("profile_picture", new File("/mnt/sdcard/pic.jpg")); // 上传文件
params.put("profile_picture2", inputStream); // 上传数据流
params.put("profile_picture3", new ByteArrayInputStream(bytes)); // 提交字节流

FinalHttp fh = new FinalHttp();
fh.post("http://www.yangfuhai.com", params, new AjaxCallBack(){
@Override
public void onLoading(long count, long current) {
            textView.setText(current+"/"+count);
}

@Override
    public void onSuccess(String t) {
        textView.setText(t==null?"null":t);
    }
    });
</code></pre>

<h4 id="finalhttp-1">使用FinalHttp下载文件：</h4>

<p>支持断点续传，随时停止下载任务 或者 开始任务</p>

<pre><code>		FinalHttp fh = new FinalHttp();  
		//调用download方法开始下载
		HttpHandler handler = fh.download("http://www.xxx.com/下载路径/xxx.apk", //这里是下载的路径
		true,//true:断点续传 false:不断点续传（全新下载）
		"/mnt/sdcard/testapk.apk", //这是保存到本地的路径
		new AjaxCallBack() {  
            @Override  
            public void onLoading(long count, long current) {  
                 textView.setText("下载进度："+current+"/"+count);  
            }  

            @Override  
            public void onSuccess(File t) {  
                		textView.setText(t==null?"null":t.getAbsoluteFile().toString());  
            }  

        });  
	//调用stop()方法停止下载
	handler.stop();
</code></pre>

<h3 id="finalbitmap-">FinalBitmap 使用方法</h3>

<p>加载网络图片就一行代码 fb.display(imageView,url) ,更多的display重载请看帮助文档</p>

<pre><code>private GridView gridView;
private FinalBitmap fb;
@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.images);

    gridView = (GridView) findViewById(R.id.gridView);
    gridView.setAdapter(mAdapter);

    fb = FinalBitmap.create(this);//初始化FinalBitmap模块
    fb.configLoadingImage(R.drawable.downloading);
    //这里可以进行其他十几项的配置，也可以不用配置，配置之后必须调用init()函数,才生效
    //fb.configBitmapLoadThreadSize(int size)
    //fb.configBitmapMaxHeight(bitmapHeight)
}


///////////////////////////adapter getView////////////////////////////////////////////

public View getView(int position, View convertView, ViewGroup parent) {
ImageView iv;
if(convertView == null){
    convertView = View.inflate(BitmapCacheActivity.this,R.layout.image_item, null);
    iv = (ImageView) convertView.findViewById(R.id.imageView);
    iv.setScaleType(ScaleType.CENTER_CROP);
    convertView.setTag(iv);
}else{
    iv = (ImageView) convertView.getTag();
}
//bitmap加载就这一行代码，display还有其他重载，详情查看源码
fb.display(iv,Images.imageUrls[position]);
</code></pre>

<h3 id="android-library-project">配置成Android Library Project</h3>

<p>解决需求:有多个项目依赖afinal,并且想修改afinal源码</p>

<ul>
  <li>clone到本地</li>
  <li>
    <p>添加AndroidManifest.xml文件:</p>

    <pre><code>  &lt;?xml version="1.0" encoding="utf-8"?&gt;
  &lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"
  	package="net.tsz.afinal" &gt;
  	&lt;uses-sdk
  android:minSdkVersion="5"
  android:targetSdkVersion="7" /&gt;
  &lt;/manifest&gt;
</code></pre>
  </li>
  <li>
    <p>导入到 Eclipse:</p>

    <pre><code>  Import =&gt; Android =&gt; Existing Android Code Into Workspace
</code></pre>
  </li>
  <li>工程上按右键 =&gt; Properties =&gt; Android =&gt; √ Is Library</li>
  <li>完成,你的项目可以引用这个afinal Library了.</li>
</ul>

<h3 id="git">排除不需要Git管理的文件</h3>

<p>解决需求:想修改源码,但不想让Eclipse把工程弄脏</p>

<ul>
  <li>
    <p>忽略已经被Git管理的./bin目录:
导入Eclipse前执行: git update-index –assume-unchanged ./bin/*</p>
  </li>
  <li>
    <p>忽略未被Git管理的文件和目录: 添加/.gitignore 文件:</p>

    <pre><code>  /gen
  /assets
  /bin
  /res
  /.classpath
  /.project
  /AndroidManifest.xml
  /project.properties
  /.gitignore
</code></pre>
  </li>
  <li>
    <p>导入到Eclipse,git status可见Repository依旧干净.</p>
  </li>
</ul>

<p>GitHub地址: <a href="https://github.com/yangfuhai/afinal" title="url">https://github.com/yangfuhai/afinal</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MagicRecord介绍]]></title>
    <link href="http://helloyokoy.github.io/blog/magicrecordjie-shao/"/>
    <updated>2015-02-10T10:26:16+08:00</updated>
    <id>http://helloyokoy.github.io/blog/magicrecordjie-shao</id>
    <content type="html"><![CDATA[<p>CoreData作为Mac OS 和IOS开发数据持久化和用户数据检索的不可缺少的一部分已经好几年了。</p>

<p>为了使API对开发者更容易使用，也为了App的整体化，苹果也在不间断的更新CoreData的API。</p>

<p>也就是说，即使对于一个精通IOS开发的人CoreData依旧使用起来很困难。</p>

<p>即使你会使用CoreData，每天重复性枯燥的使用CoreData也会变得很笨重，MagicalPanda创建的一个第三方库为这种工作带来了好消息。</p>

<p>MagicalRecord 致力于更快捷和容易的使用CoreData。</p>

<p>MagicalRecord 使用方便，特别流行。正如作者所说，MagicalRecord 致力于使CoreData的代码更简洁，更简单的获取数据，并且使用最优化的操作。</p>

<p>他是怎么做到的呢？它提供了方便的方法，包含了CoreData使用的查询更新等的公用模板。它的设计受到了Ruby on Rails’sActiveRecord 持续性系统的影响。</p>

<!--more-->

<h4 id="httpblogcsdnnetdongtaochen2039articledetails40376197httpblogcsdnnetdongtaochen2039articledetails40376197-title">详细教程地址: <a href="http://blog.csdn.net/dongtaochen2039/article/details/40376197" title="Title">http://blog.csdn.net/dongtaochen2039/article/details/40376197</a></h4>

<h4 id="github-magicrecordhttpsgithubcommagicalpandamagicalrecord-title"><a href="https://github.com/magicalpanda/MagicalRecord" title="Title">GitHub MagicRecord</a></h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CTAssetsPickerController]]></title>
    <link href="http://helloyokoy.github.io/blog/ctassetspickercontroller/"/>
    <updated>2014-12-03T12:14:48+08:00</updated>
    <id>http://helloyokoy.github.io/blog/ctassetspickercontroller</id>
    <content type="html"><![CDATA[<p><img src="http://cdn.cocimg.com/bbs/attachment/Fid_19/19_98590_315f8ebbd058f7e.png" alt="image" title="image" /></p>

<h3 id="section">特色</h3>
<ol>
  <li>用用户的相册中选择多张图片以及视频</li>
  <li>有过滤的设置，只选择图片或只选择视频</li>
  <li>可以设置选择图片以及视频的最大数量</li>
  <li>平均5x fps</li>
  <li>遵从UIAccessibility协议</li>
</ol>

<!--more-->

<h3 id="section-1">需要</h3>
<p>Xcode 5，iOS6及以上</p>

<h3 id="section-2">安装</h3>

<ol>
  <li>导入CTAssetsPickerController.h文件</li>
  <li>
    <p>创建并显示CTAssetsPickerController</p>

    <pre><code> CTAssetsPickerController *picker = [[CTAssetsPickerController alloc] init];
 picker.delegate = self;
 [self presentViewController:picker animated:YES completion:NULL];
</code></pre>
  </li>
</ol>

<h3 id="section-3">定制</h3>
<p>你可以设置最大选择文件的数量：</p>

<pre><code>picker.maximumNumberOfSelection = 10;
</code></pre>

<p>如果你希望只选择图片或者视频，创建ALAssetsFilter 并把它分配给assetsFilter</p>

<pre><code>picker.assetsFilter = [ALAssetsFilter allPhotos]; // 只选择图片
</code></pre>

<p>如果选择器是以弹窗的形式显示，可以去掉选择按钮</p>

<pre><code>picker.showsCancelButton = NO;
</code></pre>

<h4 id="ctassetspickercontrollerdelegate">实现CTAssetsPickerControllerDelegate</h4>
<p>用户选择完成：</p>

<pre><code>- (void)assetsPickerController:(CTAssetsPickerController *)picker didFinishPickingAssets:(NSArray *)assets
// assets contains ALAsset objects.
</code></pre>

<p>用户取消选择：</p>

<pre><code>- (void)assetsPickerControllerDidCancel:(CTAssetsPickerController *)picker;
</code></pre>

<h4 id="section-4">注意</h4>
<p>CTAssetsPickerController并不会压缩所选择的图片和视频。但是你可以通过defaultRepresentation 属性来处理选择的对象。</p>

<p>例如：如果选择的是图片的话，可以像这样创建一个UIImage</p>

<pre><code>ALAssetRepresentation *representation = alAsset.defaultRepresentation;

UIImage *fullResolutionImage =
[UIImage imageWithCGImage:representation.fullResolutionImage
                    scale:1.0f
              orientation:(UIImageOrientation)representation.orientation];
</code></pre>

<p>如果选择的是视频，则创建一个NSData：</p>

<pre><code>ALAssetRepresentation *representation = alAsset.defaultRepresentation;

NSURL *url          = representation.url;
AVAsset *asset      = [AVURLAsset URLAssetWithURL:url options:nil];

AVAssetExportSession *session =
[AVAssetExportSession exportSessionWithAsset:asset presetName:AVAssetExportPresetLowQuality];

session.outputFileType  = AVFileTypeQuickTimeMovie;
session.outputURL       = VIDEO_EXPORTING_URL;

[session exportAsynchronouslyWithCompletionHandler:^{

    if (session.status == AVAssetExportSessionStatusCompleted)
    {
        NSData *data    = [NSData dataWithContentsOfURL:session.outputURL];
    }

}];
</code></pre>

<p>请参考ALAssetRepresentation和AVAssetExportSession的文档</p>

<p>GitHub地址 <a href="https://github.com/chiunam/CTAssetsPickerController" title="url">https://github.com/chiunam/CTAssetsPickerController</a></p>
]]></content>
  </entry>
  
</feed>
