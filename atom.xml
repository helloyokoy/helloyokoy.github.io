<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[BryanFu Blog]]></title>
  <link href="http://helloyokoy.github.io/atom.xml" rel="self"/>
  <link href="http://helloyokoy.github.io/"/>
  <updated>2016-10-09T15:48:43+08:00</updated>
  <id>http://helloyokoy.github.io/</id>
  <author>
    <name><![CDATA[BryanFu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[vapor 用swift写服务端]]></title>
    <link href="http://helloyokoy.github.io/blog/vapor-swift-server/"/>
    <updated>2016-10-09T15:43:38+08:00</updated>
    <id>http://helloyokoy.github.io/blog/vapor-swift-server</id>
    <content type="html"><![CDATA[<p>自从苹果官方发布了一个 Swift 的 Linux 开源版本之后，服务端 Swift 终于迎来了一个令人激动的前景。我的好奇心终于无法克制，是时候尝试一下服务端 Swift 了！</p>

<p><a href="http://vapor.codes/">http://vapor.codes/</a></p>

<!--more-->

<p>官方教程如下</p>

<p><a href="https://vapor.github.io/documentation/getting-started/hello-world.html">https://vapor.github.io/documentation/getting-started/hello-world.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSPatch 介绍]]></title>
    <link href="http://helloyokoy.github.io/blog/jspatch/"/>
    <updated>2016-06-12T18:30:02+08:00</updated>
    <id>http://helloyokoy.github.io/blog/jspatch</id>
    <content type="html"><![CDATA[<h3 id="jspatch">什么是 JSPatch？</h3>

<p>JSPatch 是一个开源项目(<a href="https://github.com/bang590/JSPatch">Github链接</a>)，只需要在项目里引入极小的引擎文件，就可以使用 JavaScript 调用任何 Objective-C 的原生接口，替换任意 Objective-C 原生方法。目前主要用于下发 JS 脚本替换原生 Objective-C 代码，实时修复线上 bug。</p>

<!--more-->

<p>例如线上 APP 有一段代码出现 bug 导致 crash：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">@implementation JPTableViewController
</span><span class="line">...
</span><span class="line">- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
</span><span class="line">{
</span><span class="line">  NSString *content = self.dataSource[[indexPath row]];  //可能会超出数组范围导致crash
</span><span class="line">  JPViewController *ctrl = [[JPViewController alloc] initWithContent:content];
</span><span class="line">  [self.navigationController pushViewController:ctrl];
</span><span class="line">}
</span><span class="line">...
</span><span class="line">@end</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可以通过下发这样一段 JS 代码，覆盖掉原方法，修复这个 bug：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">//JS
</span><span class="line">defineClass("JPTableViewController", {
</span><span class="line">  //instance method definitions
</span><span class="line">  tableView_didSelectRowAtIndexPath: function(tableView, indexPath) {
</span><span class="line">    var row = indexPath.row()
</span><span class="line">    if (self.dataSource().length &gt; row) {  //加上判断越界的逻辑
</span><span class="line">      var content = self.dataArr()[row];
</span><span class="line">      var ctrl = JPViewController.alloc().initWithContent(content);
</span><span class="line">      self.navigationController().pushViewController(ctrl);
</span><span class="line">    }
</span><span class="line">  }
</span><span class="line">}, {})</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>除了修复 bug，JSPatch 也可以用于动态运营，实时修改线上 APP 行为，或动态添加功能。JSPatch 详细使用文档见 Github Wiki。</p>

<h3 id="jspatch-">什么是 JSPatch 平台？</h3>

<p>JSPatch 需要使用者有一个后台可以下发和管理脚本，并且需要处理传输安全等部署工作，JSPatch 平台帮你做了这些事，提供了脚本后台托管，版本管理，保证传输安全等功能，让你无需搭建一个后台，无需关心部署操作，只需引入一个 SDK 即可立即使用 JSPatch。</p>

<h3 id="jspatch-sdk--github-">JSPatch SDK 与 github 上开源代码的关系？</h3>

<p>Github 开源的是 JSPatch 核心代码，使用完全免费自由，若打算自己搭建后台下发 JSPatch 脚本，可以直接使用 github 上的核心代码，与 JSPatch 平台上的 SDK 无关。JSPatch 平台的 SDK 在核心代码的基础上增加了向平台请求脚本/传输解密/版本管理等功能，只用于这个平台。</p>

<h3 id="jspatch--1">JSPatch 平台速度和稳定性如何？</h3>

<p>通过 JSPatch 平台上传的脚本文件都会保存在七牛云存储上，客户端 APP 只跟七牛服务器通讯，支持高并发，CDN分布全国，速度和稳定性有保证。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[swift开发库]]></title>
    <link href="http://helloyokoy.github.io/blog/swiftkai-fa-ku/"/>
    <updated>2016-06-05T18:50:01+08:00</updated>
    <id>http://helloyokoy.github.io/blog/swiftkai-fa-ku</id>
    <content type="html"><![CDATA[<ol>
  <li>CryptoSwift</li>
</ol>

<p>swift加密库, 支持md5,sha1,sha224,sha256…</p>

<p>github地址: <a href="https://github.com/krzyzanowskim/CryptoSwift">https://github.com/krzyzanowskim/CryptoSwift</a></p>

<p><img src="http://cc.cocimg.com/api/uploads/20160524/1464085348448948.jpg" alt="jpg" /></p>

<!--more-->

<ol>
  <li>Kingfisher</li>
</ol>

<p>Kingfisher 是一个异步下载和缓存图片的库 类似于SDWebImage</p>

<p>只不过它是纯Swift的实现</p>

<p>github地址：<a href="https://github.com/onevcat/Kingfisher">https://github.com/onevcat/Kingfisher</a></p>

<p><img src="http://cc.cocimg.com/api/uploads/20160524/1464085373992263.jpg" alt="jpg" /></p>

<ol>
  <li>PeekPop</li>
</ol>

<p>3DTouch动画组件</p>

<p>Peek和Pop是iPhone 6S和6S+上新增的一个很棒的iOS特性，可以很方便地使用3D touch来预览内容。</p>

<p>github地址：<a href="https://github.com/marmelroy/PeekPop">https://github.com/marmelroy/PeekPop</a></p>

<p><img src="http://cc.cocimg.com/api/uploads/20160524/1464085502558697.jpg" alt="jpg" /></p>

<p><img src="http://cc.cocimg.com/api/uploads/20160524/1464085641814017.gif" alt="jpg" /></p>

<ol>
  <li>AlamofireObjectMapper</li>
</ol>

<p>将Alamofire JSON响应数据 转为swift对象</p>

<p>github地址：<a href="https://github.com/tristanhimmelman/AlamofireObjectMapper">https://github.com/tristanhimmelman/AlamofireObjectMapper</a></p>

<p><img src="http://cc.cocimg.com/api/uploads/20160524/1464085537803735.jpg" alt="jpg" /></p>

<ol>
  <li>RxAlamofire</li>
</ol>

<p>为Alamofire提供 函数响应式（FRP）调用接口</p>

<p>以优雅的方式使用Alamofire进行网络请求</p>

<p>github地址：<a href="https://github.com/RxSwiftCommunity/RxAlamofire">https://github.com/RxSwiftCommunity/RxAlamofire</a></p>

<p><img src="http://cc.cocimg.com/api/uploads/20160524/1464085656633375.jpg" alt="jpg" /></p>

<ol>
  <li>PromiseKit</li>
</ol>

<p>异步编程类库 提供了很多实用的异步函数 让异步编程更简单</p>

<p>github地址：<a href="https://github.com/mxcl/PromiseKit">https://github.com/mxcl/PromiseKit</a></p>

<p><img src="http://cc.cocimg.com/api/uploads/20160524/1464085675411831.jpg" alt="jpg" /></p>

<p><img src="http://cc.cocimg.com/api/uploads/20160524/1464085698363881.jpg" alt="jpg" /></p>

<ol>
  <li>EZSwiftExtensions</li>
</ol>

<p>对Swift标准库， Foundation， UIKit 提供了很多高级扩展函数</p>

<p>包括以下内容：</p>

<p>NSObject</p>

<p>Bool</p>

<p>Int</p>

<p>Double</p>

<p>String</p>

<p>NSAttritedString</p>

<p>Array</p>

<p>Dictioanry</p>

<p>NSDate</p>

<p>NSTimer</p>

<p>CGRect</p>

<p>UIViewController</p>

<p>UIView</p>

<p>UITextView</p>

<p>UILabel</p>

<p>UIImageView</p>

<p>UIImage</p>

<p>Block Objects</p>

<p>UIDevice</p>

<p>NSUserDefauts</p>

<p>NSURL</p>

<p>EZ function and variables</p>

<p>github地址：<a href="https://github.com/goktugyil/EZSwiftExtensions">https://github.com/goktugyil/EZSwiftExtensions</a></p>

<p><img src="http://cc.cocimg.com/api/uploads/20160524/1464085719198231.jpg" alt="jpg" /></p>

<p><img src="http://cc.cocimg.com/api/uploads/20160524/1464085745420071.jpg" alt="jpg" /></p>

<ol>
  <li>Aspects</li>
</ol>

<p>swift面向切面编程（AOP）库 【Method Swizzling】</p>

<p>github地址：<a href="https://github.com/steipete/Aspects">https://github.com/steipete/Aspects</a></p>

<p><img src="http://cc.cocimg.com/api/uploads/20160524/1464085770599317.jpg" alt="jpg" /></p>

<ol>
  <li>PermissionScope</li>
</ol>

<p>权限管理库 提供申请权限授权操作</p>

<p>githubd地址：<a href="https://github.com/nickoneill/PermissionScope">https://github.com/nickoneill/PermissionScope</a></p>

<p><img src="http://cc.cocimg.com/api/uploads/20160524/1464085793901381.jpg" alt="" /></p>

<p><img src="http://cc.cocimg.com/api/uploads/20160524/1464085821147167.gif" alt="" /></p>

<p>10、Alamofire</p>

<p>网络操作库 基本都知道</p>

<p>github地址：<a href="https://github.com/Alamofire/Alamofire">https://github.com/Alamofire/Alamofire</a></p>

<hr />
<p>转载自<a href="http://www.cocoachina.com/swift/20160525/16437.html">http://www.cocoachina.com/swift/20160525/16437.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[android frame]]></title>
    <link href="http://helloyokoy.github.io/blog/android-frame/"/>
    <updated>2016-05-26T14:47:35+08:00</updated>
    <id>http://helloyokoy.github.io/blog/android-frame</id>
    <content type="html"><![CDATA[<p><img src="http://img.blog.csdn.net/20160524172058595" alt="img" /></p>

<!--more-->

<ul>
  <li>缓存</li>
</ul>

<p>DiskLruCache:	Java实现基于LRU的磁盘缓存</p>

<ul>
  <li>图片加载</li>
</ul>

<p>Android Universal Image Loader:	一个强大的加载，缓存，展示图片的库</p>

<p>Picasso:	一个强大的图片下载与缓存的库</p>

<p>Fresco:	一个用于管理图像和他们使用的内存的库</p>

<p>Glide:	一个图片加载和缓存的库</p>

<ul>
  <li>图片处理</li>
</ul>

<p>Picasso-transformations	: 一个为Picasso提供多种图片变换的库</p>

<p>Glide-transformations:	一个为Glide提供多种图片变换的库</p>

<p>Android-gpuimage: 	基于OpenGL的Android过滤器</p>

<ul>
  <li>网络请求</li>
</ul>

<p>Android Async HTTP:	Android异步HTTP库</p>

<p>AndroidAsync: 	异步Socket，HTTP(客户端+服务器)，WebSocket，和socket.io库。基于NIO而不是线程。</p>

<p>OkHttp: 	一个Http与Http/2的客户端</p>

<p>Retrofit:	类型安全的Http客户端</p>

<p>Volley: Google推出的Android异步网络请求框架和图片加载框架</p>

<ul>
  <li>网络解析</li>
</ul>

<p>Gson:	一个Java序列化/反序列化库，可以将JSON和java对象互相转换</p>

<p>Jackson:	Jackson可以轻松地将Java对象转换成json对象和xml文档，同样也可以将json、xml转换成Java对象</p>

<p>Fastjson:	Java上一个快速的JSON解析器/生成器</p>

<p>HtmlPaser: 一种用来解析单个独立html或嵌套html的方式</p>

<p>Jsoup:	一个以最好的DOM，CSS和jQuery解析html的库</p>

<ul>
  <li>数据库</li>
</ul>

<p>OrmLite:	JDBC和Android的轻量级ORM java包</p>

<p>Sugar:	用超级简单的方法处理Android数据库</p>

<p>GreenDAO:	一种轻快地将对象映射到SQLite数据库的ORM解决方案</p>

<p>ActiveAndroid: 以活动记录方式为Android SQLite提供持久化</p>

<p>SQLBrite:	SQLiteOpenHelper 和ContentResolver的轻量级包装</p>

<p>Realm 移动数据库：一个SQLite和ORM的替换品</p>

<ul>
  <li>依赖注入</li>
</ul>

<p>ButterKnife:	将Android视图和回调方法绑定到字段和方法上</p>

<p>Dagger2:	一个Android和java快速依赖注射器。</p>

<p>AndroidAnotations:	快速安卓开发。易于维护</p>

<p>RoboGuice: Android平台的Google Guice</p>

<ul>
  <li>图表</li>
</ul>

<p>WilliamChart:	创建图表的Android库</p>

<p>HelloCharts:	兼容到API8的Android图表库</p>

<p>MPAndroidChart:	一个强大的Android图表视图/图形库</p>

<ul>
  <li>后台处理</li>
</ul>

<p>Tape:	一个轻快的，事务性的，基于文件的FIFO的库</p>

<p>Android Priority Job Queue: 一个专门为Android轻松调度任务的工作队列</p>

<ul>
  <li>事件总线</li>
</ul>

<p>EventBus:	安卓优化的事件总线，简化了活动、片段、线程、服务等的通信</p>

<p>Otto:	一个基于Guava的增强的事件总线</p>

<ul>
  <li>响应式编程</li>
</ul>

<p>RxJava: JVM上的响应式扩展</p>

<p>RxJavaJoins:	为RxJava提供Joins操作</p>

<p>RxAndroid: Android上的响应式扩展，在RxJava基础上添加了Android线程调度</p>

<p>RxBinding: 提供用RxJava绑定Android UI的API</p>

<p>Agera:	Android上的响应式编程</p>

<ul>
  <li>Log框架</li>
</ul>

<p>Logger: 简单，漂亮，强大的Android日志工具
Hugo: 在调试版本上注解的触发方法进行日志记录
Timber: 一个小的，可扩展的日志工具</p>

<ul>
  <li>测试框架</li>
</ul>

<p>Mockito:	Java编写的Mocking单元测试框架</p>

<p>Robotium:	Android UI 测试</p>

<p>Robolectric:	Android单元测试框架</p>

<p>Android自带很多测试工具：JUnit，Monkeyrunner，
UiAutomator，Espresso等</p>

<ul>
  <li>调试框架</li>
</ul>

<p>Stetho: 调试Android应用的桥梁，使得可以利用Chrome开发者工具进行调试</p>

<ul>
  <li>性能优化</li>
</ul>

<p>LeakCanary:	内存泄漏检测工具</p>

<p>ACRA:	Android应用程序崩溃报告</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[facebook redex]]></title>
    <link href="http://helloyokoy.github.io/blog/facebook-redex/"/>
    <updated>2016-04-15T17:08:14+08:00</updated>
    <id>http://helloyokoy.github.io/blog/facebook-redex</id>
    <content type="html"><![CDATA[<p><img src="http://img.blog.csdn.net/20160414083628369" alt="redex" /></p>

<p>去年，Facebook使用叫ReDex的字节码优化工具优化了他们的安卓应用的性能.</p>

<p>现在，ReDex已经开源了。安卓开发者可以免费地使用这个工具优化自己的应用。也可以将它用作其它安卓字节码优化工具的基础。</p>

<!--more-->

<p>在Facebook工程博客的一篇文章中指出，.DEX（安卓的可执行文件的形式）文件中的类，并不是按照应用启动时候加载的顺序加载的，而是按照编译工具指定的顺序加载的。</p>

<p>ReDex使用程序运行时产生的运行数据判定哪些类应该在.DEX文件中被优先载入。“想要最小化从内存中读取数据的次数，最好从启动的时候就载入字节码。”Facebook称，他们使用ReDex对应用优化之后，对存储的读取减少了25%，运行速度提高了30%。</p>

<p>关于这个速度，Facebook称，在存储较慢的老旧机器上效果非常明显，但是对于新的收集，性能也有明显的提高。Facebook在一台搭载了安卓4.4的全新的Nexus4上（有35%的安卓设备运行这个版本）测试，启动时间从2秒降至1.6秒。</p>

<p>Runtime分析可以用来删除无关的元数据和接口，但是开发者也可以自定义优化的行为。比如，有些方法即使没有直接被调用，也可以让它们保留下来。</p>

<p>这个优化是在应用编译完成之后进行的。也就是说，理论上你也可以结合其他优化，比如对Java进行虚拟机层的优化和语言的优化，像即将到来的Java 9的语言模块特性等等。</p>

<p>优化Java的字节码文件并不是一种新技术。还有其他的开源项目，例如ProGuard就可以通过删除运行时没有使用的代码进行优化。但是它并不能像ReDex那样按照执行顺序来重新组织类。</p>

<hr />
<p>原文链接：  <a href="http://www.infoworld.com/article/3055222/android/">http://www.infoworld.com/article/3055222/android/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PromiseKit: 同时支持Objective-C和Swift的Promise类库]]></title>
    <link href="http://helloyokoy.github.io/blog/promisekit/"/>
    <updated>2016-03-07T18:33:15+08:00</updated>
    <id>http://helloyokoy.github.io/blog/promisekit</id>
    <content type="html"><![CDATA[<p>现代开发需要高度异步，开发工具所提供的异步编程功能是否强大、方便而又令人愉悦？PromiseKit是一款贴心的iOS异步开发类库，更同时支持Objective-C和Swift的promises完整实现。</p>

<p><img src="http://img.blog.csdn.net/20160308094646006" alt="PromiseKit" /></p>

<!--more-->

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">UIApplication.sharedApplication().networkActivityIndicatorVisible = true
</span><span class="line">
</span><span class="line">when(fetchImage(), getLocation()).then { image, location in
</span><span class="line">    self.imageView.image = image;
</span><span class="line">    self.label.text = "Buy your cat a house in \(location)"
</span><span class="line">}.always {
</span><span class="line">    UIApplication.sharedApplication().networkActivityIndicatorVisible = false
</span><span class="line">}.error { error in
</span><span class="line">    UIAlertView(…).show()
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>PromiseKit有几个版本，其作者Max Howell在README中表示，如果你正在编写一个库，那么使用PromiseKit 1.6；如果正在开发一款App，那么PromiseKit 3则是最好的选择。</p>

<hr />
<p>GitHub地址：<a href="https://github.com/mxcl/PromiseKit">https://github.com/mxcl/PromiseKit</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emmet 学习]]></title>
    <link href="http://helloyokoy.github.io/blog/emmelearn/"/>
    <updated>2016-01-20T21:33:48+08:00</updated>
    <id>http://helloyokoy.github.io/blog/emmelearn</id>
    <content type="html"><![CDATA[<h4 id="section">介绍</h4>

<p>Emmet (前身为 Zen Coding) 是一个能大幅度提高前端开发效率的一个工具:</p>

<p><img src="http://cdn.w3cplus.com/cdn/farfuture/jXcuIfm_Jn4-aJO7c59GOzDUd1163lwYGIWK3PIX2oE/mtime:1421034939/sites/default/files/styles/print_image/public/baiyaimages/emmet-p1.jpg" alt="icon" /></p>

<p>基本上，大多数的文本编辑器都会允许你存储和重用一些代码块，我们称之为“片段”。虽然片段能很好地推动你得生产力，但大多数的实现都有这样一个缺点：你必须先定义你得代码片段，并且不能再运行时进行拓展。</p>

<p>Emmet把片段这个概念提高到了一个新的层次：你可以设置CSS形式的能够动态被解析的表达式，然后根据你所输入的缩写来得到相应的内容。Emmet是很成熟的并且非常适用于编写HTML/XML 和 CSS 代码的前端开发人员，但也可以用于编程语言。</p>

<h4 id="section-1">使用示例：</h4>

<p>在编辑器中输入缩写代码：ul&gt;li*5 ，然后按下拓展键（默认为tab），即可得到代码片段：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&lt;ul&gt;
</span><span class="line">    &lt;li&gt;&lt;/li&gt;
</span><span class="line">    &lt;li&gt;&lt;/li&gt;
</span><span class="line">    &lt;li&gt;&lt;/li&gt;
</span><span class="line">    &lt;li&gt;&lt;/li&gt;
</span><span class="line">    &lt;li&gt;&lt;/li&gt;
</span><span class="line">&lt;/ul&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<!--more-->

<h4 id="section-2">下载和安装</h4>

<p>Emmet为大部分流行的编辑器都提供了安装插件，下面是它们的下载链接：</p>

<ul>
  <li>Sublime Text</li>
  <li>Eclipse/Aptana</li>
  <li>TextMate</li>
  <li>Coda</li>
  <li>Espresso</li>
  <li>Chocolat</li>
  <li>Komodo Edit</li>
  <li>Notepad++</li>
  <li>PSPad</li>
  <li>textarea</li>
  <li>CodeMirror</li>
  <li>Brackets</li>
  <li>NetBeans</li>
  <li>Adobe Dreamweaver</li>
</ul>

<p>在线编辑器的支持：</p>

<ul>
  <li>JSFiddle</li>
  <li>JS Bin</li>
  <li>CodePen</li>
  <li>ICEcoder</li>
  <li>Divshot</li>
  <li>Codio</li>
</ul>

<p>第三方插件的支持</p>

<p>下面这些编辑器的插件都是由第三方开发者所提供的，所以可能并不支持所有Emmet的功能和特性。</p>

<ul>
  <li>SynWrite</li>
  <li>WebStorm</li>
  <li>PhpStorm</li>
  <li>Vim</li>
  <li>HTML-Kit</li>
  <li>HippoEDIT</li>
  <li>CodeLobster PHP Edition</li>
  <li>TinyMCE</li>
</ul>

<p>因为我也是Sublime Text的使用者，所以下面为大家介绍一下sublime text中Emmet的安装方法：</p>

<p>步骤一：首先你需要为sublime text安装Package Control组件：</p>

<ul>
  <li>按Ctrl+`调出sublime text的console</li>
  <li>粘贴以下代码到底部命令行并回车：</li>
</ul>

<p>import urllib2,os;pf=’Package Control.sublime-package’;ipp=sublime.installedpackagespath();os.makedirs(ipp) if not os.path.exists(ipp) else None;open(os.path.join(ipp,pf),’wb’).write(urllib2.urlopen(‘http://sublime.wbond.net/’+pf.replace(‘ ‘,’%20’)).read())</p>

<ul>
  <li>重启Sublime Text</li>
  <li>在Perferences-&gt;package settings中看到package control，则表示安装成功</li>
</ul>

<p>步骤二：使用Package Control安装Emmet插件：</p>

<ul>
  <li>按Ctrl+Shift+P命令板</li>
  <li>输入install然后选择install Package，然后输入emmet找到 Emmet Css Snippets，点击就可以自动完成安装。</li>
</ul>

<p><a href="http://www.w3cplus.com/tools/emmet-cheat-sheet.html">语法介绍</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[wax 简介]]></title>
    <link href="http://helloyokoy.github.io/blog/wax-profile/"/>
    <updated>2016-01-06T11:47:10+08:00</updated>
    <id>http://helloyokoy.github.io/blog/wax-profile</id>
    <content type="html"><![CDATA[<blockquote>
  <p>开源Wax，Alibaba技术团队接力支持
还在为iOS发版受伤吗，无需发布Ａｐｐ新版本，动态修复线上问题的解决方案来了！</p>
</blockquote>

<h3 id="section">发版的痛</h3>

<p>去年无线Allin时每次手淘发版都需要经过个多月的煎熬，哪怕一个很小的需求改动也需要等待整个发版节奏。发版周期长、发版需求多、发版难是手淘这种超级app的特点，而审核时间长、升级速度慢、升级率低是App Store的通病，线上bug更是每个app都避免不了痛，而对于手淘亿级的UV来说，哪怕一个小小的bug都会影响成千上万的用户。对于这些困扰了多年的问题，急需一种无需发版即可动态修复线上问题的解决方案！</p>

<p><img src="http://img3.tbcdn.cn/L1/461/1/02ca09b2d15db2db0de408395e0dba1788b969f2?spm=5176.blog1480.yqblogcon1.5.aDhNu5" alt="img" /></p>

<p>Wax是什么？</p>

<p><img src="http://img4.tbcdn.cn/L1/461/1/aae0800e99288ec9f9516877fe69af2ce665c215?spm=5176.blog1480.yqblogcon1.6.aDhNu5" alt="img" /></p>

<p>还记得当年火爆无比的游戏《愤怒的小鸟》吗，它就是基于Wax框架编写的。Wax把Lua脚本语言与原生Objective-C底层runtime结合起来，使得你可以在Lua里面使用任何Objective-C类及框架。</p>

<h3 id="wax">为什么选择Wax？</h3>
<p><img src="http://img3.tbcdn.cn/L1/461/1/f1cbbd6b9c23b38ccd7783a9cf281d36033843a8?spm=5176.blog1480.yqblogcon1.7.aDhNu5" alt="logo" /></p>

<p>Lua是一个简洁、轻量、可扩展的脚本语言，它的体积小、速度快，在大量的游戏中使用，以实现游戏的可配置和可更新。我们可以把这个思路借鉴到app的开发中，由于Lua需要预先绑定很多C函数才可在脚本中使用，所以单独使用Lua无法做到高复用性。而Wax连接了Lua与Objective-C runtime，使得我们可以在Lua里调用和替换任意类的方法，甚至新增类、方法。这样一来就能在app不发布新版的情况下，通过远程下载脚本的方式修复线上app里的bug、甚至新增一些功能。</p>

<!--more-->

<h3 id="wax-1">我们对Wax做了什么改造？</h3>

<p>线程安全</p>

<p>Wax本身的设计的场景是针对主线程的UI等逻辑，当我们去替换一个会多线程异步调用的方法时就会出现crash，这样一来就会削弱修复的场景，所以我们给Wax在合适的地方进行多线程保护使其具有线程安全特性。</p>

<p>64位适配</p>

<p>从iPhone5s开始，苹果推出了64位cpu架构，从今年2月份开始陆续要求app必须支持64位。
Lua字节码也有32位与64位编译区分，所以原来的Wax stdlib库在64位无法运行，我们修改原有的Lua字节码打包逻辑使其能在64位正常运行。
Wax的核心逻辑是替换函数，但原思路利用了32位函数入栈的特性，导致此方法在64位彻底失效。为此我们重新寻找新的函数替换思路，确保在64位也能正常运行。</p>

<p>block传递、调用</p>

<p>在Objective-C中，block以其简洁、易用的特性使用越来越普遍，而Wax虽有Lua的closure却没有支持Lua与OC 的block互通，这会使我们无法修复带有block的方法，为此我们对block的原理进行彻底的分析，同时绞尽脑汁利用32\64位函数参数入栈的特性，最终支持高达7个参数（当然，也可以支持更多）的block传递、调用。</p>

<p>get/set私有成员变量</p>

<p>Wax支持属性的get/set，但似乎忽略了私有成员变量，而我们的代码大量使用了私有成员变量，所以必须支持。庆幸的是Objective-C runtime有操作私有成员变量的API，因此我们在上层对NSObject扩展一些get/set的方法就可以支持私有成员变量的操作了。</p>

<p>常用C函数</p>

<p>要想在Lua里调用C函数，只需要在C代码里注册一下即可，所以看起来支持C函数很简单。但如果我们要把OC框架里的常用的几十、几百个函数都要支持呢？人肉一个个的写显然会显得乏力。所以我们将OC框架里的函数从文档拷贝出然后用脚本预处理，再使用tolua++进行自动代码生成、绑定，这样一来即使支持更多C函数也很简单了。</p>

<p>Lua代码调试</p>

<p>编写简单的Lua代码，只需要几个print打点日志就可以判断逻辑的执行是否正确。但如果是量多、复杂的代码时，只能打日志就会很痛苦了。所以我们将开源届比较强大的Lua调试器ZeroBraneStudio引进，再配合mobdebug远程调试脚本，适配到Wax，就实现了Lua代码在Wax框架中的调试，支持常用的断点、单步，当然还有更方便的观察变量、显示调用栈、控制台调用等</p>

<p>bug修复</p>

<p>由于Wax从2013年就不再维护，而我们的使用场景又多、又复杂，所以也会发现里面的不少bug，当然也做了修复。</p>

<p>Hotpatch封装</p>

<p>Wax提供了基础的Lua运行能力，但真正应用时，还需要很多准备工作。所以我们封装了TBHotaptchSDK提供Lua字节码编译、代码和资源打包、加密、签名、校验、运行等功能。同时还封装了TBHotaptchService提供patch包的版本控制、更新、下载等功能。</p>

<h3 id="section-1">使用情况</h3>

<p>iOS的Hotpatch从去年5月份研发上线以来共发布patch 180多次，意味着修复手淘线上bug 100多个。集团有天猫、聚划算、支付宝、闲鱼、UC等近20个app接入。足以证明Hotpatch的强烈需求以及Wax的价值。</p>

<h3 id="section-2">为什么回馈开源？</h3>

<p>Wax从2013年初就不再被原作者维护了，而64位的出现使得Wax完全不可用，业界也希望有人来解决Wax的众多问题。我们虽对Wax做了很多改造，但最初也是吸收开源届的贡献，秉承开源的奉献精神，将我们付出的劳动再回馈给开源，希望重新激活Wax社区，重新打造一个强大的Wax。
很荣幸Wax的原作者在其github上改写了主页，将链接指向了Alibaba，这是对我们的一种莫大的肯定。</p>

<p><img src="http://img2.tbcdn.cn/L1/461/1/6b96757c6dd225e1f36d033256a5e8665bce62ed?spm=5176.blog1480.yqblogcon1.8.aDhNu5" alt="img" /></p>

<p>源码网址：<a href="https://github.com/alibaba/wax">https://github.com/alibaba/wax</a></p>

<p>来源：阿里巴巴技术协会（ATA）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[xcode plugin ]]></title>
    <link href="http://helloyokoy.github.io/blog/xcode-plugin/"/>
    <updated>2015-12-10T16:17:52+08:00</updated>
    <id>http://helloyokoy.github.io/blog/xcode-plugin</id>
    <content type="html"><![CDATA[<p>新版 xcode 插件 不能用 解决方法</p>

<pre><code>find ~/Library/Application\ Support/Developer/Shared/Xcode/Plug-ins -name Info.plist -maxdepth 3 | xargs -I{} defaults write {} DVTPlugInCompatibilityUUIDs -array-add `defaults read /Applications/Xcode.app/Contents/Info.plist DVTPlugInCompatibilityUUID`
</code></pre>

<p>xcode 插件管理器</p>

<pre><code>Alcatraz
</code></pre>

<p>xcode 常用插件</p>

<pre><code>xtodo 
fuzzyautocompelte
codepilot
xcodeboost
xalign
KSimageNamed
xcolors
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS self 和 下划线 _ 区别]]></title>
    <link href="http://helloyokoy.github.io/blog/ios-self/"/>
    <updated>2015-12-05T15:48:50+08:00</updated>
    <id>http://helloyokoy.github.io/blog/ios-self</id>
    <content type="html"><![CDATA[<pre><code>@property (nonatomic,copy) NSString *propertyName;
</code></pre>

<p>self.propertyName是对属性的访问；使用_propertyName是对局部变量的访问。</p>

<p>所有被声明为属性的成员，在iOS5 之前需要使用编译器指令@synthesize 来告诉编译器帮助生成属性的getter,setter方法。
之后这个指令可以不用人为指定了，默认情况下编译器会帮我们生成。</p>

<p>编译器在生成getter,setter方法时是有优先级的，它首先查找当前的类中用户是否已定义属性的getter,setter方法，如果有，则编译器会跳过，不会再生成，使用用户定义的方法。</p>

<p>也就是说你在使用self.propertyName 时是在调用一个getter方法。</p>

<pre><code>self.propertyName 会让计数器＋1;_propertyName却不会。  

_propertyName是类似于self-&gt;_propertyName。
</code></pre>

<p>用self.propertyName 是更好的选择，因为这样可以兼容懒加载，同时也避免了使用下划线的时候忽视了self这个指针，后者容易在block中造成循环引用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Grape 构建 RESTful API]]></title>
    <link href="http://helloyokoy.github.io/blog/grape-on-rails/"/>
    <updated>2015-12-04T11:32:56+08:00</updated>
    <id>http://helloyokoy.github.io/blog/grape-on-rails</id>
    <content type="html"><![CDATA[<p><img src="http://blog.lanvige.com/uploads/ruby/grape-logo.png" alt="img" /></p>

<p>Rails中构建API的方式有很多种，Grape因性能而被推荐，其可构建于任何Rack上，仍建议使用Rails作为载体，来构建Grape，会非常省心。</p>

<h3 id="section">安装配置</h3>

<p>首先确保安装：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">## Platform
</span><span class="line">gem 'rails', '4.2.0'
</span><span class="line">
</span><span class="line">## RESTful API Engine
</span><span class="line">gem 'grape'
</span><span class="line">gem 'grape-entity'</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-1">组织架构</h3>

<h4 id="section-2">目录结构</h4>

<pre><code>api
├── api.rb
└── v1
	├── base.rb
	├── entities
	│   ├── base.rb
	│   └── user_basic.rb
	├── helpers
	│   ├── page_helper.rb
	│   └── user_helper.rb
	├── base_api.rb
	└── users_api.rb
</code></pre>

<p>base.rb 中定义着API的版本、输出格式，及挂载更多API。
users_api.rb 就像controller，对每个resources都进行分开写，然后在base.rb中进行mount
entities 使用grape-entity，控制输出中的对象及格式。
helper 放置常用的helper，像分页，用户验证。</p>

<!--more-->

<p>entities/user_basic.rb</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class=""><span class="line">module V1
</span><span class="line">  module Entities
</span><span class="line">    class UserBasic &lt; Entities::Base
</span><span class="line">      format_with(:iso8601) { |dt| dt.iso8601 }
</span><span class="line">
</span><span class="line">      expose :id
</span><span class="line">      expose :name
</span><span class="line">      # 如果需要输出层级对象，可以按这种方式
</span><span class="line">      # expose :company, using: Entities::Company
</span><span class="line">
</span><span class="line">      # 日期、时间一律使用ISO 8601
</span><span class="line">      expose :created_at, format_with: :iso8601
</span><span class="line">
</span><span class="line">      # with_options(format_with: :iso8601) do
</span><span class="line">      #   expose :created_at
</span><span class="line">      # end
</span><span class="line">    end
</span><span class="line">  end
</span><span class="line">end</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>base.rb</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">module V1
</span><span class="line">  class Base &lt; Grape::API
</span><span class="line">    version      'v1'
</span><span class="line">    format       :json
</span><span class="line">
</span><span class="line">    # Mount the APIs
</span><span class="line">    mount UsersApi
</span><span class="line">  end
</span><span class="line">end</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-3">挂载</h4>

<p>routes.rb</p>

<pre><code>mount V1::API =&gt; '/'
</code></pre>

<h4 id="section-4">测试</h4>

<p><a href="http://localhost:3000/v1/users">http://localhost:3000/v1/users</a></p>

<h3 id="best-practices">Best Practices</h3>
<p><a href="http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api">Best Practices for Designing a Pragmatic RESTful API Vinay Sahni</a></p>

<p><a href="http://www.restapitutorial.com/">A RESTful Tutorial</a></p>

<p>非常推荐 Vinay Sahni的实践，说明的非常清晰，而 RESTful Tutorial 也是推荐，但Wrapper一节不作推荐。</p>

<h3 id="doc-with-swagger-ui">Doc with Swagger UI</h3>

<h4 id="grape-swagger">grape-swagger</h4>

<p>routes.rb</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">gem 'grape-swagger'
</span><span class="line">routes.rb
</span><span class="line">
</span><span class="line">add_swagger_documentation
</span><span class="line">./config/initializers/swagger.rb
</span><span class="line">
</span><span class="line">
</span><span class="line">GrapeSwaggerRails.options.url      = '/swagger_doc.json'
</span><span class="line">GrapeSwaggerRails.options.app_url  = 'http://swagger.wordnik.com'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><a href="http://localhost:3000/swagger_doc.json">http://localhost:3000/swagger_doc.json</a></p>

<h4 id="grapeswaggerrails">GrapeSwaggerRails</h4>

<p>./config/initializers/swagger.rb</p>

<pre><code>gem 'grape-swagger-rails' ./config/initializers/swagger.rb

mount GrapeSwaggerRails::Engine +&gt; '/docs'
</code></pre>

<h3 id="section-5">分页</h3>

<p>类库有will_paginate和<a href="https://github.com/amatsuda/kaminari">Kaminari</a>，示例中选后者。</p>

<p>和Grape结合部分，使用 <a href="https://github.com/davidcelis/api-pagination#grape">api-pagination</a>。</p>

<p>测试：</p>

<p><a href="http://localhost:3000/v1/users?page=2&amp;per_page=2">http://localhost:3000/v1/users?page=2&amp;per_page=2</a></p>

<p>分页有很多种定义方式，建议采用RFC-5988  中所定义。（如上链接）</p>

<h3 id="jsend">JSend</h3>

<p><a href="http://labs.omniti.com/labs/jsend">http://labs.omniti.com/labs/jsend</a></p>

<p>RESTful Tutorial 中推荐过JSend，而之前项目中也使用了类似的格式，就是在数据源外包一层，并加上其它的一些信息，像code, status, message。</p>

<p>这些信息主要是应用于JSONP。<a href="https://github.com/bolasblack/http-api-guide#json-p">建议用该方式</a>：，或者是一些无法获取或处理HTTP Header的JS类库。</p>

<h3 id="partial-response">Partial Response</h3>

<p>Grape中实现参见该文：<a href="http://www.nicolasgarnil.me/blog/2013/crafting-ruby-grape-apis-partial-response-part1/">Crafting Ruby Grape APIs: Partial Response</a></p>

<h3 id="error-">Error 处理</h3>

<p>REF::</p>

<p><a href="https://github.com/bolasblack/http-api-guide">HTTP 接口设计指北</a></p>

<hr />

<p>转载自 <a href="http://blog.lanvige.com/2015/01/13/build-restful-api-with-grape/?utm_source=tuicool&amp;utm_medium=referral">http://blog.lanvige.com/2015/01/13/build-restful-api-with-grape/?utm_source=tuicool&amp;utm_medium=referral</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Charles]]></title>
    <link href="http://helloyokoy.github.io/blog/charles/"/>
    <updated>2015-11-26T21:34:03+08:00</updated>
    <id>http://helloyokoy.github.io/blog/charles</id>
    <content type="html"><![CDATA[<p><img src="http://blog.devtang.com/images/charles-promo.png" alt="ad" /></p>

<p>Charles 正版<a href="http://item.taobao.com/item.htm?&amp;id=524230901640">五折优惠活动</a>（限时：2015 年 11 月 14 日 – 30 日），仅限中国区购买，点击购买。在活动期结束后，价格将从 169 元上涨到 199 元。</p>

<h3 id="section">简介</h3>

<p><img src="http://blog.devtang.com/images/charles-logo.png" alt="img" /></p>

<p>Charles 是在 Mac 下常用的网络封包截取工具，在做 移动开发时，我们为了调试与服务器端的网络通讯协议，常常需要截取网络封包来分析。</p>

<p><a href="http://blog.devtang.com/images/charles-logo.png">Charles</a> 通过将自己设置成系统的网络访问代理服务器，使得所有的网络访问请求都通过它来完成，从而实现了网络封包的截取和分析。</p>

<p>除了在做移动开发中调试端口外，Charles 也可以用于分析第三方应用的通讯协议。配合 Charles 的 SSL 功能，Charles 还可以分析 Https 协议。</p>

<p>Charles 是收费软件，可以免费试用 30 天。试用期过后，未付费的用户仍然可以继续使用，但是每次使用时间不能超过 30 分钟，并且启动时将会有 10 秒种的延时。因此，该付费方案对广大用户还是相当友好的，即使你长期不付费，也能使用完整的软件功能。只是当你需要长时间进行封包调试时，会因为 Charles 强制关闭而遇到影响。</p>

<p>Charles 主要的功能包括：</p>

<p>截取 Http 和 Https 网络封包。</p>

<ol>
  <li>支持重发网络请求，方便后端调试。</li>
  <li>支持修改网络请求参数。</li>
  <li>支持网络请求的截获并动态修改。</li>
  <li>支持模拟慢速网络。</li>
</ol>

<!--more-->

<h3 id="charles">安装 Charles</h3>

<p>去 Charles 的官方网站（<a href="http://www.charlesproxy.com">http://www.charlesproxy.com</a>）下载最新版的 Charles 安装包，是一个 dmg 后缀的文件。打开后将 Charles 拖到 Application 目录下即完成安装。</p>

<h3 id="charles-">将 Charles 设置成系统代理</h3>

<p>之前提到，Charles 是通过将自己设置成代理服务器来完成封包截取的，所以使用 Charles 的第一步是将其设置成系统的代理服务器。</p>

<p>启动 Charles 后，第一次 Charles 会请求你给它设置系统代理的权限。你可以输入登录密码授予 Charles 该权限。你也可以忽略该请求，然后在需要将 Charles 设置成系统代理时，选择菜单中的 “Proxy” –&gt; “Mac OS X Proxy” 来将 Charles 设置成系统代理。如下所示：</p>

<p><img src="http://blog.devtang.com/images/charles-pro-3.png" alt="img" /></p>

<p>之后，你就可以看到源源不断的网络请求出现在 Charles 的界面中。</p>

<p>需要注意的是，Chrome 和 Firefox 浏览器默认并不使用系统的代理服务器设置，而 Charles 是通过将自己设置成代理服务器来完成封包截取的，所以在默认情况下无法截取 Chrome 和 Firefox 浏览器的网络通讯内容。如果你需要截取的话，在 Chrome 中设置成使用系统的代理服务器设置即可，或者直接将代理服务器设置成 127.0.0.1:8888 也可达到相同效果。</p>

<p>Charles 主界面介绍</p>

<p><img src="http://blog.devtang.com/images/charles-pro-4.png" alt="img" /></p>

<p>Charles 主要提供两种查看封包的视图，分别名为 “Structure” 和 “Sequence”。</p>

<ol>
  <li>Structure 视图将网络请求按访问的域名分类。</li>
  <li>Sequence 视图将网络请求按访问的时间排序。</li>
</ol>

<p>大家可以根据具体的需要在这两种视图之前来回切换。请求多了有些时候会看不过来，Charles 提供了一个简单的 Filter 功能，可以输入关键字来快速筛选出 URL 中带指定关键字的网络请求。</p>

<p>对于某一个具体的网络请求，你可以查看其详细的请求内容和响应内容。如果请求内容是 POST 的表单，Charles 会自动帮你将表单进行分项显示。如果响应内容是 JSON 格式的，那么 Charles 可以自动帮你将 JSON 内容格式化，方便你查看。如果响应内容是图片，那么 Charles 可以显示出图片的预览。</p>

<h3 id="section-1">过滤网络请求</h3>

<p>通常情况下，我们需要对网络请求进行过滤，只监控向指定目录服务器上发送的请求。对于这种需求，以下几种办法：</p>

<p>方法一：在主界面的中部的 Filter 栏中填入需要过滤出来的关键字。例如我们的服务器的地址是：http://yuantiku.com , 那么只需要在 Filter 栏中填入 yuantiku 即可。</p>

<p>方法二：在 Charles 的菜单栏选择 “Proxy”–&gt;“Recording Settings”，然后选择 Include 栏，选择添加一个项目，然后填入需要监控的协议，主机地址，端口号。这样就可以只截取目标网站的封包了。如下图所示：</p>

<p><img src="http://blog.devtang.com/images/charles-filter-setting.jpg" alt="img" /></p>

<p>通常情况下，我们使用方法一做一些临时性的封包过滤，使用方法二做一些经常性的封包过滤。</p>

<p>方法三：在想过滤的网络请求上右击，选择 “Focus”，之后在 Filter 一栏勾选上 Focussed 一项，如下图所示：</p>

<p><img src="http://blog.devtang.com/images/charles-focus.png" alt="img" /></p>

<p>这种方式可以临时性的，快速地过滤出一些没有通过关键字的一类网络请求。</p>

<h3 id="iphone-">截取 iPhone 上的网络封包</h3>

<p>Charles 通常用来截取本地上的网络封包，但是当我们需要时，我们也可以用来截取其它设备上的网络请求。下面我就以 iPhone 为例，讲解如何进行相应操作。</p>

<p>Charles 上的设置</p>

<p>要截取 iPhone 上的网络请求，我们首先需要将 Charles 的代理功能打开。在 Charles 的菜单栏上选择 “Proxy”–&gt;“Proxy Settings”，填入代理端口 8888，并且勾上 “Enable transparent HTTP proxying” 就完成了在 Charles 上的设置。如下图所示:</p>

<p><img src="http://blog.devtang.com/images/charles-proxy-setting.jpg" alt="img" /></p>

<p>iPhone 上的设置</p>

<p>首先我们需要获取 Charles 运行所在电脑的 IP 地址，Charles 的顶部菜单的 “Help”–&gt;“Local IP Address”，即可在弹出的对话框中看到 IP 地址，如下图所示：</p>

<p><img src="http://blog.devtang.com/images/charles-local-ip.png" alt="img" /></p>

<p>在 iPhone 的 “ 设置 ”–&gt;“ 无线局域网 ” 中，可以看到当前连接的 wifi 名，通过点击右边的详情键，可以看到当前连接上的 wifi 的详细信息，包括 IP 地址，子网掩码等信息。在其最底部有「HTTP 代理」一项，我们将其切换成手动，然后填上 Charles 运行所在的电脑的 IP，以及端口号 8888，如下图所示：</p>

<p><img src="http://blog.devtang.com/images/charles-iphone-setting.jpg" alt="img" /></p>

<p>设置好之后，我们打开 iPhone 上的任意需要网络通讯的程序，就可以看到 Charles 弹出 iPhone 请求连接的确认菜单（如下图所示），点击 “Allow” 即可完成设置。</p>

<h3 id="https-">截取 Https 通讯信息</h3>

<p>安装证书</p>

<p>如果你需要截取分析 Https 协议相关的内容。那么需要安装 Charles 的 CA 证书。具体步骤如下。</p>

<p>首先我们需要在 Mac 电脑上安装证书。点击 Charles 的顶部菜单，选择 “Help” –&gt; “SSL Proxying” –&gt; “Install Charles Root Certificate”，然后输入系统的帐号密码，即可在 KeyChain 看到添加好的证书。如下图所示：</p>

<p><img src="http://blog.devtang.com/images/charles-pro-1.png" alt="img" /></p>

<p>需要注意的是，即使是安装完证书之后，Charles 默认也并不截取 Https 网络通讯的信息，如果你想对截取某个网站上的所有 Https 网络请求，可以在该请求上右击，选择 SSL proxy，如下图所示：</p>

<p><img src="http://blog.devtang.com/images/charles-ssl-add-host.jpg" alt="img" /></p>

<p>这样，对于该 Host 的所有 SSL 请求可以被截取到了。</p>

<h3 id="https--1">截取移动设备中的 Https 通讯信息</h3>

<p>如果我们需要在 iOS 或 Android 机器上截取 Https 协议的通讯内容，还需要在手机上安装相应的证书。点击 Charles 的顶部菜单，选择 “Help” –&gt; “SSL Proxying” –&gt; “Install Charles Root Certificate on a Mobile Device or Remote Browser”，然后就可以看到 Charles 弹出的简单的安装教程。如下图所示：</p>

<p><img src="http://blog.devtang.com/images/charles-pro-2.png" alt="img" /></p>

<p>按照我们之前说的教程，在设备上设置好 Charles 为代理后，在手机浏览器中访问地址：http://charlesproxy.com/getssl，即可打开证书安装的界面，安装完证书后，就可以截取手机上的 Https 通讯内容了。不过同样需要注意，默认情况下 Charles 并不做截取，你还需要在要截取的网络请求上右击，选择 SSL proxy 菜单项。</p>

<h3 id="section-2">模拟慢速网络</h3>

<p>在做移动开发的时候，我们常常需要模拟慢速网络或者高延迟的网络，以测试在移动网络下，应用的表现是否正常。Charles 对此需求提供了很好的支持。</p>

<p>在 Charles 的菜单上，选择 “Proxy”–&gt;“Throttle Setting” 项，在之后弹出的对话框中，我们可以勾选上 “Enable Throttling”，并且可以设置 Throttle Preset 的类型。如下图所示：</p>

<p><img src="http://blog.devtang.com/images/charles-throttle-setting.jpg" alt="img" /></p>

<p>如果我们只想模拟指定网站的慢速网络，可以再勾选上图中的 “Only for selected hosts” 项，然后在对话框的下半部分设置中增加指定的 hosts 项即可。</p>

<h3 id="section-3">修改网络请求内容</h3>

<p>有些时候为了调试服务器的接口，我们需要反复尝试不同参数的网络请求。Charles 可以方便地提供网络请求的修改和重发功能。只需要在以往的网络请求上点击右键，选择 “Edit”，即可创建一个可编辑的网络请求。如下所示：</p>

<p><img src="http://blog.devtang.com/images/charles-edit.png" alt="img" /></p>

<p>我们可以修改该请求的任何信息，包括 URL 地址、端口、参数等，之后点击 “Execute” 即可发送该修改后的网络请求（如下图所示）。Charles 支持我们多次修改和发送该请求，这对于我们和服务器端调试接口非常方便，如下图所示：</p>

<p><img src="http://blog.devtang.com/images/charles-execute.png" alt="img" /></p>

<h3 id="section-4">给服务器做压力测试</h3>

<p>我们可以使用 Charles 的 Repeat 功能来简单地测试服务器的并发处理能力，方法如下。</p>

<p>我们在想打压的网络请求上（POST 或 GET 请求均可）右击，然后选择 「Repeat Advanced」菜单项，如下所示：</p>

<p><img src="http://blog.devtang.com/images/charles-repeat-1.png" alt="img" /></p>

<p>接着我们就可以在弹出的对话框中，选择打压的并发线程数以及打压次数，确定之后，即可开始打压。</p>

<p><img src="http://blog.devtang.com/images/charles-repeat-2.png" alt="img" /></p>

<p>悄悄说一句，一些写得很弱的投票网站，也可以用这个办法来快速投票。当然，我也拿 Charles 的 Repeat 功能给一些诈骗的钓鱼网站喂了不少垃圾数据，上次不小心还把一个钓鱼网站的数据库打挂了，嗯，请叫我雷锋。</p>

<h3 id="section-5">修改服务器返回内容</h3>

<p>有些时候我们想让服务器返回一些指定的内容，方便我们调试一些特殊情况。例如列表页面为空的情况，数据异常的情况，部分耗时的网络请求超时的情况等。如果没有 Charles，要服务器配合构造相应的数据显得会比较麻烦。这个时候，使用 Charles 相关的功能就可以满足我们的需求。</p>

<p>根据具体的需求，Charles 提供了 Map 功能、 Rewrite 功能以及 Breakpoints 功能，都可以达到修改服务器返回内容的目的。这三者在功能上的差异是：</p>

<ol>
  <li>Map 功能适合长期地将某一些请求重定向到另一个网络地址或本地文件。</li>
  <li>Rewrite 功能适合对网络请求进行一些正则替换。</li>
  <li>Breakpoints 功能适合做一些临时性的修改。</li>
</ol>

<h3 id="map-">Map 功能</h3>

<p>Charles 的 Map 功能分 Map Remote 和 Map Local 两种，顾名思义，Map Remote 是将指定的网络请求重定向到另一个网址请求地址，Map Local 是将指定的网络请求重定向到本地文件。</p>

<p>在 Charles 的菜单中，选择 “Tools”–&gt;“Map Remote” 或 “Map Local” 即可进入到相应功能的设置页面。</p>

<p><img src="http://blog.devtang.com/images/charles-map.png" alt="img" /></p>

<p>对于 Map Remote 功能，我们需要分别填写网络重定向的源地址和目的地址，对于不需要限制的条件，可以留空。下图是一个示例，我将所有 ytk1.yuanku.ws（测试服务器）的请求重定向到了 www.yuantiku.com（线上服务器）。</p>

<p><img src="http://blog.devtang.com/images/charles-map-remote.png" alt="img" /></p>

<p>对于 Map Local 功能，我们需要填写的重定向的源地址和本地的目标文件。对于有一些复杂的网络请求结果，我们可以先使用 Charles 提供的 “Save Response…” 功能，将请求结果保存到本地（如下图所示），然后稍加修改，成为我们的目标映射文件。</p>

<p><img src="http://blog.devtang.com/images/charles-save-response.png" alt="img" /></p>

<p>下图是一个示例，我将一个指定的网络请求通过 Map Local 功能映射到了本地的一个经过修改的文件中。</p>

<p><img src="http://blog.devtang.com/images/charles-map-local.png" alt="img" /></p>

<h3 id="rewrite-">Rewrite 功能</h3>

<p>Rewrite 功能功能适合对某一类网络请求进行一些正则替换，以达到修改结果的目的。</p>

<p>例如，我们的客户端有一个 API 请求是获得用户昵称，而我当前的昵称是 “tangqiaoboy”，如下所示：</p>

<p><img src="http://blog.devtang.com/images/charles-rewrite-1.jpeg" alt="img" /></p>

<p>我们想试着直接修改网络返回值，将 tangqiaoboy 换成成 iosboy。于是我们启用 Rewrite 功能，然后设置如下的规则：</p>

<p><img src="http://blog.devtang.com/images/charles-rewrite-2.png" alt="img" /></p>

<p>完成设置之后，我们就可以从 Charles 中看到，之后的 API 获得的昵称被自动 Rewrite 成了 iosboy，如下图所示：</p>

<p><img src="http://blog.devtang.com/images/charles-rewrite-3.png" alt="img" /></p>

<h3 id="breakpoints-">Breakpoints 功能</h3>

<p>上面提供的 Rewrite 功能最适合做批量和长期的替换，但是很多时候，我们只是想临时修改一次网络请求结果，这个时候，使用 Rewrite 功能虽然也可以达到目的，但是过于麻烦，对于临时性的修改，我们最好使用 Breakpoints 功能。</p>

<p>Breakpoints 功能类似我们在 Xcode 中设置的断点一样，当指定的网络请求发生时，Charles 会截获该请求，这个时候，我们可以在 Charles 中临时修改网络请求的返回内容。</p>

<p>下图是我们临时修改获取用户信息的 API，将用户的昵称进行了更改，修改完成后点击 “Execute” 则可以让网络请求继续进行。</p>

<p><img src="http://blog.devtang.com/images/charles-breakpoint.png" alt="img" /></p>

<p>需要注意的是，使用 Breakpoints 功能将网络请求截获并修改过程中，整个网络请求的计时并不会暂停，所以长时间的暂停可能导致客户端的请求超时。</p>

<hr />
<p>文章装载自 <a href="http://blog.devtang.com/blog/2015/11/14/charles-introduction/">唐巧个人博客</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NSLog 和 LLDB]]></title>
    <link href="http://helloyokoy.github.io/blog/nslog-and-lldb/"/>
    <updated>2015-11-26T18:38:31+08:00</updated>
    <id>http://helloyokoy.github.io/blog/nslog-and-lldb</id>
    <content type="html"><![CDATA[<h3 id="section">前言</h3>

<p>打Log是我们debug时最简单朴素的方法，NSLog对于objc开发就像printf对于c一样重要。但在使用NSLog打印大量Log，尤其是在游戏开发时（如每一帧都打印数据），NSLog会明显的拖慢程序的运行速度（游戏帧速严重下滑）。本文探究了一下NSLog如此之慢的原因，并尝试使用lldb断点调试器替代NSLog进行debug log。</p>

<h3 id="section-1">小测试</h3>

<p>测试下分别使用NSLog和printf打印10000次耗费的时间。CFAbsoluteTimeGetCurrent()函数可以打印出当前的时间戳，精度还是很高的，于是乎测试代码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">CFAbsoluteTime startNSLog = CFAbsoluteTimeGetCurrent(); 
</span><span class="line">for (int i = 0; i &lt; 10000; i++) { 
</span><span class="line">    NSLog(@"%d", i); 
</span><span class="line">} 
</span><span class="line">CFAbsoluteTime endNSLog = CFAbsoluteTimeGetCurrent(); 
</span><span class="line"> 
</span><span class="line">CFAbsoluteTime startPrintf = CFAbsoluteTimeGetCurrent(); 
</span><span class="line">for (int i = 0; i &lt; 10000; i++) { 
</span><span class="line">    printf("%d\n", i); 
</span><span class="line">} 
</span><span class="line">CFAbsoluteTime endPrintf = CFAbsoluteTimeGetCurrent(); 
</span><span class="line">
</span><span class="line">NSLog(@"NSLog time: %lf, printf time: %lf", endNSLog - startNSLog, endPrintf - startPrintf);</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这个时间和机器肯定有关系，只看它们的差别就好。为了全面性，尝试了三种平台：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">NSLog time: 4.985445, printf time: 0.084193 // mac 
</span><span class="line">NSLog time: 5.562460, printf time: 0.019408 // 模拟器 
</span><span class="line">NSLog time: 10.471490, printf time: 0.090503 // 真机调试(iphone5)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可以发现，在mac上（模拟器其实也算是mac吧）速度差别达到了60倍左右，而真机调试甚至达到了离谱的100多倍。</p>

<p><!--more--></p>

<h3 id="section-2">探究原因</h3>

<p>基本上这种事情一定可以在Apple文档中找到，看NSLog的文档，第一句话就说：Logs an error message to the Apple System Log facility.，所以首先，NSLog就不是设计作为普通的debug log的，而是error log；其次，NSLog也并非是printf的简单封装，而是Apple System Log(后面简称ASL)的封装。</p>

<h3 id="asl">ASL</h3>

<p>ASL是个啥？从官方手册上，或者从终端执行man 3 asl都可以看到说明：</p>

<blockquote>
  <p>These routines provide an interface to the Apple System Log facility. They are intended to be a replacement for the syslog(3) API, which will continue to be supported for backwards compatibility.</p>
</blockquote>

<p>大概就是个系统级别的log工具吧，syslog的替代版，提供了一系列强大的log功能。不过一般我们接触不到，NSLog就对它提供了高层次的封装，如这篇文档所提到的：</p>

<blockquote>
  <p>You can use two interfaces in OS X to log messages: ASL and Syslog. You can also use a number of higher-level approaches such as NSLog. However, because most daemons are not linked against Foundation or the Application Kit, the low-level APIs are often more appropriate</p>
</blockquote>

<p>一些底层相关的守护进程(deamons)不会link如Foundation等高层框架，所以asl用在这儿正合适；而对于应用层的用NSLog。</p>

<p>在CocoaLumberjack的文档中也说了NSLog效率低下的问题：</p>

<blockquote>
  <p>NSLog does 2 things:</p>
</blockquote>

<blockquote>
  <ul>
    <li>It writes log messages to the Apple System Logging (asl) facility. This allows log messages to show up in Console.app.</li>
  </ul>
</blockquote>

<blockquote>
  <ul>
    <li>It also checks to see if the application’s stderr stream is going to a terminal (such as when the application is being run via Xcode). If so it writes the log message to stderr (so that it shows up in the Xcode console).</li>
  </ul>
</blockquote>

<blockquote>
  <p>To send a log message to the ASL facility, you basically open a client connection to the ASL daemon and send the message. BUT - each thread must use a separate client connection. So, to be thread safe, every time NSLog is called it opens a new asl client connection, sends the message, and then closes the connection.</p>
</blockquote>

<p>意识大概是说，NSLog会向ASL写log，同时向Terminal写log，而且同时会出现在Console.app中（Mac自带软件，用NSLog打出的log在其中全部可见）；不仅如此，每一次NSLog都会新建一个ASL client并向ASL守护进程发起连接，log之后再关闭连接。所以说，当这个过程出现N次时，消耗大量资源导致程序变慢也就不奇怪了。</p>

<h3 id="section-3">时间和进程信息</h3>

<p>主要原因已经找到，还有个值得注意的问题是NSLog每次会将当前的系统时间，进程和线程信息等作为前缀也打印出来，如：</p>

<pre><code>2012-34-56 12:34:56.789 XXXXXXXX[36818:303] xxxxxx
</code></pre>

<p>当然这些也可能是作为ASL的参数创建的，但不论如何，一定是有消耗的（虽然这个prefix十有八九不是我们需要的看到的）</p>

<h3 id="section-4">如何是好</h3>

<p>NSLog有这样的消耗问题，那该怎么办呢？</p>

<ol>
  <li>
    <p>拒绝残留的Log。现在项目都是多人共同开发，我们应该只把Log作为错误日志或者重要信息的日志使用，commit前请把自己调试的log去掉（尤其是在循环里写log的小伙伴，简直不能一起快乐的玩耍了）</p>
  </li>
  <li>
    <p>release版本中消除Log。debug归debug，再慢也不能波及到release版本，用预编译宏过滤下就好。</p>
  </li>
  <li>
    <p>是时候换个Log系统了，如CocoaLumberjack，自建一个简单的当然也挺好（其实为了项目需要自己也写了个小log系统，实现可以按名字和级别显示log和一些扩展功能，以后有机会分享下）</p>
  </li>
</ol>

<p>不过个人认为debug时最好还是用调试器进行调试（尤其是只需要知道某个变量值的时候）</p>

<h3 id="lldblog">尝试使用断点+lldb调试器打Log</h3>

<p>关于强大的lldb调试器用一个专题来讲都是应该，现在只了解一些皮毛，不过就算皮毛的功能也可以替代NSLog这种方法进行调试了，重要的一点是：使用断点log不需要重新编译工程，况且和Xcode已经结合的很好，在此先只说打Log这件事。</p>

<p>简单断点+po(p)</p>

<p>断点时可以在xcode的lldb调试区使用po或p命令打印对象或变量，对于当前栈帧中引用到的变量都是可见的，所以说假如只是看一眼某个对象运行到这儿是不是存在，是什么值的话，设个断点就够了，况且IDE已经把这个功能集成，鼠标放变量上就可以了。</p>

<p>lldb一些常用调试技巧可以这篇入门<a href="http://www.cimgf.com/2012/12/13/xcode-lldb-tutorial/">教程</a></p>

<p>Condition和Action断点</p>

<p>断点不止能把程序断住，触发时也按一定条件，而且可以执行（一个或多个）Action，在断点上右键选择Edit Breakpoint，弹出的断点设置中可以添加一些Action：</p>

<p><img src="http://www.cocoachina.com/cms/uploads/allimg/140530/8370_140530114340_1.jpg" alt="img" /></p>

<p>其中专门有一项就是Log Message，做个小测试：
for (int i = 0; i &lt; 10; i++) 
{ 
    // break point here 
} 
设置断点后编辑断点：</p>

<p>输入框下面就有支持的格式，表达式(或变量)可以使用@exp@这种格式包起来。于是乎输出：</p>

<pre><code>break at: 'main()',  count: 4, sunnyxx says : 3 
break at: 'main()',  count: 5, sunnyxx says : 4 
break at: 'main()',  count: 6, sunnyxx says : 5 
</code></pre>

<p>正如所料。更多的调试技巧还需要深入研究，不过可以肯定的是，比起单纯的使用NSLog，使用好的工具可以让我们debug的效率更高</p>

<h3 id="section-5">总结</h3>

<ol>
  <li>
    <p>NSLog耗费比较大的资源</p>
  </li>
  <li>
    <p>NSLog被设计为error log，是ASL的高层封装</p>
  </li>
  <li>
    <p>在项目中避免提交commit自己的Debug log，release版本更要注意去除NSLog，可以使用自建的log系统或好用的log系统来替代NSLog</p>
  </li>
</ol>

<p>4、debug不应只局限于log满天飞，lldb断点调试是一个优秀的debug方法，需要再深入研究下</p>

<h3 id="references">References</h3>

<p><a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man3/asl.3.html">https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man3/asl.3.html</a></p>

<p><a href="http://theonlylars.com/blog/2012/07/03/ditching-nslog-advanced-ios-logging-part-1/">http://theonlylars.com/blog/2012/07/03/ditching-nslog-advanced-ios-logging-part-1/</a></p>

<p><a href="https://github.com/CocoaLumberjack/CocoaLumberjack/wiki/Performance">https://github.com/CocoaLumberjack/CocoaLumberjack/wiki/Performance</a></p>

<p><a href="https://developer.apple.com/library/mac/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/LoggingErrorsAndWarnings.html#//apple_ref/doc/uid/10000172i-SW8-SW1">https://developer.apple.com/library/mac/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/LoggingErrorsAndWarnings.html#//apple_ref/doc/uid/10000172i-SW8-SW1</a></p>

<p><a href="http://www.cimgf.com/2012/12/13/xcode-lldb-tutorial/">http://www.cimgf.com/2012/12/13/xcode-lldb-tutorial/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails-perftest 分析 Rails 引用的性能]]></title>
    <link href="http://helloyokoy.github.io/blog/rails-perftest/"/>
    <updated>2015-11-07T15:04:49+08:00</updated>
    <id>http://helloyokoy.github.io/blog/rails-perftest</id>
    <content type="html"><![CDATA[<p>这个是 Rails 官方的 Gem，可以直接集成到 Rails 里面</p>

<p>你可以写 Benchmark 的测试用例:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">require 'test_helper'
</span><span class="line">require 'rails/performance_test_help'
</span><span class="line">
</span><span class="line">class HomepageTest &lt; ActionDispatch::PerformanceTest
</span><span class="line">  # Refer to the documentation for all available options
</span><span class="line">  # self.profile_options = { runs: 5, metrics: [:wall_time, :memory],
</span><span class="line">  #                          output: 'tmp/performance', formats: [:flat] }
</span><span class="line">
</span><span class="line">  test "homepage" do
</span><span class="line">    get '/'
</span><span class="line">  end
</span><span class="line">end</span></code></pre></td></tr></table></div></figure></notextile></div>

<!--more-->

<p>然后可以执行</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ rake test:benchmark
</span><span class="line">HomepageTest#test_homepage (31 ms warmup)
</span><span class="line">           wall_time: 6 ms
</span><span class="line">              memory: 437.27 KB
</span><span class="line">             objects: 5,514
</span><span class="line">             gc_runs: 0
</span><span class="line">             gc_time: 19 ms</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>你可以直接在命令行使用</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ perftest profiler 'User.first' --runs 3
</span><span class="line">ProfilerTest#test_user_first (3 ms warmup)
</span><span class="line">        process_time: 4 ms
</span><span class="line">              memory: 289 Bytes
</span><span class="line">             objects: 551</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>你还可以用 Helper 在 View, Controler, Model 里面打点统计</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># app/controllers/topics_controller.rb
</span><span class="line">class TopicsController &lt; ApplicationController
</span><span class="line">  def index
</span><span class="line">    benchmark("  Benchmark: topics/index/suggest_topics") do
</span><span class="line">      @suggest_topics = Topic.without_hide_nodes.suggest.limit(3)
</span><span class="line">    end
</span><span class="line">    ...
</span><span class="line">  end
</span><span class="line">end</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Rails log 将会输出</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># development.log
</span><span class="line">Started GET "/topics" for 127.0.0.1 at 2015-01-01 00:50:19 +0800
</span><span class="line">  ...
</span><span class="line">  Benchmark:  topics/index/suggest_topics (1.4ms)
</span><span class="line">  ...
</span><span class="line">Completed 200 OK in 121ms (Views: 108.1ms)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>还有更多功能待你发现哦!</p>

<hr />
<p><a href="https://github.com/rails/rails-perftest">https://github.com/rails/rails-perftest</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web开发cache]]></title>
    <link href="http://helloyokoy.github.io/blog/web-cache/"/>
    <updated>2015-11-04T16:55:48+08:00</updated>
    <id>http://helloyokoy.github.io/blog/web-cache</id>
    <content type="html"><![CDATA[<p>总结web应用中常用的各种cache</p>

<p>cache是提高应用性能重要的一个环节，写篇文章总结一下用过的各种对于动态内容的cache。
文章以Nginx，Rails，Mysql，Redis作为例子，换成其他web服务器，语言，数据库，缓存服务都是类似的。
以下是3层的示意图，方便后续引用：</p>

<pre><code>                      +-------+
1                     | Nginx |
                      +-+-+-+-+
                        | | |
        +---------------+ | +---------------+
        |                 |                 |
    +---+---+         +---+---+         +---+---+
2   |Unicorn|         |Unicorn|         |Unicorn|
    +---+---+         +---+---+         +---+---+
        |                 |                 |
        |                 |                 |
        |             +---+---+             |
3        +-------------+  D B  +-------------+
                      +-------+
</code></pre>

<!--more-->

<ol>
  <li>
    <h2 id="section">客户端缓存</h2>
  </li>
</ol>

<p>一个客户端经常会访问同一个资源，比如用浏览器访问网站首页或查看同一篇文章，或用app访问同一个api，如果该资源和他之前访问过的没有任何改变，就可以利用http规范中的304 Not Modified 响应头( http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.5 )，直接用客户端的缓存，而无需在服务器端再生成一次内容。
在Rails里面内置了fresh_when这个方法，一行代码就可以完成：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class ArticlesController
</span><span class="line">  def show
</span><span class="line">    @article = Article.find(params[:id])
</span><span class="line">    fresh_when :last_modified =&gt; @article.updated_at.utc, :etag =&gt; @article
</span><span class="line">  end
</span><span class="line">end</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>下次用户再访问的时候，会对比request header里面的If-Modified-Since和If-None-Match，如果相符合，就直接返回304，而不再生成response body。</p>

<p>但是这样会遇到一个问题，假设我们的网站导航有用户信息，一个用户在未登陆专题访问了一下，然后登陆以后再访问，会发现页面上显示的还是未登陆状态。或者在app访问一篇文章，做了一下收藏，下次再进入这篇文章，还是显示未收藏状态。解决这个问题的方法很简单，将用户相关的变量也加入到etag的计算里面：</p>

<pre><code>fresh_when :etag =&gt; [@article.cache_key, current_user.id]
fresh_when :etag =&gt; [@article.cache_key, current_user_favorited] 另外提一个坑，如果nginx开启了gzip，对rails执行的结果进行压缩，会将rails输出的etag header干掉，nginx的开发人员说根据rfc规范，对proxy_pass方式处理必须这样（因为内容改变了），但是我个人认为没这个必要，于是用了粗暴的方法，直接将src/http/modules/ngx_http_gzip_filter_module.c这个文件里面的这行代码注释掉，然后重新编译nginx：

//ngx_http_clear_etag(r); 或者你可以选择不改变nginx源代码，将gzip off掉，将压缩用Rack中间件来处理：

config.middleware.use Rack::Deflater 除了在controller里面指定fresh_when以外，rails框架默认使用Rack::ETag middleware，它会自动给无etag的response加上etag，但是和fresh_when相比，自动etag能够节省的只是客户端时间，服务器端还是一样会执行所有的代码，用curl来对比一下。 Rack::ETag自动加入etag：
</code></pre>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">curl -v http://localhost:3000/articles/1
</span><span class="line">&lt; Etag: "bf328447bcb2b8706193a50962035619"
</span><span class="line">&lt; X-Runtime: 0.286958
</span><span class="line">curl -v http://localhost:3000/articles/1 --header 'If-None-Match: "bf328447bcb2b8706193a50962035619"'
</span><span class="line">&lt; X-Runtime: 0.293798</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>用fresh_when：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">curl -v http://localhost:3000/articles/1 --header 'If-None-Match: "bf328447bcb2b8706193a50962035619"'
</span><span class="line">&lt; X-Runtime: 0.033884</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>
    <h2 id="nginx">Nginx缓存</h2>
  </li>
</ol>

<p>有一些资源可能会被调用很多，又无关用户状态，并且很少改变，比如新闻app上的列表api，购物网站上ajax请求分类菜单，可以考虑用Nginx来做缓存。
主要有2种实现方法：
####A. 动态请求静态文件化
在rails请求完成以后，将结果保存成静态文件，后续请求就会直接由nginx提供静态文件内容，用after_filter来实现一下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class CategoriesController &lt; ActionController::Base
</span><span class="line">  after_filter :generate_static_file, :only =&gt; [:index]
</span><span class="line">
</span><span class="line">  def index
</span><span class="line">    @categories = Category.all
</span><span class="line">  end
</span><span class="line">
</span><span class="line">  def generate_static_file
</span><span class="line">    File.open(Rails.root.join('public', 'categories'), 'w') do |f|
</span><span class="line">      f.write response.body
</span><span class="line">    end
</span><span class="line">  end
</span><span class="line">end</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>另外我们需要在任何分类更新的时候，删除掉这个文件，避免缓存不刷新的问题：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class Category &lt; ActiveRecord::Base
</span><span class="line">  after_save :delete_static_file
</span><span class="line">  after_destroy :delete_static_file
</span><span class="line">
</span><span class="line">  def delete_static_file
</span><span class="line">    File.delete Rails.root.join('public', 'categories')
</span><span class="line">  end
</span><span class="line">end</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Rails 4之前，处理这种生成静态文件缓存可以用内置的caches_page， rails 4之后变成了一个独立gem actionpack-page_caching，和手工代码对比一下，</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class CategoriesController &lt; ActionController::Base
</span><span class="line">  caches_page :index
</span><span class="line">
</span><span class="line">  def update
</span><span class="line">    #...
</span><span class="line">    expire_page action: 'index'
</span><span class="line">  end
</span><span class="line">end</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果只有一台服务器，这个方法简单又实用，但是如果有多台服务器，就会出现更新分类只能刷新自己本身这台服务器缓存的问题，可以用nfs来共享静态资源目录解决，或者用第2种：</p>

<h4 id="b-">B. 静态化到集中缓存服务</h4>
<p>首先我们得让Nginx有直接访问缓存的能力：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class=""><span class="line">upstream redis {
</span><span class="line">    server redis_server_ip:6379;
</span><span class="line">  }
</span><span class="line">
</span><span class="line">  upstream ruby_backend {
</span><span class="line">    server unicorn_server_ip1 fail_timeout=0;
</span><span class="line">    server unicorn_server_ip2 fail_timeout=0;
</span><span class="line">  }
</span><span class="line">
</span><span class="line">  location /categories {
</span><span class="line">    set $redis_key $uri;
</span><span class="line">    default_type   text/html;
</span><span class="line">    redis_pass redis;
</span><span class="line">    error_page 404 = @httpapp;
</span><span class="line">  }
</span><span class="line">
</span><span class="line">  location @httpapp {
</span><span class="line">    proxy_pass http://ruby_backend;
</span><span class="line">  }</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Nginx首先会用请求的uri作为key去redis里面获取，如果获取不到（404）就转发给unicorn进行处理，然后改写generate_static_file和delete_static_file方法：</p>

<pre><code>redis_cache.set('categories', response.body)
  	
redis_cache.del('categories')
</code></pre>

<p>这样除了集中管理以外，还能够设置缓存的失效时间，对于一些更新无时效性要求的数据，就可以不用处理刷新机制，简单地固定时间刷新一次：</p>

<pre><code>redis_cache.setex('categories', 3.hours.to_i, response.body)
</code></pre>

<ol>
  <li>
    <h2 id="section-1">整页缓存</h2>
  </li>
</ol>

<p>Nginx缓存在处理带参数资源或者有用户状态的请求时候，就非常难以处理，这个时候可以用到整页缓存。
比如说分页请求列表，我们可以将page参数加入到cache_path：</p>

<pre><code>class CategoriesController
  	caches_action :index, :expires_in =&gt; 1.day, :cache_path =&gt; proc 	{"categories/index/#{params[:page].to_i}"}
end
</code></pre>

<p>比如说我们只需要针对rss输出进行缓存8小时：</p>

<pre><code>class ArticlesController
  	caches_action :index, :expires_in =&gt; 8.hours, :if =&gt; proc 	{request.format.rss?}
end 再比如说对于非登陆用户，我们可以缓存首页：

class HomeController
  	caches_action :index, :expires_in =&gt; 3.hours, :if =&gt; proc {!	user_signed_in?}
end
</code></pre>

<ol>
  <li>
    <h2 id="section-2">片段缓存</h2>
  </li>
</ol>

<p>如果说前面2种缓存能够用到的场景有限，那么片段缓存是适用性最广的。</p>

<h4 id="section-3">场景1：</h4>

<p>我们需要在每个页面一段广告代码，用来显示不同广告，如果没有使用片段缓存，那么每个页面都会要去查询广告的代码，并且花费一定时间去生成html代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">- if advert = Advert.where(:name =&gt; request.controller_name + request.action_name, :enable =&gt; true).first
</span><span class="line">  div.ad
</span><span class="line">    = advert.content</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>加了片段缓存以后，就可以少去这个查询：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">- cache "adverts/#{request.controller_name}/#{request.action_name}", :expires_in =&gt; 1.day do
</span><span class="line">  - if advert = Advert.where(:name =&gt; request.controller_name + request.action_name, :enable =&gt; true).first
</span><span class="line">    div.ad
</span><span class="line">      = advert.content</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-4">场景2：</h4>
<p>阅读文章，文章的内容可能比较长时间都不会改变，经常变化可能是文章评论，就可以对文章主体部分加上片段缓存：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">- cache "articles/#{@article.id}/#{@article.updated_at.to_i}" do
</span><span class="line">  div.article
</span><span class="line">    = @article.content.markdown2html</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>节约了生成markdown语法转换到html时间，这里用文章最后更新时间作为cache key的一部分，文章内容如果有改变，缓存自动失效，默认activerecord的cache_key方法也是用updated_at，你也可以加入更多的参数，比如article上有评论数的counter cache，更新评论数的时候不会更新文章时间，可以将这个counter也加入到key的一部分</p>

<h4 id="section-5">场景3：</h4>
<p>复杂页面结构的生成</p>

<p>数据结构比较复杂的页面，在生成的时候避免不了大量的查询和html渲染，用片段缓存，可以将这部分时间大大地节约，以我们网站游记页面 http://chanyouji.com/trips/109123 （请允许小小地打个广告，带点流量）来说：</p>

<p>需要获取天气数据，照片数据，文本数据等，同时还要生成meta，keyword等seo数据，而这些内容又是和其他动态内容交叉，片段缓存就可以分开多个：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">- cache "trips/show/seo/#{@trip.fragment_cache_key}", :expires_in =&gt; 1.day do
</span><span class="line">  title #{trip_name @trip}
</span><span class="line">  meta name="description" content="..."
</span><span class="line">  meta name="keywords" content="..."
</span><span class="line">
</span><span class="line">body
</span><span class="line">  div
</span><span class="line">    ...
</span><span class="line">- cache "trips/show/viewer/#{@trip.fragment_cache_key}", :expires_in =&gt; 1.day do
</span><span class="line">  - @trip.eager_load_all</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>小贴士，我在trip对象里面加了一个eager_load_all方法，缓存没有命中的时候，查询的时候避免出现n+1问题：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">def eager_load_all
</span><span class="line">    ActiveRecord::Associations::Preloader.new([self], {:trip_days =&gt; [:weather_station_data, :nodes =&gt; [:entry, :notes =&gt; [:photo, :video, :audio]]]}).run
</span><span class="line">  end</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-6">小技巧1：带条件的片段缓存</h4>

<p>和caches_action不同，rails自带的片段缓存是不支持条件的，比如说我们想未登陆用户给他用片段缓存，而登陆用户不使用，写起来就很麻烦，我们可以改写一下helper就可以了：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">def cache_if (condition, name = {}, cache_options = {}, &amp;block)
</span><span class="line">    if condition
</span><span class="line">      cache(name, cache_options, &amp;block)
</span><span class="line">    else
</span><span class="line">      yield
</span><span class="line">    end
</span><span class="line">  end
</span><span class="line">
</span><span class="line">
</span><span class="line">- cache_if !user_signed_in?, "xxx", :expires_in =&gt; 1.day do</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-7">小技巧2：关联对象的自动更新</h4>

<p>常使用对象update_at时间戳来作为cache key，可以在关联对象上加上touch选项，自动更新关联对象时间戳，比如我们可以在更新或者删除文章评论的时候，自动个更新：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class Article
</span><span class="line">  has_many :comments
</span><span class="line">end
</span><span class="line">
</span><span class="line">class Comment
</span><span class="line">  belongs_to :article, :touch =&gt; true
</span><span class="line">end</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>
    <h2 id="section-8">数据查询缓存</h2>
  </li>
</ol>

<p>通常来说web应用性能瓶颈都出现在DB IO上，做好数据查询缓存，减少数据库的查询次数，可以极大提高整体响应时间。
数据查询缓存分2种：</p>

<h4 id="a-">A. 同一个请求周期内的缓存</h4>

<p>举一个显示文章列表的例子，输出文章标题和文章类别，对应代码如下</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># controller
</span><span class="line">  def index
</span><span class="line">    @articles = Article.first(10)
</span><span class="line">  end
</span><span class="line">
</span><span class="line"># view
</span><span class="line">- @articles.each do |article|
</span><span class="line">  h1 = article.name
</span><span class="line">  span = article.category.name</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>会发生10条类似的sql查询：</p>

<pre><code>SELECT `categories`.* FROM `categories` WHERE `categories`.`id` = ?
</code></pre>

<p>rails内置了query cache</p>

<p><a href="https://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb">https://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb</a>，</p>

<p>在同一个请求周期内，如果没有update/delete/insert的操作，会对相同的sql查询进行缓存，如果文章类别都是相同的话，真正去查询数据库只会有1次。</p>

<p>如果文章类别都不一样，就会出现N+1查询问题（常见的性能瓶颈），rails推荐的解决方法是用Eager Loading Associations</p>

<p><a href="http://guides.rubyonrails.org/active_record_querying.html#eager-loading-associations">http://guides.rubyonrails.org/active_record_querying.html#eager-loading-associations</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">def index
</span><span class="line">    	@articles = Article.includes(:category).first(10)
</span><span class="line">  	end</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>查询语句会变成</p>

<pre><code>SELECT `categories`.* FROM `categories` WHERE `categories`.`id` in (?,?,?...)
</code></pre>

<h4 id="b--1">B. 跨请求周期的缓存</h4>

<p>同请求周期缓存所带来性能优化是很有限的，很多时候我们需要用跨请求周期的缓存，将一些常用的数据（比如User model）缓存，对于active record来说，利用统一的查询接口来fetch cache，利用callback来expire cache，就很容易实现，而且有一些现成的gem可以来用。</p>

<p>比如说 identity_cache</p>

<p><a href="https://github.com/Shopify/identity_cache">https://github.com/Shopify/identity_cache</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class User &lt; ActiveRecord::Base
</span><span class="line">  include IdentityCache
</span><span class="line">end
</span><span class="line">
</span><span class="line">class Article &lt; ActiveRecord::Base
</span><span class="line">  include IdentityCache
</span><span class="line">  cached_belongs_to :user
</span><span class="line">end
</span><span class="line">
</span><span class="line">
</span><span class="line"># 都会命中缓存
</span><span class="line">User.fetch(1)
</span><span class="line">Article.find(2).user</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这个gem的优点是代码实现简单，cache设置灵活，也方便扩展，缺点是需要用不同的查询方法名（fetch），以及额外的关系定义。</p>

<p>如果想在无数据缓存的应用无缝加入缓存功能，推荐@hooopo 做的second_level_cache</p>

<p><a href="https://github.com/hooopo/second_level_cache">https://github.com/hooopo/second_level_cache</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class User &lt; ActiveRecord::Base
</span><span class="line">  acts_as_cached(:version =&gt; 1, :expires_in =&gt; 1.week)
</span><span class="line">end
</span><span class="line">
</span><span class="line">
</span><span class="line">
</span><span class="line">#还是使用find方法，就会命中缓存
</span><span class="line">User.find(1)
</span><span class="line">#无需额外用不一样的belongs_to定义
</span><span class="line">Article.find(2).user</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>实现原理是扩展了active record底层arel sql ast处理</p>

<p><a href="https://github.com/hooopo/second_level_cache/blob/master/lib/second_level_cache/arel/wheres.rb">https://github.com/hooopo/second_level_cache/blob/master/lib/second_level_cache/arel/wheres.rb</a></p>

<p>它的优点是无缝接入，缺点是扩展比较困难，对于只获取少量字段的查询无法缓存。</p>

<ol>
  <li>
    <h2 id="section-9">数据库缓存</h2>
  </li>
</ol>

<p>编辑中</p>

<p>这6种缓存，分布在客户端到服务器端不同的位置，所能够节约的时间也正好从多到少依次排列。</p>

<hr />
<p>转载自  <a href="https://ruby-china.org/topics/19389">ruby-china</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Surge]]></title>
    <link href="http://helloyokoy.github.io/blog/surge/"/>
    <updated>2015-11-02T11:24:57+08:00</updated>
    <id>http://helloyokoy.github.io/blog/surge</id>
    <content type="html"><![CDATA[<p>iOS 9 有个激动人心的新特性 Network Extension 弥补了 iOS 长久以来无法定制底层网络 app 的不足。APN 代理不安全，成本高；虚拟专网速度不佳，爱掉线，阻塞问题严重…</p>

<p><img src="https://g.owind.com/content/images/2015/10/surgelogo.jpg" alt="alt text" title="surge" /></p>

<p>那么对于专业用户来说比较完美的方案必须是安全的，可低成本的，最大网络速度，无连接状态，国内外分流完美的 iOS 方案，那么现在这个堕落的愿望已经实现了，感谢苹果公司这么给(chi)力(dao)的 API 和 app 开发大牛。</p>

<p>Surge.app （App Store）是一款给专业用户使用的网络调试工具，使用比较复杂。它的工作原理是使用 packet tunnel provider，然后给系统套上一个代理，后端转发支持 http 代理，SSL 代理，和 Socks 代理。如果 app 尊重系统代理，就会走这个代理，如果不尊重，我们也可以通过规则强制流量走系统 tun 设备达到支持全部 app 的目的。用代理的好处是可以跟踪和调试网络，容易分流，ACL 功能更多，弹性更大更方便。</p>

<!--more-->

<p>简单的开始可以直接导入一份 conf 文件（URL 或者 iTunes），例如<a href="https://gist.github.com/janlay/b57476c72a93b7e622a6" title="link">这里</a>的，对于不求甚解的用户来说你可以直接使用完事（但是你还是要改改服务器地址用户名什么的。。或者直接从供应商处获取导入 URL）。</p>

<p>配置的结构大概是这样，对于专业用户来说，理解应该不难</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span> (rules)</span> <a href="http://helloyokoy.github.io/downloads/code/rules">download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
</pre></td><td class="code"><pre><code class=""><span class="line"><span class="k">[General]</span>
</span><span class="line"><span class="c1"># warning, notify, info, verbose</span>
</span><span class="line"><span class="na">loglevel</span> <span class="o">=</span> <span class="s">notify</span>
</span><span class="line">
</span><span class="line"><span class="k">[Proxy]</span>
</span><span class="line"><span class="c1"># http, https, socks5</span>
</span><span class="line"><span class="c1"># SSLedge 使用 https，老式 APNp 用 http</span>
</span><span class="line"><span class="na">Proxy</span> <span class="o">=</span> <span class="s">https, server, port, username, password, ciphers </span>
</span><span class="line">
</span><span class="line"><span class="k">[Rule]</span>
</span><span class="line"><span class="c1"># 域名关键字，干掉不想要的请求</span>
</span><span class="line"><span class="err">DOMAIN-KEYWORD,umeng.co,REJECT</span>
</span><span class="line"><span class="err">...</span>
</span><span class="line">
</span><span class="line"><span class="c1"># 常用网站优先匹配，加快速度。使用代理转发，完全没有 CDN 被干扰的问题~</span>
</span><span class="line"><span class="err">DOMAIN-SUFFIX,cn,DIRECT</span>
</span><span class="line"><span class="err">DOMAIN-SUFFIX,qq.com,DIRECT</span>
</span><span class="line"><span class="err">DOMAIN-SUFFIX,ls.apple.com,DIRECT</span>
</span><span class="line"><span class="err">DOMAIN-SUFFIX,apple.com,Proxy</span>
</span><span class="line"><span class="err">...</span>
</span><span class="line">
</span><span class="line"><span class="c1"># 强制这些不尊重系统代理的请求走 packet-tunnel-provider，解决 Twitter.app 和 Mail.app 收发邮件问题</span>
</span><span class="line"><span class="err">DOMAIN-KEYWORD,twitter,Proxy,force-remote-dns</span>
</span><span class="line"><span class="err">DOMAIN-KEYWORD,gmail,Proxy,force-remote-dns</span>
</span><span class="line"><span class="c1"># instagram.app 也没问题</span>
</span><span class="line"><span class="err">DOMAIN-KEYWORD,instagram,Proxy,force-remote-dns</span>
</span><span class="line"><span class="c1"># Telegram.app 也没问题</span>
</span><span class="line"><span class="err">IP-CIDR,91.108.56.0/22,Proxy,force-remote-dns</span>
</span><span class="line"><span class="err">...</span>
</span><span class="line">
</span><span class="line"><span class="c1"># LAN</span>
</span><span class="line"><span class="err">IP-CIDR,192.168.0.0/16,DIRECT</span>
</span><span class="line"><span class="err">...</span>
</span><span class="line">
</span><span class="line"><span class="c1"># 其余的请求使用 GEOIP 判断服务器所在地，如果是国内的，走直连，搞定</span>
</span><span class="line"><span class="err">GEOIP,CN,DIRECT</span>
</span><span class="line">
</span><span class="line"><span class="c1"># 最后 Matchall，丢给代理</span>
</span><span class="line"><span class="err">FINAL,Proxy</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>通过规则定义和组合，必然可以满足专业用户的需求，非常强大。配置可以使用 app 自带的 GUI，当然也有文本编辑方式。</p>

<p>由于 Surge 的核心和是个 http proxy，有些处理不了的请求我们可以强制 bypass 掉，走系统接口，这个可以在代理设置-高级处设置，如果你不太懂，请不要随意设置。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime Text 2 Plugin]]></title>
    <link href="http://helloyokoy.github.io/blog/sublime-text-2-plugin/"/>
    <updated>2015-11-01T19:58:52+08:00</updated>
    <id>http://helloyokoy.github.io/blog/sublime-text-2-plugin</id>
    <content type="html"><![CDATA[<p>Sublime Text 2是一个轻量、简洁、高效、跨平台的编辑器，方便的配色以及兼容vim快捷键等各种优点博得了很多前端开发人员的喜爱。之前也不并知道它有这么多插件的扩展与支持，直到vincent问到有没有在用cTags插件，才知道原来Sublime通过插件也可以实现一些大型IDE的功能，遂google一下，本篇Blog就来介绍下Sublime下经常使用的插件。</p>

<h4 id="package-control">安装包控制（Package Control）</h4>

<p>打开Sublime Text 2，点击 Tools -&gt; Command Palette 调出控制台Console；</p>

<p>将以下代码粘贴进命令行中并回车：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">import urllib2,os;pf='Package Control.sublime-package';ipp=sublime.installed_packages_path();os.makedirs(ipp) if not os.path.exists(ipp) else None;open(os.path.join(ipp,pf),'wb').write(urllib2.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read())</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>重启 Sublime Text 2，如果在 Preferences -&gt; Package Settings中见到Package Control这一项，就说明安装成功了。</p>

<!--more-->

<h4 id="alignment">安装Alignment插件</h4>
<p>对于某些喜欢整齐的程序员来说，看到下面这种情况可能是让其无法忍受的：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var joe = 'joe';
</span><span class="line">var johnny = 'johnny';
</span><span class="line">var quaid = 'quaid';</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>一定要改成这样才会安心：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var joe    = 'joe';
</span><span class="line">var johnny = 'johnny';
</span><span class="line">var quaid  = 'quaid';</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Sublime Text 2 之中，一个 Sublime Alignment 插件也可以轻松实现。</p>

<ol>
  <li>
    <p>按下 Ctrl + Shift + P 调出命令面板。</p>
  </li>
  <li>
    <p>输入 install 调出 Package Control: Install Package 选项，按下回车。</p>
  </li>
  <li>
    <p>在列表中找到 Alignment，按下回车进行安装。</p>
  </li>
  <li>
    <p>重启 Sublime Text 2 使之生效。现在通过选中文本并按 Ctrl + Shift + A 就可以进行对齐操作了。</p>
  </li>
</ol>

<h4 id="vim">Vim模式</h4>

<p>是的，Sublime Text 2已经支持 Vim 的编辑模式了，如果更喜欢 Vim 的编辑模式，可以通过以下方法来激活 Vintage mode：</p>

<ol>
  <li>
    <p>按下 Ctrl + Shift + P 调出命令面板。</p>
  </li>
  <li>
    <p>输入 settings user 调出 Preferences：Settings - User，并按下回车。</p>
  </li>
  <li>
    <p>这时会打开一个 Preferences.sublime-settings 的文件， 如果是第一次修改，它应该是个空文件，把以下文本粘贴进去：</p>

    <p>{
  		“ignored_packages”: []
 }</p>
  </li>
  <li>
    <p>保存这个文件，这时按下 ESC 键，再按下一些你熟悉的 Vim 命令，是不是很有亲切感？</p>
  </li>
</ol>

<h4 id="soda-">安装 Soda 主题</h4>
<p>这里所讲的主题不同于针对代码的 Color Scheme，是指针对 Sublime 程序本身的主题，目前可以安装的是 Ian Hill 的 Soda。</p>

<p>因为源中已经添加，所以这款主题的安装同样可以通过 Package Control，非常方便。目前 Soda 主题提供了明暗两种风格。</p>

<p>激活方法，同样要修改 Preferences：Settings - User：</p>

<ol>
  <li>
    <p>按下 Ctrl + Shift + P 调出命令面板。</p>
  </li>
  <li>
    <p>输入 user settings 调出 Preferences：Settings - User，并按下回车。</p>
  </li>
  <li>
    <p>添加以下代码激活 Soda Light 主题：</p>

    <p>{
  		“theme”: “Soda Light.sublime-theme”
 }</p>

    <p>添加以下代码激活 Soda Dark 主题：</p>

    <p>{
  		“theme”: “Soda Dark.sublime-theme”
 }</p>
  </li>
  <li>
    <p>保存生效。</p>
  </li>
</ol>

<h4 id="ctags">安装cTags插件</h4>
<p>这个插件能跨文件跳转，实现像eclipse可那样以追踪函数的功能，从此更喜欢上Sublime了。安装方法:</p>

<ol>
  <li>
    <p>按下 Ctrl + Shift + P 调出命令面板。</p>
  </li>
  <li>
    <p>输入 install 调出 Package Control: Install Package 选项，按下回车。</p>
  </li>
  <li>
    <p>在列表中找到 ctags，按下回车进行安装。</p>
  </li>
  <li>
    <p>ubuntu下安装运行命令：sudo apt-get install exuberant-ctags。</p>
  </li>
  <li>
    <p>在sublime项目文件夹右键， 会出现Ctag:Rebuild Tags 的菜单。点击它，然后会生成.tags的文件。</p>
  </li>
</ol>

<p>然后在你代码中， 光标放在某个函数上， 点击ctrl+shift+鼠标左键 就可以跳转到函数声明的地方。</p>

<h4 id="zen-coding">Zen Coding</h4>
<p>如果经常要写一些前端的代码，这个插件也是必不可少的，还不知道ZenCoding的同学推荐去看一下：《Zen Coding: 一种快速编写HTML/CSS代码的方法》</p>

<h4 id="git">Git</h4>
<p>一个整合GIT和Sublime Text的插件，执行了很多你需要使用的命令。</p>

<hr />
<p>转载自 <a href="http://stormzhang.com/devtools/2012/12/30/sublime-plugin/">stormzhang博客</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WeChat 开发环境搭建]]></title>
    <link href="http://helloyokoy.github.io/blog/wechat-develop-environment/"/>
    <updated>2015-10-29T15:46:09+08:00</updated>
    <id>http://helloyokoy.github.io/blog/wechat-develop-environment</id>
    <content type="html"><![CDATA[<p>由于微信开发都是在微信内浏览器运行，不管是登陆还是支付都不能在PC开发端愉快地玩耍，但世界我们还是需要拯救的。</p>

<p>由于自己换了新电脑，第一次做微信开发跟大家分享一下我的开发环境，欢迎拍砖交流。</p>

<p>一般的第三方开发永远离不开两个配置，域名 &amp; 回调，有一些平台支持localhost的域名&amp;回调会方便，更有支持随意更改端口的，微信上面貌似都没有 。</p>

<p>好了，假定我们的域名是playmonkey.me</p>

<h2 id="section">域名</h2>

<p>微信登陆，JSAPI以及支付都有域名限制，所以需要让手机微信上打开palymonkey.me时，访问到我们本地的development server。</p>

<p>干这个勾当的当属 Charles 神器。</p>

<!--more-->

<p>下载安装打开Charles
Proxy -&gt; Proxy Setting -&gt; Http Proxy勾选Enable…. 开启http proxy代理，端口默认是8888
Tool -&gt; DNS Spoofing Settings 勾选Enable DNS Spoofing
然后把palymonkey.me加到DNS Spoofs，指向本机127.0.0.1
Charles好了，下一步配置手机，确保你的手机网络和电脑在同一局域网，配置手机的HTTP代理到电脑的IP上，端口8888；</p>

<p>访问http://playmonkey.me；</p>

<p>什么？挂了？当然，酱紫访问的是本地的80端口。</p>

<p>好了，我们再来用 Nginx 反向代理搞定这个问题，让手机端的playmonkey.me访问到本地development server的3000端口上。</p>

<p>首先安装启动Nginx，用Apache的朋友对不起了，你们要自食其力XD</p>

<p>配置Nginx</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">server</span> <span class="p">{</span>
</span><span class="line">      <span class="n">listen</span> <span class="mi">80</span><span class="p">;</span>
</span><span class="line">      <span class="n">server_name</span> <span class="n">playmonkey</span><span class="o">.</span><span class="n">me</span><span class="p">;</span>
</span><span class="line">      <span class="n">charset</span> <span class="n">utf</span><span class="o">-</span><span class="mi">8</span><span class="p">;</span>
</span><span class="line">      <span class="n">location</span> <span class="o">/</span> <span class="p">{</span>
</span><span class="line">        <span class="n">proxy_pass</span>          <span class="ss">http</span><span class="p">:</span><span class="sr">//mon</span><span class="n">key_servers</span><span class="p">;</span>
</span><span class="line">        <span class="n">proxy_redirect</span>      <span class="n">default</span><span class="p">;</span>
</span><span class="line">        <span class="n">proxy_set_header</span>    <span class="n">X</span><span class="o">-</span><span class="no">Forwarded</span><span class="o">-</span><span class="no">For</span> <span class="vg">$proxy_add_x_forwarded_for</span><span class="p">;</span>
</span><span class="line">        <span class="n">proxy_set_header</span>    <span class="n">X</span><span class="o">-</span><span class="no">Real</span><span class="o">-</span><span class="no">IP</span> <span class="vg">$remote_addr</span><span class="p">;</span>
</span><span class="line">        <span class="n">proxy_set_header</span>    <span class="no">Host</span> <span class="vg">$http_host</span><span class="p">;</span>
</span><span class="line">        <span class="n">proxy_next_upstream</span> <span class="n">http_502</span> <span class="n">http_504</span> <span class="n">error</span> <span class="n">timeout</span> <span class="n">invalid_header</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">      <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">upstream</span> <span class="n">palymonkey_servers</span><span class="p">{</span>
</span><span class="line">      <span class="n">server</span> <span class="mi">127</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="p">:</span><span class="mi">3000</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>再用手机访问http://playmonkey.me ，Nice….这回看到页面了。
到此我们可以在微信上用playmonkey.me访问本地的dev server，可以愉快地调用JSAPI &amp; 微信oauth登陆 &amp; 发起支付。</p>

<p>噢，如果做的是PC端的oauth微博登录怎么办？ 在本地host加上 127.0.0.1 palymonkey.com。Nice XD、</p>

<h2 id="section-1">异步回调</h2>

<p>上面说到发起支付，微信的支付结果是通过异步回调的，所以需要做内网穿透，这里推荐两个工具 ngrok OR localtunnel</p>

<p>localtunnel</p>

<p>localtunnel 是node写的，用起来非常简单</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>npm install -g localtunnel
</span><span class="line"><span class="nv">$ </span>lt --port 3000
</span><span class="line">your url is: https://gqgh.localtunnel.me
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这样外网打开https://gqgh.localtunnel.me 就可以访问到本地的3000端口</p>

<p>但是localtunnel是国外的，公司网络刚刚搭好，经常不稳定果断抛弃转入ngrok；</p>

<p>ngrok（不想折腾的可以忽略XD）</p>

<p>悲催的是ngrok也是国外的，而且服务器给墙了，BUT，问题不大，我们可以pull ngrok 1.X的源码自己编译，2.0会报证书错误如果没有合法的https证书。</p>

<p>好了我们来编译ngrok，噢，对了，ngrok是Go写的，编译出来直接是一个可执行文件，爽歪歪有木有，哈~</p>

<p>在服务器端（每家都有一只staging服务器吧）</p>

<p>NGROK_DOMAIN 设置为您自己拥有的域名，并指向Ngrok server运行的服务器</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">NGROK_DOMAIN</span><span class="o">=</span><span class="s2">&quot;my.domain.com&quot;</span>
</span><span class="line">git clone https://github.com/inconshreveable/ngrok.git
</span><span class="line"><span class="nb">cd </span>ngrok
</span><span class="line">
</span><span class="line">openssl genrsa -out rootCA.key 2048
</span><span class="line">openssl req -x509 -new -nodes -key rootCA.key -subj <span class="s2">&quot;/CN=$NGROK_DOMAIN&quot;</span> -days <span class="m">5000</span> -out rootCA.pem
</span><span class="line">openssl genrsa -out device.key 2048
</span><span class="line">openssl req -new -key device.key -subj <span class="s2">&quot;/CN=$NGROK_DOMAIN&quot;</span> -out device.csr
</span><span class="line">openssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000
</span><span class="line">
</span><span class="line">cp rootCA.pem assets/client/tls/ngrokroot.crt
</span><span class="line"><span class="c"># make clean</span>
</span><span class="line">make release-server release-client
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>编译完有两个可执行文件 bin/ngrok &amp; bin/ngrokd 
将bin/ngrok copy到你本机
在服务器上开启ngrok server</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">bin/ngrokd -tlsKey<span class="o">=</span>device.key -tlsCrt<span class="o">=</span>device.crt -domain<span class="o">=</span><span class="s2">&quot;$NGROK_DOMAIN&quot;</span> -httpAddr<span class="o">=</span><span class="s2">&quot;:8000&quot;</span> -httpsAddr<span class="o">=</span><span class="s2">&quot;:8001&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>本地端</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">NGROK_DOMAIN</span><span class="o">=</span><span class="s2">&quot;my.domain.com&quot;</span>
</span><span class="line"><span class="nb">echo</span> -e <span class="s2">&quot;server_addr: $NGROK_DOMAIN:4443\ntrust_host_root_certs: false&quot;</span> &gt; ngrok-config
</span><span class="line">./ngrok -config<span class="o">=</span>ngrok-config -subdomain<span class="o">=</span>playmonkey <span class="m">3000</span> // 配置subdomain到本地3000端口，这样外网通过playmonkey.NGROK_DOMAIN 就可以访问到本地dev server的3000端口
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>或者用SSH forwarding</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">./ngrok -config<span class="o">=</span>ngrok-config -subdomain<span class="o">=</span><span class="m">3000</span> --proto<span class="o">=</span>tcp 22
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>以上Ngrok编译&amp;配置出自 <a href="https://gist.github.com/lyoshenka/002b7fbd801d0fd21f2f">How to setup Ngrok with a self-signed SSL cert</a></p>

<p>至此我们在发起微信支付时回调URL的HOST就可以设置为playmonkey.NGROK_DOMAIN</p>

<p>至此我们可以愉快地开发测试 微信的oauth登录 &amp; JSAPI &amp; 支付 &amp; 支付回调，好吧，很多BUG一点都不愉快。
另外感谢 <a href="https://ruby-china.org/ruby_sky">@ruby_sky</a> 的这篇 <a href="https://ruby-china.org/topics/26138">微信支付文章</a> 微信支付做起来如丝般顺滑；
内微信文档看起来太蛋疼了，各种配置也是找半天，大家有兴趣我可以总结一下微信各个开发的各种配置XD。</p>

<hr />
<p>转载自 <a href="https://ruby-china.org/topics/26443">ruby-china</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微信开发 gems]]></title>
    <link href="http://helloyokoy.github.io/blog/wechat-gems/"/>
    <updated>2015-10-27T15:35:10+08:00</updated>
    <id>http://helloyokoy.github.io/blog/wechat-gems</id>
    <content type="html"><![CDATA[<p>最近陆续有不少用Rails开发微信项目的朋友在Github上开始使用weixin_rails_middleware、weixin_authorize，也不少人谈到Ratchet，春节开始到现在，一直有做微信的开发，现在在论坛上发布出来，希望让更多人知道这些gem的存在，更快速的完成你们手中的任务。</p>

<p>有问题可以前往：微信开发论坛：http://weixin-dev.com/</p>

<p>代码写得不好，还请多多包涵，如果有任何问题，可以直接联系我。:)</p>

<!--more-->

<h4 id="rails">1:一（两）条命令搭建Rails微信版本</h4>

<p>按照最简洁的速度，10分钟可以跑起一个微信的项目：
https://github.com/lanrion/weixin_rails_middleware</p>

<p>自动验证微信请求；
一（两）条命令，一个配置，简练风格；
支持Rails 3, Rails 4；
支持多公众账号平台，例如类似微盟；
支持单个用户，即一个账号，但又不想保存在数据库；
提供回复消息辅助方法；
提供所有微信消息类型的业务逻辑的回复处理；
wiki 中提供自定义菜单中的实现案例；
自动生成token；
详细见：</p>

<p>https://github.com/lanrion/weixin_rails_middleware/wiki/</p>

<p>wiki中也有不少关于开发上的建议与经验，还有自己遇到一些奇葩的问题</p>

<p>https://github.com/lanrion/weixin_rails_middleware</p>

<h4 id="api">2：微信高级API实现：</h4>

<p>https://github.com/lanrion/weixin_authorize</p>

<p>除 Oauth 2 未实现，其他API均已实现；
支持Redis存储access_token；
还是直接看wiki 吧：</p>

<p>https://github.com/lanrion/weixin_authorize/wiki/Getting-Started
wiki中也有不少关于开发上的建议与经验，还有自己遇到一些奇葩的问题</p>

<h4 id="ratchet-v201gem-twitterratchetrails">3：集成Ratchet v2.0.1的gem: twitter_ratchet_rails</h4>

<p>即：http://goratchet.com/ 压缩后非常小，十分适合wap使用，但有一个不足之处在于，组件不够丰富，期待更丰富的实现
没其他多余的好说，看官直接点击：</p>

<p>https://github.com/lanrion/twitter_ratchet_rails</p>

<p>小弟身材弱小，砖别拍的太猛，嘿，把我拍死了，就没人维护这三个gem了。:)</p>

<h4 id="section">4：例子（可能没有及时更新上最新版本）</h4>

<p>Rails 4: https://github.com/lanrion/weixin_rails_middleware_example</p>

<p>Rails 3: https://github.com/lanrion/weixin_rails_3</p>

<p>企业微信gem</p>

<p>请稳步： https://ruby-china.org/topics/22479</p>

<p>微信开发论坛：http://weixin-dev.com/</p>

<hr />
<p>转载自 <a href="https://ruby-china.org/topics/18439">ruby-china</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS9 适配]]></title>
    <link href="http://helloyokoy.github.io/blog/ios9-adaption/"/>
    <updated>2015-10-27T12:44:03+08:00</updated>
    <id>http://helloyokoy.github.io/blog/ios9-adaption</id>
    <content type="html"><![CDATA[<h2 id="ios9atshttps">1. iOS9网络适配_ATS：改用更安全的HTTPS</h2>

<p>[摘要]为了强制增强数据访问安全， iOS9 默认会把 <del>所有的http请求</del> 所有从<code>NSURLConnection</code> 、 <code>CFURL</code> 、 <code>NSURLSession</code>发出的 HTTP 请求，都改为 HTTPS 请求：iOS9.x-SDK编译时，默认会让所有从<code>NSURLConnection</code> 、 <code>CFURL</code> 、 <code>NSURLSession</code>发出的 HTTP 请求统一采用TLS 1.2 协议。因为 AFNetworking 现在的版本底层使用了 <code>NSURLConnection</code> ，众多App将被影响（基于iOS8.x-SDK的App不受影响）。服务器因此需要更新，以解析相关数据。如不更新，可通过在 Info.plist 中声明，倒退回不安全的网络请求。而这一做法，官方文档称为ATS，全称为App Transport Security，是iOS9的一个新特性。</p>

<p>一个符合 ATS 要求的 HTTPS，应该满足如下条件：</p>

<ol>
  <li>Transport Layer Security协议版本要求TLS1.2以上</li>
  <li>服务的Ciphers配置要求支持Forward Secrecy等</li>
  <li>证书签名算法符合ATS要求等</li>
</ol>

<p>官方文档 <a href="https://developer.apple.com/library/prerelease/ios/technotes/App-Transport-Security-Technote/index.html#//apple_ref/doc/uid/TP40016240"> <strong><em>App Transport Security Technote</em></strong> </a> 对ATS 的介绍：</p>

<p><img src="http://i58.tinypic.com/ajsf0j.jpg" alt="enter image description here" /></p>

<!--more-->

<p>注：有童鞋反映：服务器已支持TLS 1.2 SSL ，但iOS9上还是不行，还要进行本文提出的适配操作。</p>

<p>那是因为：要注意 App Transport Security 要求 TLS 1.2，而且它要求站点使用支持forward secrecy协议的密码。证书也要求是符合ATS规格的，ATS只信任知名CA颁发的证书，小公司所使用的 self signed certificate，还是会被ATS拦截。。因此慎重检查与你的应用交互的服务器是不是符合ATS的要求非常重要。对此，建议使用下文中给出的NSExceptionDomains，并将你们公司的域名挂在下面。下文也会详细描述该问题。</p>

<p>官方文档 <a href="https://developer.apple.com/library/prerelease/ios/technotes/App-Transport-Security-Technote/index.html#//apple_ref/doc/uid/TP40016240"> <strong><em>App Transport Security Technote</em></strong> </a> 对CA颁发的证书要求：</p>

<blockquote>
  <p>Certificates must be signed using a SHA256 or better signature hash algorithm, with either a 2048 bit or greater RSA key or a 256 bit or greater Elliptic-Curve (ECC) key.
Invalid certificates result in a hard failure and no connection</p>
</blockquote>

<p>在讨论之前，跟往常一样，先说下iOS程序猿们最关心的问题：</p>

<h3 id="section">跟我有毛关系？需要我加班吗？！</h3>

<p>首先咱们来看下业内对Apple这一做法的评论：</p>

<p><img src="https://i.imgur.com/Q17QDG0.png" alt="enter image description here" /></p>

<p>这是某社交App上讨论，看来业内还是吐槽声和肯定声同在。</p>

<p>结论是：</p>

<blockquote>
  <p>跟你很有关系，加班吧，少年！</p>
</blockquote>

<p>书归正传【严肃脸】，我们正式讨论下 WHAT，WHY，HOW：</p>

<ol>
  <li>WHAT（什么是SSL/TLS？跟HTTP和HTTPS有什么关系）</li>
  <li>WHY（以前的HTTP不是也能用吗？为什么要用SSL/TLS？！Apple是不是又在反人类？）</li>
  <li>HOW（如何适配？—弱弱地问下：加班要多久？）</li>
</ol>

<h3 id="whatssltlshttphttps">WHAT（什么是SSL/TLS？跟HTTP和HTTPS有什么关系）</h3>

<p>什么是SSL/TLS？
SSL你一定知道，在此不做赘述。主要说下什么是TLS，还有跟HTTP和HTTPS有什么关系。</p>

<p>TLS 是 SSL 新的别称：</p>

<p>“TLS1.0”之于“SSL3.1”，犹“公元2015”之于“民国104”，“一千克”之于“一公斤”：称呼不同，意思相同。</p>

<p>SSL 3.0版本之后的迭代版本被重新命名为TLS 1.0：<strong>TLS 1.0＝SSL 3.1</strong>。所以我们平常也经常见到 “SSL/TLS” 这种说法。</p>

<p>目前，应用最广泛的是TLS 1.0，接下来是SSL 3.0。目前主流浏览器都已经实现了TLS 1.2的支持。</p>

<p>常用的有下面这些：</p>

<ul>
  <li>SSL 2.0</li>
  <li>SSL 3.0</li>
  <li>TLS 1.0 (SSL 3.1)</li>
  <li>TLS 1.1 (SSL 3.1)</li>
  <li>TLS 1.2 (SSL 3.1)</li>
</ul>

<p>那为什么标题是“使用HTTPS”而没有提及SSL和TLS什么事？
“SSL/TLS”跟HTTP和HTTPS有什么关系？</p>

<p>要理解这个，要看下他们之间的关系：</p>

<blockquote>
  <p>HTTP+SSL/TLS+TCP = HTTPS</p>
</blockquote>

<p><img src="http://www.zytrax.com/tech/survival/ssl-layers.gif" alt="HTTP+SSL/TLS+TCP" /></p>

<p>或者</p>

<blockquote>
  <p>HTTPS = “HTTP over SSL”</p>
</blockquote>

<p>也就是说：</p>

<blockquote>
  <p>Apple让你的HTTP采用SSL/TLS协议，就是让你从HTTP转到HTTPS。而这一做法，官方文档称为ATS，全称为App Transport Security。</p>
</blockquote>

<h3 id="whyhttpssltlsapple">WHY（以前的HTTP不是也能用吗？为什么要用SSL/TLS？Apple是不是又在反人类？）</h3>

<blockquote>
  <p>不使用SSL/TLS的HTTP通信，就是不加密的通信！</p>
</blockquote>

<p>不使用SSL/TLS的HTTP通信，所有信息明文传播，带来了三大风险：</p>

<ol>
  <li>窃听风险（eavesdropping）：第三方可以获知通信内容。</li>
  <li>篡改风险（tampering）：第三方可以修改通信内容。</li>
  <li>冒充风险（pretending）：第三方可以冒充他人身份参与通信。</li>
</ol>

<p>SSL/TLS协议是为了解决这三大风险而设计的，希望达到：
 1. 所有信息都是加密传播，第三方无法窃听。
 2. 具有校验机制，一旦被篡改，通信双方会立刻发现。
 3. 配备身份证书，防止身份被冒充。</p>

<p>SSL/TLS的作用，打个比方来讲：</p>

<p>如果原来的 HTTP 是塑料水管，容易被戳破；那么如今新设计的 HTTPS 就像是在原有的塑料水管之外，再包一层金属水管（SSL/TLS协议）。一来，原有的塑料水管照样运行；二来，用金属加固了之后，不容易被戳破。</p>

<h3 id="how---">HOW（如何适配？—弱弱地问下：加班要多久？）</h3>

<p>正如文章开头所说：</p>

<blockquote>
  <p>TLS 1.2 协议 强制增强数据访问安全 系统 Foundation 框架下的“相关网络请求”将不再默认使用 HTTP 等不安全的网络协议，而默认采用 TLS 1.2。服务器因此需要更新，以解析相关数据。如不更新，可通过在 Info.plist 中声明，倒退回不安全的网络请求。</p>
</blockquote>

<p>总之：</p>

<blockquote>
  <p>要么咱们iOS程序猿加班，要么后台加班：</p>
</blockquote>

<p>方案一：立即让公司的服务端升级使用TLS 1.2，以解析相关数据。</p>

<p>方案二：虽Apple不建议，但可通过在 Info.plist 中声明，倒退回不安全的网络请求依然能让App访问指定http，甚至任意的http，具体做法见gif图，示例Demo见 <a href="https://github.com/ChenYilong/iOS9AdaptationTips">Demo1</a></p>

<p><img src="https://github.com/ChenYilong/iOS9AdaptationTips/blob/master/Demo1_iOS9网络适配_改用更安全的HTTPS/微博%40iOS程序犭袁/http问题.gif" alt="enter image description here" /></p>

<p>这也是官方文档和WWDC给出的解决方案：</p>

<ol>
  <li>
    <p><a href="https://developer.apple.com/library/prerelease/ios/releasenotes/General/WhatsNewIniOS/Articles/iOS9.html#//apple_ref/doc/uid/TP40016198-DontLinkElementID_13">Apple官方文档</a>  <img src="https://i.imgur.com/eTgSHZY.png" alt="enter image description here" /></p>
  </li>
  <li>
    <p><a href="https://developer.apple.com/videos/wwdc/2015/?id=703">WWDC Session： “Networking with NSURLSession” session（ 【WWDC 2015 session 703, “Privacy and Your App” O网页链接 】, 时间在30:18左右）</a></p>
  </li>
</ol>

<p><img src="https://i.imgur.com/Tc0fS6p.jpg" alt="enter image description here" /></p>

<p><img src="https://i.imgur.com/v2Tskwh.jpg" alt="enter image description here" /></p>

<p><img src="https://cdn-images-1.medium.com/max/800/1*9-VeRXU5SAI6lLZeWLI0hQ.png" alt="enter image description here" /></p>

<p>即使你的应用使用的是：你没有权限控制的CDN (Content Delivery Network)，而且它不支持HTTPS！</p>

<p>也别担心，Apple都替你考虑好了：</p>

<p><img src="http://i61.tinypic.com/ae9tgj.jpg" alt="enter image description here" />
 正如你在上图中看到的：苹果官方提供了一些可选配置项来决定是否开启ATS模式，也就是可以选择开启或者不开启。</p>

<p>开发者可以针对某些确定的URL不使用ATS，这需要在工程中的info.plist中标记NSExceptionDomains。在NSExceptionDomains字典中，可以显式的指定一些不使用ATS的URL。这些你可以使用的例子可以是:</p>

<ul>
  <li>
    <p>NSIncludesSubdomains</p>
  </li>
  <li>
    <p>NSExceptionAllowInsecureHTTPLoads</p>
  </li>
  <li>
    <p>NSExceptionRequiresForwardSecrecy</p>
  </li>
  <li>
    <p>NSExceptionMinimumTLSVersion</p>
  </li>
  <li>
    <p>NSThirdPartyExceptionAllowsInsecureHTTPLoads</p>
  </li>
  <li>
    <p>NSThirdPartyExceptionMinimumTLSVersion</p>
  </li>
  <li>
    <p>NSThirdPartyExceptionRequiresForwardSecrecy</p>
  </li>
</ul>

<p>这些关键字使我们可以更加细致的设置针对不使用ATS的域名情况下禁用ATS或者一些特殊的ATS选项。</p>

<p>你可能注意到一些关键字像是使用了一些其他关键字中的词但是在前面加上了”ThirdParty”字样，比如列表里最后三个：</p>

<ul>
  <li>
    <p>NSThirdPartyExceptionAllowsInsecureHTTPLoads</p>
  </li>
  <li>
    <p>NSThirdPartyExceptionMinimumTLSVersion</p>
  </li>
  <li>
    <p>NSThirdPartyExceptionRequiresForwardSecrecy</p>
  </li>
</ul>

<p>在功能上，这些关键字与不含有”ThirdParty”的关键字有同样的效果。而且实际运行中所调用的代码将会完全忽略是否使用”ThirdParty”关键字。你应该使用适用于你的场景的关键字而不必过多考虑这些。</p>

<p>关于App Transport Security，每个应用都属于4个大类当中的一类。我们来看看每一个大类都是怎样影响应用的。</p>

<table>
  <thead>
    <tr>
      <th>–</th>
      <th>分类名</th>
      <th>解释</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1.</td>
      <td>HTTPS Only （只有HTTPS，所有情况下都使用ATS）</td>
      <td>如果你的应用只基于支持HTTPS的服务器，那么你太幸运了。你的应用不需要做任何改变。但是，注意App Transport Security要求TLS 1.2而且它要求站点使用支持forward secrecy协议的密码。证书也要求是符合ATS规格的。因此慎重检查与你的应用交互的服务器是不是符合ATS的要求非常重要。</td>
    </tr>
    <tr>
      <td>2.</td>
      <td>Mix &amp; Match（混合）</td>
      <td>你的应用与一个不符合ATS要求的服务器工作是很有可能的。在这种情况下，你需要告诉操作系统哪些站点是涉及到的然后在你的应用的 Info.plist文件中指明哪些要求没有达到。</td>
    </tr>
    <tr>
      <td>3.</td>
      <td>Opt Out（禁用ATS）</td>
      <td>如果你在创建一个网页浏览器，那么你有一个更大的麻烦。因为你不可能知道你的用户将要访问那个网页，你不可能指明这些网页是否支持ATS要求且在HTTPS上传输。在这种情况下，除了全部撤销 App Transport Security 没有其它办法。</td>
    </tr>
    <tr>
      <td>4.</td>
      <td>Opt Out With Exceptions（除特殊情况外，都不使用ATS）</td>
      <td>当你的应用撤消了App Transport Security,，但同时定义了一些例外。这非常有用就是当你的应用从很多的服务器上取数据，但是也要与一个你可控的API交互。在这种情况下，在应用的Info.plist文件中指定任何加载都是被允许的，但是你也指定了一个或多个例外来表明哪些是必须要求 App Transport Security的。</td>
    </tr>
  </tbody>
</table>

<p>下面分别做一下介绍：</p>

<h4 id="https-only-httpsats">1.HTTPS Only （只有HTTPS，所有情况下都使用ATS）</h4>
<p>如果你的应用只基于支持HTTPS的服务器，那么你太幸运了。你的应用不需要做任何改变。</p>

<p>唯一需要做的事情就是使用  <code>NSURLSession</code> 。如果你的开发目标是iOS 9或者 OS X EI Capitan之后，ATS 的最佳实践将会应用到所有基于 <code>NSURLSession</code> 的网络。</p>

<p>但也有人遇到过这样的疑惑：服务器已支持TLS 1.2 SSL ，但iOS9上还是不行，还要进行本文提出的适配操作。</p>

<p>那是因为：要注意 App Transport Security 要求 TLS 1.2，而且它要求站点使用支持forward secrecy协议的密码。证书也要求是符合ATS规格的，ATS只信任知名CA颁发的证书，小公司所使用的 self signed certificate，还是会被ATS拦截。。因此慎重检查与你的应用交互的服务器是不是符合ATS的要求非常重要。对此，建议使用下文中给出的NSExceptionDomains，并将你们公司的域名挂在下面。</p>

<p>官方文档 <a href="https://developer.apple.com/library/prerelease/ios/technotes/App-Transport-Security-Technote/index.html#//apple_ref/doc/uid/TP40016240"> <strong><em>App Transport Security Technote</em></strong> </a> 对CA颁发的证书要求：</p>

<blockquote>
  <p>Certificates must be signed using a SHA256 or better signature hash algorithm, with either a 2048 bit or greater RSA key or a 256 bit or greater Elliptic-Curve (ECC) key.
Invalid certificates result in a hard failure and no connection</p>
</blockquote>

<h4 id="mix--match">2.Mix &amp; Match（混合）</h4>
<p>你的应用与一个不符合ATS要求的服务器工作是很有可能的，</p>

<p>当你遇到以下三个不符合 ATS 要求的服务器的域名时：</p>

<ol>
  <li>api.insecuredomain.com</li>
  <li>cdn.domain.com</li>
  <li>thatotherdomain.com</li>
</ol>

<p>你可以分别设置如下：</p>

<ol>
  <li>api.insecuredomain.com</li>
</ol>

<p>Info.plist 配置中的XML源码如下所示:</p>

<p>```XML
    <key>NSAppTransportSecurity</key>
    <dict>
        <key>NSExceptionDomains</key>
        <dict>
            <key>api.insecuredomain.com</key>
            <dict></dict></dict></dict></p>

<pre><code>            &lt;!--允许App进行不安全的HTTP请求--&gt;
            &lt;key&gt;NSExceptionAllowsInsecureHTTPLoads&lt;/key&gt;
            &lt;true/&gt;
            
            &lt;!--适用于这个特定域名下的所有子域--&gt;
            &lt;key&gt;NSIncludesSubdomains&lt;/key&gt;
            &lt;true/&gt;
        &lt;/dict&gt;
    &lt;/dict&gt;
&lt;/dict&gt;  ```
</code></pre>

<p>在 plist 文件里显示如下：</p>

<p><img src="http://i59.tinypic.com/fxtk0j.jpg" alt="enter image description here" /></p>

<p>我们定义的第一个“例外”（Exception）告诉ATS当与这个子域交互的时候撤销了必须使用HTTPS的要求。注意这个仅仅针对在“例外”（Exception）中声明了的子域。非常重要的一点是要理解NSExceptionAllowsInsecureHTTPLoads关键字并不仅仅只是与使用HTTPS相关。这个“例外”（Exception）指明了对于那个域名，所有的App Transport Security的要求都被撤销了。</p>

<ol>
  <li>cdn.domain.com
 Info.plist 配置中的XML源码如下所示:</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"> ```XML
</span><span class="line">	<span class="nt">&lt;key&gt;</span>NSAppTransportSecurity<span class="nt">&lt;/key&gt;</span>
</span><span class="line">	<span class="nt">&lt;dict&gt;</span>
</span><span class="line">		<span class="nt">&lt;key&gt;</span>NSExceptionDomains<span class="nt">&lt;/key&gt;</span>
</span><span class="line">		<span class="nt">&lt;dict&gt;</span>
</span><span class="line">			<span class="nt">&lt;key&gt;</span>cdn.somedomain.com<span class="nt">&lt;/key&gt;</span>
</span><span class="line">			<span class="nt">&lt;dict&gt;</span>
</span><span class="line">				<span class="nt">&lt;key&gt;</span>NSThirdPartyExceptionMinimumTLSVersion<span class="nt">&lt;/key&gt;</span>
</span><span class="line">				<span class="nt">&lt;string&gt;</span>TLSv1.1<span class="nt">&lt;/string&gt;</span>
</span><span class="line">			<span class="nt">&lt;/dict&gt;</span>
</span><span class="line">		<span class="nt">&lt;/dict&gt;</span>
</span><span class="line">	<span class="nt">&lt;/dict&gt;</span>
</span><span class="line"> ```
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在 plist 文件里显示如下：</p>

<p><img src="http://i58.tinypic.com/29atm5k.jpg" alt="enter image description here" /></p>

<p>很可能你的应用是与一个支持HTTPS传输数据的服务器交互，但是并没有使用TLS 1.2或更高。在这种情况下，你定义一个“例外”（Exception），它指明应该使用的最小的TLS的版本。这比完全撤销那个域名的App Transport Security要更好更安全。</p>

<ol>
  <li>thatotherdomain.com</li>
</ol>

<p>Info.plist 配置中的XML源码如下所示:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"> ```XML
</span><span class="line">       <span class="nt">&lt;key&gt;</span>NSAppTransportSecurity<span class="nt">&lt;/key&gt;</span>
</span><span class="line">        <span class="nt">&lt;dict&gt;</span>
</span><span class="line">            <span class="nt">&lt;key&gt;</span>NSExceptionDomains<span class="nt">&lt;/key&gt;</span>
</span><span class="line">            <span class="nt">&lt;dict&gt;</span>
</span><span class="line">                <span class="nt">&lt;key&gt;</span>thatotherdomain.com<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                <span class="nt">&lt;dict&gt;</span>
</span><span class="line">                    <span class="c">&lt;!--适用于这个特定域名下的所有子域--&gt;</span>
</span><span class="line">                    <span class="nt">&lt;key&gt;</span>NSIncludesSubdomains<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                    <span class="nt">&lt;true/&gt;</span>
</span><span class="line">                    <span class="c">&lt;!--扩展可接受的密码列表：这个域名可以使用不支持 forward secrecy 协议的密码--&gt;</span>
</span><span class="line">                    <span class="nt">&lt;key&gt;</span>NSExceptionRequiresForwardSecrecy<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                    <span class="nt">&lt;false/&gt;</span>
</span><span class="line">                    <span class="c">&lt;!--允许App进行不安全的HTTP请求--&gt;</span>
</span><span class="line">                    <span class="nt">&lt;key&gt;</span>NSExceptionAllowsInsecureHTTPLoads<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                    <span class="nt">&lt;true/&gt;</span>
</span><span class="line">                    <span class="c">&lt;!--在这里声明所支持的 TLS 最低版本--&gt;</span>
</span><span class="line">                    <span class="nt">&lt;key&gt;</span>NSExceptionMinimumTLSVersion<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                    <span class="nt">&lt;string&gt;</span>TLSv1.1<span class="nt">&lt;/string&gt;</span>
</span><span class="line">                <span class="nt">&lt;/dict&gt;</span>
</span><span class="line">            <span class="nt">&lt;/dict&gt;</span>
</span><span class="line">        <span class="nt">&lt;/dict&gt;</span>
</span><span class="line"> ```
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在 plist 文件里显示如下：</p>

<p><img src="http://i61.tinypic.com/w6xn43.jpg" alt="enter image description here" /></p>

<p><code>NSIncludesSubdomains</code> 关键字告诉 App Transport Security 这个“例外”（Exception）适用于这个特定域名的所有子域。这个“例外”（Exception）还进一步通过扩展可接受的密码列表来定义这个域名可以使用不支持forward secrecy( <code>NSExceptionRequiresForwardSecrecy</code> )  协议的密码。想了解更多关于forward secrecy的信息，推荐去看官方文档  <a href="https://developer.apple.com/library/prerelease/mac/technotes/App-Transport-Security-Technote/index.html"> <strong><em>Apple’s technote</em></strong> </a> 。</p>

<p>如果你的App中同时用到了这三个域名，那么应该是这样：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"> ```XML
</span><span class="line">     <span class="nt">&lt;key&gt;</span>NSAppTransportSecurity<span class="nt">&lt;/key&gt;</span>
</span><span class="line">        <span class="nt">&lt;dict&gt;</span>
</span><span class="line">            <span class="nt">&lt;key&gt;</span>NSExceptionDomains<span class="nt">&lt;/key&gt;</span>
</span><span class="line">            <span class="nt">&lt;dict&gt;</span>
</span><span class="line">                <span class="nt">&lt;key&gt;</span>api.insecuredomain.com<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                <span class="nt">&lt;dict&gt;</span>
</span><span class="line">                    <span class="nt">&lt;key&gt;</span>NSExceptionAllowsInsecureHTTPLoads<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                    <span class="nt">&lt;false/&gt;</span>
</span><span class="line">                <span class="nt">&lt;/dict&gt;</span>
</span><span class="line">                <span class="nt">&lt;key&gt;</span>cdn.somedomain.com<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                <span class="nt">&lt;dict&gt;</span>
</span><span class="line">                    <span class="nt">&lt;key&gt;</span>NSThirdPartyExceptionMinimumTLSVersion<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                    <span class="nt">&lt;string&gt;</span>TLSv1.1<span class="nt">&lt;/string&gt;</span>
</span><span class="line">                <span class="nt">&lt;/dict&gt;</span>
</span><span class="line">                <span class="nt">&lt;key&gt;</span>thatotherdomain.com<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                <span class="nt">&lt;dict&gt;</span>
</span><span class="line">                    <span class="nt">&lt;key&gt;</span>NSIncludesSubdomains<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                    <span class="nt">&lt;true/&gt;</span>
</span><span class="line">                    <span class="nt">&lt;key&gt;</span>NSExceptionRequiresForwardSecrecy<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                    <span class="nt">&lt;false/&gt;</span>
</span><span class="line">                <span class="nt">&lt;/dict&gt;</span>
</span><span class="line">            <span class="nt">&lt;/dict&gt;</span>
</span><span class="line">        <span class="nt">&lt;/dict&gt;</span>
</span><span class="line"> ```
</span><span class="line">
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img src="http://i61.tinypic.com/13ynggk.jpg" alt="enter image description here" /></p>

<h4 id="opt-outats">3. Opt Out（禁用ATS）</h4>
<p>上面是比较严谨的做法，指定了能访问哪些特定的HTTP。当然也有暴力的做法：
彻底倒退回不安全的HTTP网络请求，能任意进行HTTP请求，比如你在开发一款浏览器App，或者你想偷懒，或者后台想偷懒，或者公司不给你升级服务器。。。</p>

<p>你可以在Info.plist 配置中改用下面的XML源码：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"> ```XML
</span><span class="line">    <span class="nt">&lt;key&gt;</span>NSAppTransportSecurity<span class="nt">&lt;/key&gt;</span>
</span><span class="line">    <span class="nt">&lt;dict&gt;</span>
</span><span class="line">        <span class="c">&lt;!--彻底倒退回不安全的HTTP网络请求，能任意进行HTTP请求 (不建议这样做)--&gt;</span>
</span><span class="line">	    <span class="nt">&lt;key&gt;</span>NSAllowsArbitraryLoads<span class="nt">&lt;/key&gt;</span>
</span><span class="line">	    <span class="nt">&lt;true/&gt;</span>
</span><span class="line">    <span class="nt">&lt;/dict&gt;</span>
</span><span class="line"> ```
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在 plist 文件里显示如下：</p>

<p><img src="http://i57.tinypic.com/9uq2c7.jpg" alt="enter image description here" /></p>

<h4 id="opt-out-with-exceptionsats">4. Opt Out With Exceptions（除特殊情况外，都不使用ATS）</h4>

<p>上面已经介绍了三种情景，还有一种可能你也会遇到：</p>

<p>当你的应用撤消了App Transport Security,，但同时定义了一些“例外”（Exception）。当你的应用从很多的服务器上取数据，但是也要与一个你可控的API交互。在这种情况下，在应用的Info.plist文件中指定任何加载都是被允许的，但是你也指定了一个或多个“例外”（Exception）来表明哪些是必须要求 App Transport Security的。下面是Info.plist文件应该会有的内容：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"> ```XML
</span><span class="line"><span class="nt">&lt;key&gt;</span>NSAppTransportSecurity<span class="nt">&lt;/key&gt;</span>
</span><span class="line">        <span class="nt">&lt;dict&gt;</span>
</span><span class="line">            <span class="nt">&lt;key&gt;</span>NSAllowsArbitraryLoads<span class="nt">&lt;/key&gt;</span>
</span><span class="line">            <span class="nt">&lt;true/&gt;</span>
</span><span class="line">            <span class="nt">&lt;key&gt;</span>NSExceptionDomains<span class="nt">&lt;/key&gt;</span>
</span><span class="line">            <span class="nt">&lt;dict&gt;</span>
</span><span class="line">                <span class="nt">&lt;key&gt;</span>api.tutsplus.com<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                <span class="nt">&lt;dict&gt;</span>
</span><span class="line">                    <span class="nt">&lt;key&gt;</span>NSExceptionAllowsInsecureHTTPLoads<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                    <span class="nt">&lt;false/&gt;</span>
</span><span class="line">                <span class="nt">&lt;/dict&gt;</span>
</span><span class="line">            <span class="nt">&lt;/dict&gt;</span>
</span><span class="line">        <span class="nt">&lt;/dict&gt;</span>
</span><span class="line"> ```
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在 plist 文件里显示如下：</p>

<p><img src="http://i62.tinypic.com/de1rw9.jpg" alt="enter image description here" /></p>

<p><del>【注：以上在Info.plist配置中的做法已经验证可行，但目前Apple的prerelease版本的官方文档并未提及Info.plist中配置的代码，我将密切关注官方文档，如有提及，再来更新[本文](https://github.com/ChenYilong/iOS9AdaptationTips) .你若发现官方文档有提及了，也可在[微博@iOS程序犭袁](http://weibo.com/luohanchenyilong/)通知下我。】（官方文档已经有阐述）</del></p>

<h4 id="certificate-transparency">Certificate Transparency</h4>

<p>虽然ATS大多数安全特性都是默认可用的，Certificate Transparency 是必须设置的。如果你有支持Certificate Transparency的证书，你可以检查NSRequiresCertificateTransparency关键字来使用Certificate Transparency。再次强调，如果你的证书不支持Certificate Transparency，此项需要设置为不可用。</p>

<p>如果需要调试一些由于采用了ATS而产生的问题，需要设置CFNETWORK_DIAGNOSTICS为1，这样就会打印出包含被访问的URL和ATS错误在内的NSURLSession错误信息。要确保处理了遇到的所有的错误消息，这样才能使ATS易于提高可靠性和扩展性。</p>

<h4 id="q-a">Q-A</h4>

<p>Q：我用xcode7编译的app，如果不在plist里面加关键字说明，ios9下不能进行网络请求，因为我们服务器并不支持 TLS 1.2 ，我要是直接下载app store上的，什么也没有做，也是能正常网络请求。</p>

<p>A：本文中所罗列的新特性，多数情况下指的是 iOS9.X-SDK 新特性，AppStore 的版本是基于 iOS8.X-SDK或 iOS7.X-SDK，所以并不受 iOS9新特性约束。也就是说：<strong>Xcode7给iOS8打设备包可以请求到网络，Xcode7给iOS9设备打的包请求不到网络，Xcode7和iOS9缺一不可，才需要网络适配ATS。</strong></p>

<p>那么，如何确认自己项目所使用的 SDK？在Targets-&gt;Build Setting–&gt;Architectures</p>

<p><img src="http://i58.tinypic.com/amsa9u.jpg" alt="enter image description here" /></p>

<p>Q：服务器已支持TLS 1.2 SSL ，但iOS9上还是不行，还要进行本文提出的适配操作。</p>

<p>A：那是因为：要注意 App Transport Security 要求 TLS 1.2，而且它要求站点使用支持forward secrecy协议的密码。证书也要求是符合ATS规格的，ATS只信任知名CA颁发的证书，小公司所使用的 self signed certificate，还是会被ATS拦截。。因此慎重检查与你的应用交互的服务器是不是符合ATS的要求非常重要。对此，建议使用下文中给出的NSExceptionDomains，并将你们公司的域名挂在下面。</p>

<p>官方文档 <a href="https://developer.apple.com/library/prerelease/ios/technotes/App-Transport-Security-Technote/index.html#//apple_ref/doc/uid/TP40016240"> <strong><em>App Transport Security Technote</em></strong> </a> 对CA颁发的证书要求：</p>

<blockquote>
  <p>Certificates must be signed using a SHA256 or better signature hash algorithm, with either a 2048 bit or greater RSA key or a 256 bit or greater Elliptic-Curve (ECC) key.
Invalid certificates result in a hard failure and no connection</p>
</blockquote>

<p>Q：我使用的是第三方的网络框架，比如 AFNetworking 、ASIHTTPRequest、CFSocket 等，这个有影响没有？</p>

<p>A： AFNetworking 有影响，其它没影响。</p>

<p>ATS 是只针对 <code>NSURLConnection</code> 、 <code>CFURL</code> 、 <code>NSURLSession</code> ，如果底层涉及到这三个类就会有影响。</p>

<p>现在的 AFNetworking 的 AFHTTPRequestOperationManager 实现是使用的 <code>NSURLConnection</code> 。</p>

<p>但 AFNetworking 也有更新计划，移除 <code>NSURLConnection</code> 相关API，迁移到 AFHTTPSessionManager ，但还未执行，详情见：<a href="https://github.com/AFNetworking/AFNetworking/issues/2806">https://github.com/AFNetworking/AFNetworking/issues/2806</a>。</p>

<p>Q：试了一下禁用 ATS 的方法 但是还是无法联网 仍然提示要使用https?</p>

<blockquote>
  <p>App Transport Security has blocked a cleartext HTTP (http://) resource load since it is insecure. Temporary exceptions can be configured via your app's Info.plist file.</p>
</blockquote>
<p>&lt;/p&gt;The resource could not be loaded because the App Transport Security policy requires the use of a secure connection.</p>

<p>A：遇到这类问题，90%是出现在“一个 Project 多 Target ”的情况下，所以
请确保你修改的，确实是你的 Target 所属的 Info.plist ！</p>

<p>如何确认？请前往这里，确认你 Target 所属的 Info.plist 究竟是哪个：</p>

<p>Project -&gt; Your Target -&gt; Build Settings -&gt; Info.plist File</p>

<p><img src="http://i60.tinypic.com/sbrfrl.jpg" alt="enter image description here" /></p>

<p>或者更直截了当一点，直接修改：</p>

<p>Project -&gt; Your Target —&gt;info－&gt; Custom iOS target properties－&gt; 添加禁用 ATS 的属性</p>

<p><img src="http://i60.tinypic.com/zvbt7b.jpg" alt="enter image description here" /></p>

<p>还有一种可能性是：禁用 ATS 的代码粘贴进 plist 时，位置不对，可以尝试放在 diwuhang</p>

<p>Q：我的项目是“一个 Project 多 Target ”，按照本文禁用 ATS 的方法，是不是每个 Info.plist 都要修改？</p>

<p>A：不需要，用到哪个 Target 修改哪个的 Info.plist ，Target 是独立的，不受其他 Target 的影响，也不会影响其他 Target。</p>

<p>Q：如何检测我们公司 HTTPS 是否符合 ATS 的要求？</p>

<p>A：
如果你的 App 的服务也在升级以适配ATS要求，可以使用如下的方式进行校验：</p>

<p>在OS X EI Capitan系统的终端中通过nscurl命令来诊断检查你的HTTPS服务配置是否满足Apple的ATS要求:</p>

<p><code>Objective-C
 $ nscurl --verbose --ats-diagnostics https://&lt;your_server_domain&gt;
</code></p>

<p>当然，你也可以让公司服务端的同事参考Apple提供官方指南App Transport Security Technote进行服务的升级配置以满足ATS的要求：</p>

<p>一个符合 ATS 要求的 HTTPS，应该满足如下条件：</p>

<ol>
  <li>Transport Layer Security协议版本要求TLS1.2以上</li>
  <li>服务的Ciphers配置要求支持Forward Secrecy等</li>
  <li>证书签名算法符合ATS要求等</li>
</ol>

<h2 id="demo2ios9">2.Demo2_iOS9新特性_更灵活的后台定位</h2>

<p>【iOS9在定位的问题上，有一个坏消息一个好消息】坏消息：如果不适配iOS9，就不能偷偷在后台定位（不带蓝条，见图）！好消息：将允许出现这种场景：同一App中的多个location manager：一些只能在前台定位，另一些可在后台定位，并可随时开启或者关闭特定location manager的后台定位。</p>

<p>如果没有请求后台定位的权限，也是可以在后台定位的，不过会带蓝条：
 ![enter image description here][9]
  [9]: https://i.imgur.com/UoqGHlG.png</p>

<p>如何偷偷在后台定位：请求后台定位权限：</p>

<pre><code> // 1. 实例化定位管理器
_locationManager = [[CLLocationManager alloc] init];
// 2. 设置代理
_locationManager.delegate = self;
// 3. 定位精度
[_locationManager setDesiredAccuracy:kCLLocationAccuracyBest];
// 4.请求用户权限：分为：⓵只在前台开启定位⓶在后台也可定位，
//注意：建议只请求⓵和⓶中的一个，如果两个权限都需要，只请求⓶即可，
//⓵⓶这样的顺序，将导致bug：第一次启动程序后，系统将只请求⓵的权限，⓶的权限系统不会请求，只会在下一次启动应用时请求⓶
if ([[[UIDevice currentDevice] systemVersion] floatValue] &gt;= 8) {
    //[_locationManager requestWhenInUseAuthorization];//⓵只在前台开启定位
    [_locationManager requestAlwaysAuthorization];//⓶在后台也可定位
}
// 5.iOS9新特性：将允许出现这种场景：同一app中多个location manager：一些只能在前台定位，另一些可在后台定位（并可随时禁止其后台定位）。
if ([[[UIDevice currentDevice] systemVersion] floatValue] &gt;= 9) {
    _locationManager.allowsBackgroundLocationUpdates = YES;
}
// 6. 更新用户位置
[_locationManager startUpdatingLocation];
</code></pre>

<p>但是如果照着这种方式尝试，而没有配置Info.plist，100%你的程序会崩溃掉，并报错：</p>

<blockquote>
  <p>*** Assertion failure in -[CLLocationManager setAllowsBackgroundLocationUpdates:], /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocationFramework_Sim/CoreLocation-1808.1.5/Framework/CoreLocation/CLLocationManager.m:593</p>
</blockquote>

<p>这个问题，有两种方式可以解决：</p>

<p>第一种：</p>

<p>要将  Info.plist 配置如下：
 <img src="https://i.imgur.com/MAoKbUe.png" alt="enter image description here" /></p>

<p>对应的 Info.plist 的XML源码是：</p>

<pre><code>&lt;key&gt;NSLocationAlwaysUsageDescription&lt;/key&gt;
&lt;string&gt;微博@iOS程序犭袁 请求后台定位权限&lt;/string&gt;

&lt;key&gt;UIBackgroundModes&lt;/key&gt;
&lt;array&gt;
    &lt;string&gt;location&lt;/string&gt;
&lt;/array&gt;
</code></pre>

<p>第二种：</p>

<p>在对应 target 的 Capabilities -&gt; Background Modes -&gt; 开启 Location Updates</p>

<p><img src="http://cdn2.raywenderlich.com/wp-content/uploads/2014/12/background_modes.png" alt="enter image description here" /></p>

<h2 id="section-1">3.企业级分发</h2>

<p>有两处变化：</p>

<ol>
  <li>iOS9以后，企业级分发ipa包将遭到与Mac上dmg安装包一样的待遇：默认不能安装，也不再出现“信任按钮”</li>
  <li>iOS9以后，企业分发时可能存在：下载的ipa包与网页两者的 bundle ID 无法匹配而导致下载失败的情况</li>
</ol>

<h3 id="ios9ipamacdmg">1. iOS9以后，企业级分发ipa包将遭到与Mac上dmg安装包一样的待遇：默认不能安装，也不再出现“信任按钮”</h3>

<p>iOS9之前，企业级分发十分方便：点击App出现“信任按钮”，</p>

<p><img src="https://i.imgur.com/aSmM8bk.png" alt="enter image description here" /></p>

<p>iOS9以后，企业级分发ipa包将遭到与Mac上dmg安装包一样的待遇：默认不能安装，也不再出现“信任按钮”</p>

<p><img src="http://i58.tinypic.com/2zecm83.jpg" alt="enter image description here" /></p>

<p>必须让用户进行gif图中的设置：</p>

<p><img src="https://i.imgur.com/PXM235L.gif" alt="enter image description here" /></p>

<h3 id="ios9ipa-bundle-id-">2. iOS9以后，企业分发时可能存在：下载的ipa包与网页两者的 bundle ID 无法匹配而导致下载失败的情况</h3>

<p>iOS9升级后众多企业分发的 app 已经出现了不能安装的情况，而iOS8或更早的系统不受影响。那是因为从iOS9以后，系统会在 ipa 包下载完之后，拿ipa包中的 bundle ID 与网页中的 plist 文件中的 bundle ID 进行比对，不一致不允许安装。</p>

<p>错误提示如下：</p>

<p><img src="http://i57.tinypic.com/28jckus.jpg" alt="enter image description here" /></p>

<p>网页中的 plist 文件中的 bundle ID 的作用可参考 <a href="http://blog.sina.com.cn/s/blog_6afb7d800101fa16.html">《iOS:苹果企业证书通过网页分发安装app》</a> 。</p>

<p>正如这篇文章提到的，“网页中的 plist 文件”是习惯的叫法，也有人称作“manifest文件”，比如 <a href="http://gknops.github.io/adHocGenerate/">这篇文章</a>。</p>

<p>而iOS9之前，苹果不会检查这一项，因此iOS9之前可以安装。</p>

<p>导致这一错误的原因除了粗心，还有开发者是故意设置不一致，据开发者说：</p>

<blockquote>
  <p>当初服务器 plist 的 bundle id 上故意做成成不一致。是为了解决一些人安装不上的问题。</p>
</blockquote>

<p>详情可参考： <a href="http://www.cocoachina.com/bbs/read.php?tid-324230-fpage-2-page-1.html">《升级到ios 9，企业版发布现在无法安装成功了，有人遇到了这种问题吗？》</a></p>

<p>如何知道是因为 bundle id 不一致造成的无法安装？</p>

<p>通过查看设备上的日志信息：有一个 itunesstored 进程提示安装信息：</p>

<pre><code>  itunesstored →  &lt;Warning&gt;: [Download]: Download task did finish: 8 for download: 2325728577585828282
  itunesstored →  &lt;Warning&gt;: [ApplicationWorkspace] Installing download: 2325728577585828282 with step(s): Install
  itunesstored →  &lt;Warning&gt;: [ApplicationWorkspace]: Installing software package with bundleID: com.***.***: bundleVersion: 1.01 path: /var/mobile/Media/Downloads/2325728577585828282/-1925357977307433048
  itunesstored →  &lt;Warning&gt;: BundleValidator: Failed bundleIdentifier: com.***.**** does not match expected bundleIdentifier: com.***.*********
  itunesstored →  &lt;Warning&gt;: [ApplicationWorkspace]: Bundle validated for bundleIdentifier: com.****.******success: 0
  itunesstored →  &lt;Warning&gt;: LaunchServices: Uninstalling placeholder for app &lt;LSApplicationProxy: 0x12677be70&gt; com.****.*******(Placeholder) &lt;file:///private/var/mobile/Containers/Bundle/Application/B62D8EA3-2052-4393-8A7E-3FD27228BFC2/2325728577585828282.app&gt;
  itunesstored →  &lt;Warning&gt;: LaunchServices: Uninstalling app &lt;LSApplicationProxy: 0x12677be70&gt; com.****.*****(Placeholder) &lt;file:///private/var/mobile/Containers/Bundle/Application/B62D8EA3-2052-4393-8A7E-3FD27228BFC2/2325728577585828282.app&gt;
</code></pre>

<p>其中的这一句很重要：</p>

<pre><code> itunesstored →  &lt;Warning&gt;: BundleValidator: Failed bundleIdentifier: com.***.**** does not match expected bundleIdentifier: com.***.*********
</code></pre>

<p>经过核对，果然是.ipa文件中真实的Bundle ID和manifest文件中配置的信息不匹配，然后测试发现：</p>

<blockquote>
  <p>iOS 9是校验bundle-identifier值的，而iOS 9以下版本是不校验，一旦iOS 9发现bundle-identifier不匹配，即使下载成功了，也会 Uninstall(日志中提示的)app的。</p>
</blockquote>

<p>适配方法：</p>

<ol>
  <li>两者的 bundle id 修改一致</li>
</ol>

<p>一旦出现iOS9能够安装企业版本APP，iOS9以下版本不能安装，一定先查看安装日志，然后核对每个参数配置。</p>

<p>manifest文件的参考配置。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"> ```XML
</span><span class="line"> <span class="cp">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot;</span>
</span><span class="line"><span class="cp">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span>
</span><span class="line"><span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
</span><span class="line"><span class="nt">&lt;dict&gt;</span>
</span><span class="line">   <span class="c">&lt;!-- array of downloads. --&gt;</span>
</span><span class="line">   <span class="nt">&lt;key&gt;</span>items<span class="nt">&lt;/key&gt;</span>
</span><span class="line">   <span class="nt">&lt;array&gt;</span>
</span><span class="line">       <span class="nt">&lt;dict&gt;</span>
</span><span class="line">           <span class="c">&lt;!-- an array of assets to download --&gt;</span>
</span><span class="line">           <span class="nt">&lt;key&gt;</span>assets<span class="nt">&lt;/key&gt;</span>
</span><span class="line">           <span class="nt">&lt;array&gt;</span>
</span><span class="line">               <span class="c">&lt;!-- software-package: the ipa to install. --&gt;</span>
</span><span class="line">               <span class="nt">&lt;dict&gt;</span>
</span><span class="line">                   <span class="c">&lt;!-- required.  the asset kind. --&gt;</span>
</span><span class="line">                   <span class="nt">&lt;key&gt;</span>kind<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                   <span class="nt">&lt;string&gt;</span>software-package<span class="nt">&lt;/string&gt;</span>
</span><span class="line">                   <span class="c">&lt;!-- optional.  md5 every n bytes.  --&gt;</span>
</span><span class="line">                   <span class="c">&lt;!-- will restart a chunk if md5 fails. --&gt;</span>
</span><span class="line">                   <span class="nt">&lt;key&gt;</span>md5-size<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                   <span class="nt">&lt;integer&gt;</span>10485760<span class="nt">&lt;/integer&gt;</span>
</span><span class="line">                   <span class="c">&lt;!-- optional.  array of md5 hashes --&gt;</span>
</span><span class="line">                   <span class="nt">&lt;key&gt;</span>md5s<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                   <span class="nt">&lt;array&gt;</span>
</span><span class="line">                       <span class="nt">&lt;string&gt;</span>41fa64bb7a7cae5a46bfb45821ac8bba<span class="nt">&lt;/string&gt;</span>
</span><span class="line">                       <span class="nt">&lt;string&gt;</span>51fa64bb7a7cae5a46bfb45821ac8bba<span class="nt">&lt;/string&gt;</span>
</span><span class="line">                   <span class="nt">&lt;/array&gt;</span>
</span><span class="line">                   <span class="c">&lt;!-- required.  the URL of the file to download. --&gt;</span>
</span><span class="line">                   <span class="nt">&lt;key&gt;</span>url<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                   <span class="nt">&lt;string&gt;</span>http://www.example.com/apps/foo.ipa<span class="nt">&lt;/string&gt;</span>
</span><span class="line">               <span class="nt">&lt;/dict&gt;</span>
</span><span class="line">               <span class="c">&lt;!-- display-image: the icon to display during download. --&gt;</span>
</span><span class="line">               <span class="nt">&lt;dict&gt;</span>
</span><span class="line">                   <span class="nt">&lt;key&gt;</span>kind<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                   <span class="nt">&lt;string&gt;</span>display-image<span class="nt">&lt;/string&gt;</span>
</span><span class="line">                   <span class="c">&lt;!-- optional. icon needs shine effect applied. --&gt;</span>
</span><span class="line">                   <span class="nt">&lt;key&gt;</span>needs-shine<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                   <span class="nt">&lt;true/&gt;</span>
</span><span class="line">                   <span class="nt">&lt;key&gt;</span>url<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                   <span class="nt">&lt;string&gt;</span>http://www.example.com/image.57×57.png<span class="nt">&lt;/string&gt;</span>
</span><span class="line">               <span class="nt">&lt;/dict&gt;</span>
</span><span class="line">               <span class="c">&lt;!-- full-size-image: the large 512×512 icon used by iTunes. --&gt;</span>
</span><span class="line">               <span class="nt">&lt;dict&gt;</span>
</span><span class="line">                   <span class="nt">&lt;key&gt;</span>kind<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                   <span class="nt">&lt;string&gt;</span>full-size-image<span class="nt">&lt;/string&gt;</span>
</span><span class="line">                   <span class="c">&lt;!-- optional.  one md5 hash for the entire file. --&gt;</span>
</span><span class="line">                   <span class="nt">&lt;key&gt;</span>md5<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                   <span class="nt">&lt;string&gt;</span>61fa64bb7a7cae5a46bfb45821ac8bba<span class="nt">&lt;/string&gt;</span>
</span><span class="line">                   <span class="nt">&lt;key&gt;</span>needs-shine<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                   <span class="nt">&lt;true/&gt;</span>
</span><span class="line">                   <span class="nt">&lt;key&gt;</span>url<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                   <span class="nt">&lt;string&gt;</span>http://www.example.com/image.512×512.jpg<span class="nt">&lt;/string&gt;</span>
</span><span class="line">               <span class="nt">&lt;/dict&gt;</span>
</span><span class="line">           <span class="nt">&lt;/array&gt;&lt;key&gt;</span>metadata<span class="nt">&lt;/key&gt;</span>
</span><span class="line">           <span class="nt">&lt;dict&gt;</span>
</span><span class="line">               <span class="c">&lt;!-- required --&gt;</span>
</span><span class="line">               <span class="nt">&lt;key&gt;</span>bundle-identifier<span class="nt">&lt;/key&gt;</span>
</span><span class="line">               <span class="nt">&lt;string&gt;</span>com.example.fooapp<span class="nt">&lt;/string&gt;</span>
</span><span class="line">               <span class="c">&lt;!-- optional (software only) --&gt;</span>
</span><span class="line">               <span class="nt">&lt;key&gt;</span>bundle-version<span class="nt">&lt;/key&gt;</span>
</span><span class="line">               <span class="nt">&lt;string&gt;</span>1.0<span class="nt">&lt;/string&gt;</span>
</span><span class="line">               <span class="c">&lt;!-- required.  the download kind. --&gt;</span>
</span><span class="line">               <span class="nt">&lt;key&gt;</span>kind<span class="nt">&lt;/key&gt;</span>
</span><span class="line">               <span class="nt">&lt;string&gt;</span>software<span class="nt">&lt;/string&gt;</span>
</span><span class="line">               <span class="c">&lt;!-- optional. displayed during download; --&gt;</span>
</span><span class="line">               <span class="c">&lt;!-- typically company name --&gt;</span>
</span><span class="line">               <span class="nt">&lt;key&gt;</span>subtitle<span class="nt">&lt;/key&gt;</span>
</span><span class="line">               <span class="nt">&lt;string&gt;</span>Apple<span class="nt">&lt;/string&gt;</span>
</span><span class="line">               <span class="c">&lt;!-- required.  the title to display during the download. --&gt;</span>
</span><span class="line">               <span class="nt">&lt;key&gt;</span>title<span class="nt">&lt;/key&gt;</span>
</span><span class="line">               <span class="nt">&lt;string&gt;</span>Example Corporate App<span class="nt">&lt;/string&gt;</span>
</span><span class="line">           <span class="nt">&lt;/dict&gt;</span>
</span><span class="line">       <span class="nt">&lt;/dict&gt;</span>
</span><span class="line">   <span class="nt">&lt;/array&gt;</span>
</span><span class="line"><span class="nt">&lt;/dict&gt;</span>
</span><span class="line"><span class="nt">&lt;/plist&gt;</span>
</span><span class="line"> ```
</span><span class="line">
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>使用fir.im等第三方分发平台：上述“ bundle id 不一致导致下载失败”这种情况只会出现在企业自己搭建网页分发的情形下，事实证明第三方的分发平台更加专业，已经很好地规避了该情况的发生。</li>
</ol>

<h3 id="q-a-1">Q-A</h3>

<p>Q：企业分发，企业版证书在iOS9上安装应用报 ` Ignore manifest download, already have bundleID: com.mycom.MyApp`  只有我的手机无法安装，别人 iOS9 都可以安装</p>

<p>A：这并非 iOS9的问题，iOS8及以前的系统也会出现，和缓存有关系，请尝试关机重启手机，然后就可以安装了。</p>

<h2 id="bitcode">4.Bitcode</h2>

<p>【前言】未来， Watch 应用必须包含 bitcode ，iOS不强制，Mac OS不支持。
但最坑的一点是： Xcode7 及以上版本会默认开启 bitcode 。</p>

<p>什么是 bitcode ？</p>

<p>通俗解释：在线版安卓ART模式。</p>

<p>Apple 官方文档–<a href="https://developer.apple.com/library/prerelease/ios/documentation/IDEs/Conceptual/AppDistributionGuide/AppThinning/AppThinning.html#//apple_ref/doc/uid/TP40012582-CH35"> <strong><em>App Distribution Guide – App Thinning (iOS, watchOS)</em></strong> </a>是这样定义的：</p>

<blockquote>
  <p>Bitcode is an intermediate representation of a compiled program. Apps you upload to iTunes Connect that contain bitcode will be compiled and linked on the App Store. Including bitcode will allow Apple to re-optimize your app binary in the future without the need to submit a new version of your app to the store.</p>
</blockquote>

<p>翻译过来就是：</p>

<blockquote>
  <p>bitcode 是被编译程序的一种中间形式的代码。包含 bitcode 配置的程序将会在 App Store 上被编译和链接。 bitcode 允许苹果在后期重新优化我们程序的二进制文件，而不需要我们重新提交一个新的版本到 App Store 上。</p>
</blockquote>

<p>在 Xcode简介— <a href="https://developer.apple.com/library/prerelease/ios/documentation/DeveloperTools/Conceptual/WhatsNewXcode/Articles/xcode_7_0.html"> <strong><em>What’s New in Xcode-New Features in Xcode 7</em></strong> </a>中这样描述：</p>

<blockquote>
  <p>Bitcode. When you archive for submission to the App Store, Xcode will compile your app into an intermediate representation. The App Store will then compile the bitcode down into the 64 or 32 bit executables as necessary.</p>
</blockquote>

<p>也就是</p>

<blockquote>
  <p>当我们提交程序到 App Store上时， Xcode 会将程序编译为一个中间表现形式( bitcode )。然后 App store 会再将这个 bitcode 编译为可执行的64位或32位程序。</p>
</blockquote>

<p>再看看这两段描述都是放在App Thinning(App瘦身)一节中，可以看出其与包的优化有关了。</p>

<p>打个比方，没有 bitcode  的 AppStore 里所提供的 App，类似在新华书店里卖捆绑销售的《四大名著丛书–精装版》，要买只能全买走，有了 bitcode 就好比这套四大名著每本都可以单卖，顾客就能按需购买。我们开发者在这个过程中扮演的角色是图书出版商的角色，应该照顾那些没钱一次买四本的顾客。（不要做不珍惜用户流量和存储空间的奸商。。）</p>

<p>那为什么第三方的 SDK 不支持 bitcode，我的 app 也就不能支持？打个比方，《四大名著丛书》只要有一本是可以单卖的，那么你很难再卖捆绑销售款的《四大名著丛书》了，所以干脆全都可以单卖，这大概就是 Apple 的逻辑。</p>

<p>App Thinning 官方文档解释如下：</p>

<blockquote>
  <p>The App Store and operating system optimize the installation of iOS and watchOS apps by tailoring app delivery to the capabilities of the user’s particular device, with minimal footprint. This optimization, called app thinning, lets you create apps that use the most device features, occupy minimum disk space, and accommodate future updates that can be applied by Apple. Faster downloads and more space for other apps and content provides a better user experience.</p>
</blockquote>

<p>开发者都知道，当前 iOS App 的编译打包方式是把适配兼容多个设备的执行文件及资源文件合并一个文件，上传和下载的文件则包含了所有的这些文件，导致占用较多的存储空间。</p>

<p>App Thinning是一个关于节省iOS设备存储空间的功能，它可以让iOS设备在安装、更新及运行App等场景中仅下载所需的资源，减少App的占用空间，从而节省设备的存储空间。</p>

<p>根据Apple官方文档的介绍，App Thinning主要有三个机制：</p>

<ol>
  <li>Slicing</li>
</ol>

<p>开发者把App安装包上传到AppStore后，Apple服务会自动对安装包切割为不同的应用变体(App variant)，当用户下载安装包时，系统会根据设备型号下载安装对应的单个应用变体。</p>

<ol>
  <li>On-Demand Resources</li>
</ol>

<p>ORD(随需资源)是指开发者对资源添加标签上传后，系统会根据App运行的情况，动态下载并加载所需资源，而在存储空间不足时，自动删除这类资源。</p>

<ol>
  <li>Bitcode
 开启Bitcode编译后，可以使得开发者上传App时只需上传Intermediate Representation(中间件)，而非最终的可执行二进制文件。 在用户下载App之前，AppStore会自动编译中间件，产生设备所需的执行文件供用户下载安装。</li>
</ol>

<p>（喵大(@onevcat)在其博客 <a href="http://onevcat.com/2015/06/ios9-sdk/">《开发者所需要知道的 iOS 9 SDK 新特性》</a> 中也描述了iOS 9中苹果在App瘦身中所做的一些改进，大家可以转场到那去研读一下。）</p>

<p>其中，Bitcode的机制可以支持动态的进行App Slicing，而对于Apple未来进行硬件升级的措施，此机制可以保证在开发者不重新发布版本的情况下而兼容新的设备。</p>

<p>Bitcode 是一种中间代码，那它是什么格式的呢？ LLVM 官方文档有介绍这种文件的格式：  <a href="http://llvm.org/docs/BitCodeFormat.html#llvm-bitcode-file-format"> <strong><em>LLVM Bitcode File Format</em></strong> </a> 。</p>

<p>如果你的应用也准备启用 Bitcode 编译机制，就需要注意以下几点：</p>

<ol>
  <li>Xcode 7默认开启 Bitcode ，如果应用开启 Bitcode，那么其集成的其他第三方库也需要是 Bitcode 编译的包才能真正进行 Bitcode 编译</li>
  <li>开启 Bitcode 编译后，编译产生的  <code>.app</code>  体积会变大(中间代码，不是用户下载的包)，且  <code>.dSYM</code>  文件不能用来崩溃日志的符号化(用户下载的包是 Apple 服务重新编译产生的，有产生新的符号文件)</li>
  <li>通过 Archive 方式上传 AppStore 的包，可以在Xcode的Organizer工具中下载对应安装包的新的符号文件</li>
</ol>

<p>如何适配？</p>

<p>在上面的错误提示中，提到了如何处理我们遇到的问题：</p>

<blockquote>
  <p>You must rebuild it with bitcode enabled (Xcode setting ENABLE_BITCODE), obtain an updated library from the vendor, or disable bitcode for this target. for architecture arm64</p>
</blockquote>

<p>正如开头所说的：</p>

<blockquote>
  <p>未来， Watch 应用必须包含 Bitcode ，iOS不强制，Mac OS不支持。
但最坑的一点是： Xcode7 及以上版本会默认开启 Bitcode 。</p>
</blockquote>

<p>Xcode 7 + 会开启 Bitcode。</p>

<p>也就是说，也两种方法适配：</p>

<p>方法一：更新 library 使包含 Bitcode ，否则会出现以下中的警告；</p>

<blockquote>
  <p>(null): URGENT: all bitcode will be dropped because
‘/Users/myname/Library/Mobile
Documents/com~apple~CloudDocs/foldername/appname/GoogleMobileAds.framework/GoogleMobileAds(GADSlot+AdEvents.o)’
was built without bitcode. You must rebuild it with bitcode enabled
(Xcode setting ENABLE_BITCODE), obtain an updated library from the
vendor, or disable bitcode for this target. Note: This will be an
error in the future.</p>
</blockquote>

<p>甚至有的会报错误，无法通过编译：</p>

<blockquote>
  <p>ld: ‘/Users/<strong>/Framework/SDKs/PolymerPay/Library/mobStat/lib</strong>SDK.a(**ForSDK.o)’ does not contain bitcode. You must rebuild it with bitcode enabled (Xcode setting ENABLE_BITCODE), obtain an updated library from the vendor, or disable bitcode for this target. for architecture arm64</p>
</blockquote>

<p>或：</p>

<blockquote>
  <p>ld: -undefined and -bitcode_bundle (Xcode setting  <code>ENABLE_BITCODE</code> =YES) cannot be used together
clang: error: linker command failed with exit code 1 (use -v to see invocation)</p>
</blockquote>

<p><img src="http://i62.tinypic.com/330vhug.jpg" alt="enter image description here" /></p>

<p>无论是警告还是错误，得到的信息是：我们引入的一个第三方库不包含bitcode。</p>

<p>方法二：关闭Bitcode，方法见下图</p>

<blockquote>
  <p><img src="https://i.imgur.com/OoOogUe.gif" alt="enter image description here" /></p>
</blockquote>

<p>我们可以在”Build Settings”-&gt;”Enable Bitcode”选项中看到：</p>

<p>用 Xcode 7+ 新建一个 iOS 程序时， bitcode 选项默认是设置为YES的。现在需要改成NO。</p>

<p>如果我们开启了 bitcode ，在提交包时，下面这个界面也会有个 bitcode 选项：</p>

<p><img src="http://i60.tinypic.com/5b2q7m.jpg" alt="enter image description here" /></p>

<p>那么 SDK 厂商如何支持 bitcode 呢？答案是只要在 Xcode7上重新编译一下就 ok 了。（请确保默认开启的 bitcode 没有去主动关闭）</p>

<p>但是如果仅仅是编译一下，则会出现下类似的如下警告：</p>

<p><img src="http://image17-c.poco.cn/mypoco/myphoto/20150928/17/1733887242015092817143106.jpg?1462x120_120" alt="enter image description here" /></p>

<blockquote>
  <p>ld: warning: full bitcode bundle could not be generated because ‘Lookback(Lookback.o)’ was built only with bitcode marker. The library must be generated from Xcode archive build with bitcode enabled (Xcode setting ENABLE_BITCODE)</p>
</blockquote>

<p>警告的消除步骤：</p>

<p>模拟器、真机分开打包，SDK在build的时候，让模拟器与真机分开build，模拟器不设置bitcode的参数，真机的加上，然后再合起来。（“合起来”指的是指令集，好比 x86_64 i386 跟 armv7 arm64合起来。）用命令行打包的话 加上这个参数OTHER_CFLAGS=“-fembed-bitcode”。</p>

<p>详情可移步：<a href="http://stackoverflow.com/a/31486233/3395008"> <strong><em>How do I xcodebuild a static library with Bitcode enabled?</em></strong> </a></p>

<p>更多信息，请移步</p>

<ol>
  <li><a href="https://developer.apple.com/library/prerelease/watchos/documentation/IDEs/Conceptual/AppDistributionGuide/AppThinning/AppThinning.html#//apple_ref/doc/uid/TP40012582-CH35-SW2">bitcode 苹果官方文档</a></li>
</ol>

<ol>
  <li>WWDC 2015 Session 102: <a href="https://developer.apple.com/videos/wwdc/2015/?id=102">“Platforms State of the Union”</a></li>
</ol>

<p><img src="http://mobileforward.net/wp-content/uploads/2015/06/Screen-Shot-2015-06-12-at-6.57.54-PM-697x351.png" alt="enter image description here" /></p>

<h2 id="demo3---ios9-url-scheme-">5.Demo3—iOS9 URL Scheme 适配_引入白名单概念</h2>

<p><a href="https://developer.apple.com/videos/wwdc/2015/?id=703"> <strong><em>WWDC 2015 Session 703: “Privacy and Your App</em></strong> </a> （ 时间在30：18左右）关于 <code>URL scheme</code> 的介绍，指出：</p>

<p><img src="https://i.imgur.com/2HxWQqq.png" alt="enter image description here" /></p>

<p>也就是说：在iOS9中，如果使用 <code>canOpenURL:</code> 方法，该方法所涉及到的  <code>URL scheme</code> 必须在”Info.plist”中将它们列为白名单，否则不能使用。key叫做LSApplicationQueriesSchemes ，键值内容是</p>

<pre><code>&lt;key&gt;LSApplicationQueriesSchemes&lt;/key&gt;
&lt;array&gt;
 &lt;string&gt;urlscheme&lt;/string&gt;
 &lt;string&gt;urlscheme2&lt;/string&gt;
 &lt;string&gt;urlscheme3&lt;/string&gt;
 &lt;string&gt;urlscheme4&lt;/string&gt;
&lt;/array&gt; 
</code></pre>

<p>白名单上限是50个：</p>

<p><a href="https://developer.apple.com/videos/wwdc/2015/?id=703"> <strong><em>WWDC 2015 Session 703: “Privacy and Your App</em></strong> </a> ）有说明：</p>

<blockquote>

  <p>“So for apps that are linked before iOS 9 and are running on iOS 9, they will be given 50 distinct URL schemes.”  –  WWDC 2015 session 703 Privacy and Your App</p>
</blockquote>

<p><del>
然而，我们却发现了一件意外的事：
当我们在 iOS9-beta（截至本文发布时，iOS9正式版还未发布）中，使用 `openURL:`  方法时，不在白名单中的 URL 会报错 &gt; “This app is not allowed to query for scheme xxx” 。
无论是官方文档还是 WWDC 的视频中都没有提及 `openURL:`  方法的这一变动，所以猜测这是 beta 版本一个 bug ，截至本文发布时，iOS9正式版还未发布，期望在正式版中能得以修复。在此之前，可通过将 `openURL:`  用到的 `URL scheme` 列入白名单来解决这个 bug 。（经测试：iOS9 beta5中已经修复）</del></p>

<p>iOS9中 <code>openURL:</code> 方法没有什么实质性的变化，仅仅多了一个确认动作：</p>

<p><img src="http://i57.tinypic.com/8zjh35.jpg" alt="enter image description here" /></p>

<p>苹果为什么要这么做？</p>

<p>在 iOS9 之前，你可以使用 <code>canOpenURL:</code> 监测用户手机里到底装没装微信，装没装微博。但是也有一些别有用心的 App ，这些 App 有一张常用 App 的 <code>URL scheme</code>，然后他们会多次调用<code>canOpenURL:</code> 遍历该表，来监测用户手机都装了什么 App ，比如这个用户装了叫“大姨妈”的App，你就可以知道这个用户是女性，你就可以只推给这个用户女性用品的广告。这是侵犯用户隐私的行为。</p>

<p>这也许就是原因。</p>

<p>本项目中给出了一个演示用的 Demo ，仓库的文件夹叫“Demo3_iOS9URLScheme适配_引入白名单概念”，Demo引用自<a href="https://github.com/gatzsche/LSApplicationQueriesSchemes-Working-Example"> <strong><em>LSApplicationQueriesSchemes-Working-Example</em></strong> </a></p>

<p>Demo结构如下：</p>

<p><img src="http://i61.tinypic.com/2hyyuqv.jpg" alt="enter image description here" /></p>

<p>主要演示的情景是这样的：</p>

<p>假设有两个App： weixin(微信) and 我的App. 我的App 想监测 weixin(微信) 是否被安装了. “weixin(微信)” 在 info.plist  中定义了 URL scheme :</p>

<pre><code>&lt;key&gt;CFBundleURLTypes&lt;/key&gt;
&lt;array&gt;
    &lt;dict&gt;
        &lt;key&gt;CFBundleURLSchemes&lt;/key&gt;
        &lt;array&gt;
            &lt;string&gt;weixin&lt;/string&gt;
        &lt;/array&gt;
    &lt;/dict&gt;
&lt;/array&gt;
</code></pre>

<p>我的App 想监测 weixin(微信) 是否被安装了 ：</p>

<pre><code>[[UIApplication sharedApplication]
                    canOpenURL:[NSURL URLWithString:@"weixin(微信)://"]];
</code></pre>

<p>即使你安装了微信，在iOS9中，这有可能会返回NO：</p>

<p>因为你需要将 “weixin(微信)” 添加到 “我的App” 的 info.plist 文件中：</p>

<pre><code>&lt;key&gt;LSApplicationQueriesSchemes&lt;/key&gt;
&lt;array&gt;
    &lt;string&gt;weixin&lt;/string&gt;
&lt;/array&gt;
</code></pre>

<p>（以上只是为了演示，实际开发中，你不仅需要添加“weixin”还需要“wechat”这两个。具体下文给出表格）</p>

<p><del>关于 `openURL:` 这个问题，可在 Demo3 中自行测试，如果该 bug 修复了的话，请私信[微博@iOS程序犭袁](http://weibo.com/luohanchenyilong/)，我再来更新本文。（经测试：iOS9 beta5中已经修复）</del></p>

<p>另外，推荐一篇<a href="http://awkwardhare.com/post/121196006730/quick-take-on-ios-9-url-scheme-changes">博文</a>，其中最关键的是以下部分：</p>

<blockquote>
  <p>If you call the “canOpenURL” method on a URL that is not in your whitelist, it will return “NO”, even if there is an app installed that has registered to handle this scheme. A “This app is not allowed to query for scheme xxx” syslog entry will appear.</p>
</blockquote>

<p><del>&gt; If you call the “openURL” method on a URL that is not in your whitelist, it will fail silently. A “This app is not allowed to query for scheme xxx” syslog entry will appear.
</del></p>

<h3 id="url-scheme">常见 URL Scheme</h3>

<p>如果想一次性集成最常用的微信、新浪微博、QQ、支付宝四者的白名单，则配置如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"> ```XML
</span><span class="line"> <span class="nt">&lt;key&gt;</span>LSApplicationQueriesSchemes<span class="nt">&lt;/key&gt;</span>
</span><span class="line"><span class="nt">&lt;array&gt;</span>
</span><span class="line">    <span class="c">&lt;!-- 微信 URL Scheme 白名单--&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>wechat<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>weixin<span class="nt">&lt;/string&gt;</span>
</span><span class="line">
</span><span class="line">    <span class="c">&lt;!-- 新浪微博 URL Scheme 白名单--&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>sinaweibohd<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>sinaweibo<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>sinaweibosso<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>weibosdk<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>weibosdk2.5<span class="nt">&lt;/string&gt;</span>
</span><span class="line">
</span><span class="line">    <span class="c">&lt;!-- QQ、Qzone URL Scheme 白名单--&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqqapi<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqq<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqqOpensdkSSoLogin<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqqconnect<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqqopensdkdataline<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqqopensdkgrouptribeshare<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqqopensdkfriend<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqqopensdkapi<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqqopensdkapiV2<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqqopensdkapiV3<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqzoneopensdk<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>wtloginmqq<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>wtloginmqq2<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqqwpa<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqzone<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqzonev2<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqzoneshare<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>wtloginqzone<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqzonewx<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqzoneopensdkapiV2<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqzoneopensdkapi19<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqzoneopensdkapi<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqzoneopensdk<span class="nt">&lt;/string&gt;</span>
</span><span class="line">
</span><span class="line">    <span class="c">&lt;!-- 支付宝  URL Scheme 白名单--&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>alipay<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>alipayshare<span class="nt">&lt;/string&gt;</span>
</span><span class="line">
</span><span class="line"><span class="nt">&lt;/array&gt;</span>
</span><span class="line"> ```
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>plist 文件看起来会是这样的：</p>

<p><img src="http://i58.tinypic.com/e5pyee.jpg" alt="enter image description here" /></p>

<p>其他平台可在下面的列表中查询：
各平台OpenURL白名单说明</p>

<table>
  <thead>
    <tr>
      <th>平台名称</th>
      <th>URL Schem</th>
      <th>补充说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>微信</td>
      <td>wechat,&lt;/p&gt; weixin</td>
      <td> </td>
    </tr>
    <tr>
      <td>支付宝</td>
      <td>alipay,&lt;/p&gt;alipayshare</td>
      <td> </td>
    </tr>
    <tr>
      <td>QQ</td>
      <td>mqqOpensdkSSoLogin, &lt;/p&gt;mqqopensdkapiV2,&lt;/p&gt;mqqopensdkapiV3,&lt;/p&gt;wtloginmqq2,&lt;/p&gt;mqq,&lt;/p&gt;mqqapi</td>
      <td> </td>
    </tr>
    <tr>
      <td>QZONE</td>
      <td>mqzoneopensdk, &lt;/p&gt;mqzoneopensdkapi,&lt;/p&gt;mqzoneopensdkapi19,&lt;/p&gt;mqzoneopensdkapiV2,&lt;/p&gt;mqqOpensdkSSoLogin,&lt;/p&gt;mqqopensdkapiV2,&lt;/p&gt;mqqopensdkapiV3,&lt;/p&gt;wtloginmqq2,&lt;/p&gt;mqqapi,&lt;/p&gt;mqqwpa，&lt;/p&gt;mqzone，&lt;/p&gt;mqq</td>
      <td>[注:若同时使用QQ和QZONE,则直接添加本格即可]</td>
    </tr>
    <tr>
      <td>新浪微博</td>
      <td>sinaweibo,&lt;/p&gt;sinaweibohd,&lt;/p&gt;sinaweibosso,&lt;/p&gt;sinaweibohdsso,&lt;/p&gt;weibosdk,&lt;/p&gt;weibosdk2.5</td>
      <td>[后两个若导入新浪SDK则需要]</td>
    </tr>
    <tr>
      <td>豆瓣</td>
      <td>无需配置</td>
      <td> </td>
    </tr>
    <tr>
      <td>开心网</td>
      <td>无需配置</td>
      <td> </td>
    </tr>
    <tr>
      <td>易信</td>
      <td>yixin,&lt;/p&gt; yixinopenapi</td>
      <td> </td>
    </tr>
    <tr>
      <td>Google+</td>
      <td>googlechrome, &lt;/p&gt;googlechrome-x-callback,&lt;/p&gt;hasgplus4,&lt;/p&gt;com.google.gppconsent,&lt;/p&gt;com.google.gppconsent.2.2.0,&lt;/p&gt;com.google.gppconsent.2.3.0,&lt;/p&gt;com.google.gppconsent.2.4.0,&lt;/p&gt;com.google.gppconsent.2.4.1</td>
      <td> </td>
    </tr>
    <tr>
      <td>人人网</td>
      <td>renrenapi,&lt;/p&gt;renrenios,&lt;/p&gt;renreniphone,&lt;/p&gt;renren,</td>
      <td> </td>
    </tr>
    <tr>
      <td>Facebook</td>
      <td>fbauth2</td>
      <td> </td>
    </tr>
    <tr>
      <td>Twitter</td>
      <td>无需配置</td>
      <td> </td>
    </tr>
    <tr>
      <td>Pocket</td>
      <td>pocket-oauth-v1</td>
      <td> </td>
    </tr>
    <tr>
      <td>Pinterest</td>
      <td>pinit</td>
      <td> </td>
    </tr>
    <tr>
      <td>Instagram</td>
      <td>instagram</td>
      <td> </td>
    </tr>
    <tr>
      <td>WhatsApp</td>
      <td>whatsapp</td>
      <td> </td>
    </tr>
    <tr>
      <td>Line</td>
      <td>line</td>
      <td> </td>
    </tr>
    <tr>
      <td>KakaoTalk</td>
      <td>kakaolink</td>
      <td> </td>
    </tr>
    <tr>
      <td>KaokaoStory</td>
      <td>storylink</td>
      <td> </td>
    </tr>
    <tr>
      <td>LinkedIn</td>
      <td>无需配置</td>
      <td> </td>
    </tr>
    <tr>
      <td>Tumblr</td>
      <td>无需配置</td>
      <td> </td>
    </tr>
    <tr>
      <td>非平台类</td>
      <td>无需配置</td>
      <td>( 如短信，复制，邮件等)</td>
    </tr>
  </tbody>
</table>

<h3 id="q-a-2">Q-A</h3>

<p>Q：我用xcode7编译的app，如果不在plist里面加scheme，ios9下qq就会不显示，因为我用了qqsdk里的判断是否安装qq的方法，我要是直接下载app store上的，没有加scheme，qq也是能显示。</p>

<p>A：本文中所罗列的新特性，多数情况下指的是 iOS9.X-SDK 新特性，AppStore 的版本是基于 iOS8.X-SDK或 iOS7.X-SDK，所以并不受 iOS9新特性约束。也就是说：<strong>Xcode7给iOS8打设备包不需要白名单也能调用“canOpenURL” ，Xcode7给iOS9设备打的包则不然，Xcode7和iOS9缺一不可，才需要适配URL Scheme。</strong></p>

<p>那么，如何确认自己项目所使用的 SDK？在Targets-&gt;Build Setting–&gt;Architectures</p>

<p><img src="http://i58.tinypic.com/amsa9u.jpg" alt="enter image description here" /></p>

<p>Q：我们自己的应用跳到微信、支付宝、微博等的URLScheme是固定几个，但是从微信、支付宝、微博跳回到我们的应用的URLScheme可能是成千上万个，那他们那些大厂是如何做这个白名单？</p>

<p>A：白名单策略影响的仅仅是 canOpenURL: 接口，OpenURL: 不受影响，这些大厂只调用 openURL: 所以不受 iOS9 的影响。</p>

<p>Q：文中提到了设置白名单的原因，然而，如果这些别有用心的APP在它自己的白名单列出它关心的APP, 然后依次调用canOpenURL来检测，照样可以监控用户都安装了哪些APP啊？所以我依然不明白苹果这样做得原因。</p>

<p>A：白名单的数目上限是50个。苹果这样子做，使得最多只能检测50个App。</p>

<p>Q：按照文中的适配方法，error原因就没有了的确没问题了，但是还是会打印如下信息：</p>

<p><code>Objective-C
 -canOpenURL: failed for URL: "XXXXXXXXXX" - error: "(null)"。
</code></p>

<p>A：这个模拟器的一个 bug，无论使用iOS9的真机还是模拟器均出现该问题，估计 Xcode 后续的升级中会修复掉。</p>

<p>那如何判断日志究竟是 Xcode bug 造成的还是没有适配造成的？看error的值，如果是null，则是 bug。（2015-09-21更）</p>

<h2 id="ipadslide-over--split-view">6. iPad适配Slide Over 和 Split View</h2>

<p><img src="http://cdn1.tnwcdn.com/wp-content/blogs.dir/1/files/2015/06/ew-.gif" alt="enter image description here" /></p>

<p>【iPad适配Slide Over 和 Split View】
若想适配multi tasking特性，唯一的建议：弃纯代码，改用storyboard、xib，纵观苹果WWDC所有Demo均是如此：</p>

<ol>
  <li>
    <p><a href="https://developer.apple.com/videos/wwdc/2015/?id=218">Mysteries of Auto Layout, Part 1</a></p>
  </li>
  <li>
    <p><a href="https://developer.apple.com/videos/wwdc/2015/?id=215">What’s New in Storyboards</a></p>
  </li>
  <li>
    <p><a href="https://developer.apple.com/videos/wwdc/2015/?id=407">Implementing UI Designs in Interface Builder</a></p>
  </li>
  <li>
    <p><a href="https://developer.apple.com/videos/wwdc/2015/?id=205">Getting Started with Multitasking on iPad in iOS 9</a></p>
  </li>
  <li>
    <p><a href="https://developer.apple.com/videos/wwdc/2015/?id=212">Optimizing Your App for Multitasking on iPad in iOS</a></p>
  </li>
</ol>

<h2 id="ui-">7.字体间隙变大导致 UI 显示异常</h2>

<p>iOS8中，字体是Helvetica，中文的字体有点类似于“华文细黑”。只是苹果手机自带渲染，所以看上去可能比普通的华文细黑要美观。iOS9中，中文系统字体变为了专为中国设计的“苹方” 有点类似于一种word字体“幼圆”。字体有轻微的加粗效果，并且最关键的是字体间隙变大了！</p>

<p>所以很多原本写死了width的label可能会出现“…”的情况：</p>

<table>
  <thead>
    <tr>
      <th>情况</th>
      <th>显示</th>
      <th>解释</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>XIB</td>
      <td>将 label 的 width 写死</td>
      <td>下面这两张图也可以直观的看出同一个界面，同一个label的变化。</td>
    </tr>
    <tr>
      <td>iOS8</td>
      <td><img src="http://images2015.cnblogs.com/blog/717809/201509/717809-20150919223903476-176844619.png" alt="enter image description here" /></td>
      <td>正常</td>
    </tr>
    <tr>
      <td>iOS9</td>
      <td><img src="http://images2015.cnblogs.com/blog/717809/201509/717809-20150919223918101-1917717144.png" alt="enter image description here" /></td>
      <td>最后四位数字、、、</td>
    </tr>
  </tbody>
</table>

<p>如果不将 label 的 width 写死，仅仅添加左端约束则右端的四个数字会越界</p>

<table>
  <thead>
    <tr>
      <th>情况</th>
      <th>显示</th>
      <th>解释</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>XIB</td>
      <td><img src="http://i60.tinypic.com/292r428.jpg" alt="enter image description here" /></td>
      <td>如果仅仅添加左端约束</td>
    </tr>
    <tr>
      <td>iOS8</td>
      <td><img src="http://i58.tinypic.com/2vj92bn.jpg" alt="enter image description here" /></td>
      <td>正常</td>
    </tr>
    <tr>
      <td>iOS9</td>
      <td><img src="http://i62.tinypic.com/2czaq1v.jpg" alt="enter image description here" /></td>
      <td>“3199”这四个数字越界了</td>
    </tr>
  </tbody>
</table>

<p>所以为了在界面显示上不出错，就算是固定长度的文字也还是建议使用sizetofit 或者ios向上取整 ceilf() 或者提前计算：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"><span class="bp">CGSize</span> <span class="n">size</span> <span class="o">=</span> <span class="p">[</span><span class="n">title</span> <span class="nl">sizeWithAttributes</span><span class="p">:</span><span class="l">@{</span><span class="nl">NSFontAttributeName</span><span class="p">:</span> <span class="p">[</span><span class="bp">UIFont</span> <span class="nl">systemFontOfSize</span><span class="p">:</span><span class="mf">14.0f</span><span class="p">]</span><span class="l">}</span><span class="p">];</span>
</span><span class="line"><span class="bp">CGSize</span> <span class="n">adjustedSize</span> <span class="o">=</span> <span class="n">CGSizeMake</span><span class="p">(</span><span class="n">ceilf</span><span class="p">(</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">),</span> <span class="n">ceilf</span><span class="p">(</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">));</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="xcode7-">8.升级 Xcode7 后的崩溃与警告</h2>

<h3 id="sdk--ios9--crash">旧版本新浪微博 SDK 在 iOS9 上会导致的 Crash</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"> <span class="n">app</span> <span class="n">was</span> <span class="n">compiled</span> <span class="n">with</span> <span class="n">optimization</span> <span class="o">-</span> <span class="n">stepping</span> <span class="n">may</span> <span class="n">behave</span> <span class="n">oddly</span><span class="p">;</span> <span class="n">variables</span> <span class="n">may</span> <span class="n">not</span> <span class="n">be</span> <span class="n">available</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>打印出来这句话，然后崩溃。多是启动的过程中程序就崩溃。</p>

<p>在iOS9下，新浪微博SDK里面使用的 JSONKit 在部分机型可能导致崩溃。崩溃信息如下图。</p>

<p><img src="http://wiki.mob.com/wp-content/uploads/2015/09/4062130C-1138-4352-89AF-E518F189A851.png" alt="enter image description here" /></p>

<p>解决：更新新浪微博SDK，新浪的SDK最新版做了对iOS9兼容。</p>

<h3 id="ios9--masonry-">iOS9 下使用 Masonry 会引起崩溃的一种情况</h3>

<p>在 iOS8（及以前）我们有这样的经验：</p>

<blockquote>
  <p><code>leading 与 left</code>  、 <code>trailing 与 right</code>  在正常情况下是等价的 但是当一些布局是从右至左时(比如阿拉伯文?没有类似的经验) 则会对调，换句话说就是基本可以不理不用，用left和right就好了</p>
</blockquote>

<p>（摘自 <a href="http://adad184.com/2014/09/28/use-masonry-to-quick-solve-autolayout/">《Masonry介绍与使用实践(快速上手Autolayout)》</a> ）</p>

<p>但在概念里，还是一直将 leading 与 left 划为等号，这样做在 iOS8（及以前）上是正常的，但在 iOS9 上这样的观念可能会引起崩溃，比如：</p>

<p><code>Objective-C
 make.left.equalTo(self.mas_leading).offset(15);
</code></p>

<p>应该为：</p>

<p><code>Objective-C
 make.left.equalTo(self.mas_left).offset(15);
</code></p>

<p>同理 mas_training 也需要改为right</p>

<p>同时也有人反馈说也需要作如下调整否则也会崩溃：</p>

<p>toplayoutGuide 替换成 mas_toplayoutguide
bottomlayoutguide 替换成 mas_bottomlayoutguide</p>

<p>而且使用类似 <code>make.top.equalTo(topView.mas_baseline).with.offset(5);</code> 涉及 <code>mas_baseline</code> 的语句也会引起崩溃。</p>

<p>暂时的解决方案是</p>

<p>使用 <code>make.top.equalTo(self.mas_topLayoutGuide).with.offset(5);</code> 来替换原来的  <code>self.topLayoutGuide.mas_baseline</code>  反正效果是一样的</p>

<p>原来的代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">headerView</span> <span class="nl">mas_makeConstraints</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="n">MASConstraintMaker</span> <span class="o">*</span><span class="n">make</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="bp">UIView</span> <span class="o">*</span><span class="n">topView</span> <span class="o">=</span> <span class="p">(</span><span class="bp">UIView</span> <span class="o">*</span><span class="p">)</span><span class="nb">self</span><span class="p">.</span><span class="n">topLayoutGuide</span><span class="p">;</span>
</span><span class="line">    <span class="n">make</span><span class="p">.</span><span class="n">top</span><span class="p">.</span><span class="n">equalTo</span><span class="p">(</span><span class="n">topView</span><span class="p">.</span><span class="n">mas_baseline</span><span class="p">).</span><span class="n">with</span><span class="p">.</span><span class="n">offset</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span><span class="line">    <span class="n">make</span><span class="p">.</span><span class="n">leading</span><span class="p">.</span><span class="n">equalTo</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">mas_leading</span><span class="p">).</span><span class="n">with</span><span class="p">.</span><span class="n">offset</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class="line">    <span class="n">make</span><span class="p">.</span><span class="n">right</span><span class="p">.</span><span class="n">equalTo</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">mas_right</span><span class="p">).</span><span class="n">with</span><span class="p">.</span><span class="n">offset</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">);</span>
</span><span class="line">    <span class="n">make</span><span class="p">.</span><span class="n">height</span><span class="p">.</span><span class="n">equalTo</span><span class="p">(</span><span class="mi">@34</span><span class="p">);</span>
</span><span class="line"><span class="p">}];</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>修改后：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">headerView</span> <span class="nl">mas_makeConstraints</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="n">MASConstraintMaker</span> <span class="o">*</span><span class="n">make</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="n">make</span><span class="p">.</span><span class="n">top</span><span class="p">.</span><span class="n">equalTo</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">mas_topLayoutGuide</span><span class="p">).</span><span class="n">with</span><span class="p">.</span><span class="n">offset</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span><span class="line">    <span class="n">make</span><span class="p">.</span><span class="n">left</span><span class="p">.</span><span class="n">equalTo</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">mas_left</span><span class="p">).</span><span class="n">with</span><span class="p">.</span><span class="n">offset</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class="line">    <span class="n">make</span><span class="p">.</span><span class="n">right</span><span class="p">.</span><span class="n">equalTo</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">mas_right</span><span class="p">).</span><span class="n">with</span><span class="p">.</span><span class="n">offset</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">);</span>
</span><span class="line">    <span class="n">make</span><span class="p">.</span><span class="n">height</span><span class="p">.</span><span class="n">equalTo</span><span class="p">(</span><span class="mi">@34</span><span class="p">);</span>
</span><span class="line"><span class="p">}];</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="xcode-">Xcode 升级后，旧的状态栏的样式设置方式会引起警告</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"><span class="o">&lt;</span><span class="n">Error</span><span class="o">&gt;:</span> <span class="nl">CGContextSaveGState</span><span class="p">:</span> <span class="n">invalid</span> <span class="n">context</span> <span class="mh">0x0</span><span class="p">.</span> <span class="n">If</span> <span class="n">you</span> <span class="n">want</span> <span class="n">to</span> <span class="n">see</span> <span class="n">the</span> <span class="n">backtrace</span><span class="p">,</span> <span class="n">please</span> <span class="n">set</span> <span class="n">CG_CONTEXT_SHOW_BACKTRACE</span> <span class="n">environmental</span> <span class="n">variable</span><span class="p">.</span>
</span><span class="line"><span class="o">&lt;</span><span class="n">Error</span><span class="o">&gt;:</span> <span class="nl">CGContextTranslateCTM</span><span class="p">:</span> <span class="n">invalid</span> <span class="n">context</span> <span class="mh">0x0</span><span class="p">.</span> <span class="n">If</span> <span class="n">you</span> <span class="n">want</span> <span class="n">to</span> <span class="n">see</span> <span class="n">the</span> <span class="n">backtrace</span><span class="p">,</span> <span class="n">please</span> <span class="n">set</span> <span class="n">CG_CONTEXT_SHOW_BACKTRACE</span> <span class="n">environmental</span> <span class="n">variable</span><span class="p">.</span>
</span><span class="line"><span class="o">&lt;</span><span class="n">Error</span><span class="o">&gt;:</span> <span class="nl">CGContextRestoreGState</span><span class="p">:</span> <span class="n">invalid</span> <span class="n">context</span> <span class="mh">0x0</span><span class="p">.</span> <span class="n">If</span> <span class="n">you</span> <span class="n">want</span> <span class="n">to</span> <span class="n">see</span> <span class="n">the</span> <span class="n">backtrace</span><span class="p">,</span> <span class="n">please</span> <span class="n">set</span> <span class="n">CG_CONTEXT_SHOW_BACKTRACE</span> <span class="n">environmental</span> <span class="n">variable</span><span class="p">.</span>
</span><span class="line"> <span class="err">```</span>
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>出错原因：设置 app 的状态栏样式的时候，使用了旧的方式，在 info.plist 里面的 <code>View controller-based status bar appearance</code> 默认会为 YES，即使不设置也是 YES，但一般 iOS6 的时候为了设置状态栏样式，需要将其设为NO，iOS7，8也兼容，但是到了iOS9 就会报警告。</p>

<p>解决办法：</p>

<p>删除原先的设置代码，通常老的设置方式是这样的：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"> <span class="c1">//设置状态栏的白色</span>
</span><span class="line">    <span class="p">[[</span><span class="bp">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="nl">setStatusBarStyle</span><span class="p">:</span><span class="n">UIStatusBarStyleLightContent</span><span class="p">];</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>删除的原因见下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"> <span class="c1">// Setting the statusBarStyle does nothing if your application is using the default UIViewController-based status bar system.</span>
</span><span class="line"><span class="k">@property</span><span class="p">(</span><span class="k">readwrite</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="n">UIStatusBarStyle</span> <span class="n">statusBarStyle</span> <span class="n">NS_DEPRECATED_IOS</span><span class="p">(</span><span class="mi">2</span><span class="n">_0</span><span class="p">,</span> <span class="mi">9</span><span class="n">_0</span><span class="p">,</span> <span class="s">&quot;Use -[UIViewController preferredStatusBarStyle]&quot;</span><span class="p">);</span>
</span><span class="line"><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setStatusBarStyle:</span><span class="p">(</span><span class="n">UIStatusBarStyle</span><span class="p">)</span><span class="nv">statusBarStyle</span> <span class="nf">animated:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span> <span class="n">NS_DEPRECATED_IOS</span><span class="p">(</span><span class="mi">2</span><span class="n">_0</span><span class="p">,</span> <span class="mi">9</span><span class="n">_0</span><span class="p">,</span> <span class="s">&quot;Use -[UIViewController preferredStatusBarStyle]&quot;</span><span class="p">);</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>修改方式是在 <code>Info.plist</code> 文件中做如下修改：</p>

<p>将 <code>View controller-based status bar appearance</code> 删除（默认为 YES），或设置为YES：</p>

<p>对应的 plist 里的 XML源码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"> ```Objective-C
</span><span class="line"> <span class="nt">&lt;key&gt;</span>UIViewControllerBasedStatusBarAppearance<span class="nt">&lt;/key&gt;</span>
</span><span class="line">	<span class="nt">&lt;true/&gt;</span>
</span><span class="line"> ```
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>看起来长这样：</p>

<p><img src="http://i61.tinypic.com/jrsjnd.jpg" alt="enter image description here" /></p>

<p>然后使用新的方式来实现状态栏的样式：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"><span class="o">-</span> <span class="p">(</span><span class="n">UIStatusBarStyle</span><span class="p">)</span><span class="n">preferredStatusBarStyle</span><span class="p">;</span>
</span><span class="line"><span class="p">-</span> <span class="p">(</span><span class="bp">UIViewController</span> <span class="o">*</span><span class="p">)</span><span class="nf">childViewControllerForStatusBarStyle</span><span class="p">;</span>
</span><span class="line"><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setNeedsStatusBarAppearanceUpdate</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>比如，你想将状态栏设置为白色，就可以这样写：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"><span class="c1">//设置状态栏的白色</span>
</span><span class="line"> <span class="o">-</span><span class="p">(</span><span class="n">UIStatusBarStyle</span><span class="p">)</span><span class="n">preferredStatusBarStyle</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="n">UIStatusBarStyleLightContent</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>记得要 clean 下或者删除应用程序重新运行</p>

<h4 id="demo4---navigationcontroller">Demo4—navigationController状态栏样式新的设置方法</h4>

<p>如果你按照上面的方法设置了，但还是不行。八成是 rootViewController 设置的问题，你必须设置 rootViewController，编译器才会去 rootViewController 中重载 preferredStatusBarStyle 方法。</p>

<p>另外当你在 appdelegate 中将 navigationController 设为 rootViewController 的时候：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line">     <span class="nb">self</span><span class="p">.</span><span class="n">window</span><span class="p">.</span><span class="n">rootViewController</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">navigationController</span><span class="p">;</span>
</span><span class="line"> <span class="err">```</span>
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>因为 rootViewController 变为了 navigationController，你在 ViewController 里重写 preferredStatusBarStyle 方法是不会起作用的。所以最好的方法是</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"> <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">viewDidLoad</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="p">[</span><span class="nb">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class="line">    <span class="nb">self</span><span class="p">.</span><span class="n">title</span> <span class="o">=</span> <span class="s">@&quot;微博@iOS程序犭袁&quot;</span><span class="p">;</span>
</span><span class="line">    <span class="nb">self</span><span class="p">.</span><span class="n">navigationController</span><span class="p">.</span><span class="n">navigationBar</span><span class="p">.</span><span class="n">barStyle</span> <span class="o">=</span> <span class="n">UIBarStyleBlack</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果你还是想重写 preferredStatusBarStyle 方法来达到作用，那最好使用分类来解决：</p>

<p>.h文件：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"> <span class="c1">//</span>
</span><span class="line"><span class="c1">//  UINavigationController+StatusBarStyle.h</span>
</span><span class="line"><span class="c1">//  微博@iOS程序犭袁</span>
</span><span class="line"><span class="c1">//</span>
</span><span class="line"><span class="c1">//  Created by  https://github.com/ChenYilong/iOS9AdaptationTips/ on 15/6/8.</span>
</span><span class="line"><span class="c1">//  Copyright (c) 2015年   http://weibo.com/luohanchenyilong/  . All rights reserved.</span>
</span><span class="line"><span class="c1">//</span>
</span><span class="line">
</span><span class="line"><span class="cp">#import &lt;UIKit/UIKit.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="k">@interface</span> <span class="bp">UINavigationController</span> <span class="nl">(StatusBarStyle)</span>
</span><span class="line">
</span><span class="line"><span class="k">@end</span>
</span><span class="line">
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>.m文件：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"> <span class="c1">//</span>
</span><span class="line"><span class="c1">//  UINavigationController+StatusBarStyle.m</span>
</span><span class="line"><span class="c1">//  微博@iOS程序犭袁</span>
</span><span class="line"><span class="c1">//</span>
</span><span class="line"><span class="c1">//  Created by  https://github.com/ChenYilong/iOS9AdaptationTips/ on 15/6/8.</span>
</span><span class="line"><span class="c1">//  Copyright (c) 2015年   http://weibo.com/luohanchenyilong/  . All rights reserved.</span>
</span><span class="line"><span class="c1">//</span>
</span><span class="line">
</span><span class="line"><span class="cp">#import &quot;UINavigationController+StatusBarStyle.h&quot;</span>
</span><span class="line">
</span><span class="line"><span class="k">@implementation</span> <span class="bp">UINavigationController</span> <span class="nl">(StatusBarStyle)</span>
</span><span class="line">
</span><span class="line"><span class="p">-</span> <span class="p">(</span><span class="n">UIStatusBarStyle</span><span class="p">)</span><span class="nf">preferredStatusBarStyle</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="c1">//also you may add any fancy condition-based code here</span>
</span><span class="line">    <span class="k">return</span> <span class="n">UIStatusBarStyleLightContent</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">@end</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我在仓库里给出了 navigation 的设置方法，见Demo4。</p>

<p>参考链接： <a href="http://stackoverflow.com/a/19513714/3395008">preferredStatusBarStyle isn’t called–For anyone using a UINavigationController:</a></p>

<h3 id="xcode7--debug--dsym-">Xcode7 在 debug 状态下也生成 .dSYM 文件引起的警告</h3>

<p>Xcode6 的工程升级到 Xcode7上来，会报警告：</p>

<p><img src="http://i57.tinypic.com/2a5zuia.jpg" alt="enter image description here" /></p>

<p>这是 debug 编译时导出符号文件出现的告警，</p>

<p>然而新建的Xcode7工程不会有该问题。</p>

<p>解决方法是让 debug 编译的时候不生成符号文件：</p>

<p><img src="http://i60.tinypic.com/2e23qyp.jpg" alt="enter image description here" /></p>

<h3 id="xcode7--8x--there-is-an-intenal-api-error">Xcode7 无法使用 8.x 系统的设备调试，一运行就报错 <code>there is an intenal API error</code></h3>

<p><img src="http://cdn.cocimg.com/bbs/attachment/Fid_21/21_296305_92094d6a71e587a.png" alt="enter image description here" /></p>

<p><code>Xcode7</code> 调试  <code>iOS8.x</code> 的真机，需要确保项目名改为英文，中间含有中文会报错  <code>there is an intenal API error</code></p>

<p>按照下面的步骤检查：</p>

<p>bulid settings  -&gt;    packaging  -&gt; product name</p>

<h3 id="html--iframe--safari--app">使用了 HTML 的 iframe 元素可能导致无法从 Safari 跳转至 App</h3>

<p>我们都知道，从网易新闻分享一条新闻到QQ，然后从QQ中打开链接再用safari打开链接，在iOS8上，这个时候会跳转到网易新闻App。但是现在（2015年09月23日）版本的网易新闻在 iOS9 就不能正常跳转，会跳转到 App Store 页面并提示要不要打开 App Store。</p>

<p>这是很可能是因为使用了 HTML 的 iframe 元素，并将自定义的链接放进了该元素中</p>

<p>举例说明：</p>

<p><img src="http://i61.tinypic.com/2wbvok8.jpg" alt="enter image description here" /></p>

<p>我之前写的一个 Demo： <a href="https://github.com/ChenYilong/CYLExternalURL">模仿 《简书 App》 的效果:在html中跳转到App中的对应页面,并能从App跳转到原来的网址</a>，在例子中直接调用自定义链接在 iOS9上是可以跳转到 App 中的，然而，如果用 iframe 元素包起来就会变不可用。</p>

<p>参考链接：</p>

<ol>
  <li><a href="http://www.w3school.com.cn/tags/tag_iframe.asp">HTML 的iframe 标签</a></li>
  <li><a href="http://stackoverflow.com/questions/31891777/ios-9-safari-iframe-src-with-custom-url-scheme-not-working">iOS 9 safari iframe src with custom url scheme not working</a></li>
</ol>

<h3 id="ios9">iOS9锁屏控制台会打印警告</h3>

<p>加入运行如下示例代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">viewDidLoad</span> <span class="p">{</span>
</span><span class="line">    <span class="p">[</span><span class="nb">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class="line">    <span class="kt">dispatch_queue_t</span> <span class="n">queue</span> <span class="o">=</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line">    <span class="n">dispatch_async</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="c1">//在这个10秒内锁屏</span>
</span><span class="line">         <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;准备休眠&quot;</span><span class="p">);</span>
</span><span class="line">        <span class="n">sleep</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class="line">        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;打印成功&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>应用运行过程中锁屏，总是会出现以下提示：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"><span class="o">**</span> <span class="o">-</span><span class="p">[</span><span class="bp">UIApplication</span> <span class="nl">_handleNonLaunchSpecificActions</span><span class="p">:</span><span class="nl">forScene</span><span class="p">:</span><span class="nl">withTransitionContext</span><span class="p">:</span><span class="nl">completion</span><span class="p">:]</span> <span class="o">**</span> <span class="n">unhandled</span> <span class="n">action</span> <span class="o">-&gt;</span> <span class="o">&lt;</span><span class="nl">FBSSceneSnapshotAction</span><span class="p">:</span> <span class="mh">0x16da76c0</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class="line">    <span class="n">handler</span> <span class="o">=</span> <span class="n">remote</span><span class="p">;</span>
</span><span class="line">    <span class="n">info</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nl">BSSettings</span><span class="p">:</span> <span class="mh">0x16d80e50</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class="line">        <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>当应用处于空闲状态时（无网络请求）锁屏对于用户而言并无较大影响，</p>

<p>但是当应用在执行某个异步任务时（比如下拉刷新一下列表）锁屏，重新解锁进入就可能会发现异步任务失败，控制台也会提示 Error 信息：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"><span class="o">**</span> <span class="o">-</span><span class="p">[</span><span class="bp">UIApplication</span> <span class="nl">_handleNonLaunchSpecificActions</span><span class="p">:</span><span class="nl">forScene</span><span class="p">:</span><span class="nl">withTransitionContext</span><span class="p">:</span><span class="nl">completion</span><span class="p">:]</span> <span class="o">**</span> <span class="n">unhandled</span> <span class="n">action</span> <span class="o">-&gt;</span> <span class="o">&lt;</span><span class="nl">FBSSceneSnapshotAction</span><span class="p">:</span> <span class="mh">0x16da76c0</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class="line">    <span class="n">handler</span> <span class="o">=</span> <span class="n">remote</span><span class="p">;</span>
</span><span class="line">    <span class="n">info</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nl">BSSettings</span><span class="p">:</span> <span class="mh">0x16d80e50</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class="line">        <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="n">error</span> <span class="k">in</span> <span class="nl">__connection_block_invoke_2</span><span class="p">:</span> <span class="n">Connection</span> <span class="n">interrupted</span>
</span><span class="line"> <span class="err">```</span>
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>以上情况不易复现，但确有发生。</p>

<p>在 iOS8 系统下测试并未发现此问题。</p>

<p>对此并未找到合理的解释和对应的解决办法，如果你有解决方法，欢迎提 PR !</p>

<h3 id="didfinishlaunchingwithoptionswindowrootviewcontroller">在<code>didFinishLaunchingWithOptions</code>结束后还没有设置window的<code>rootViewController</code>会导致崩溃</h3>

<p>iOS9 不允许在 <code>didFinishLaunchingWithOptions</code> 结束了之后，还没有设置 window 的 <code>rootViewController</code> 。 也许是 Xcode7 的编译器本身就不支持。</p>

<p>崩溃时的控制台日志提示：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"><span class="o">***</span> <span class="n">Assertion</span> <span class="n">failure</span> <span class="k">in</span> <span class="o">-</span><span class="p">[</span><span class="bp">UIApplication</span> <span class="nl">_runWithMainScene</span><span class="p">:</span><span class="nl">transitionContext</span><span class="p">:</span><span class="nl">completion</span><span class="p">:],</span> <span class="o">/</span><span class="n">BuildRoot</span><span class="o">/</span><span class="n">Library</span><span class="o">/</span><span class="n">Caches</span><span class="o">/</span><span class="n">com</span><span class="p">.</span><span class="n">apple</span><span class="p">.</span><span class="n">xbs</span><span class="o">/</span><span class="n">Sources</span><span class="o">/</span><span class="n">UIKit_Sim</span><span class="o">/</span><span class="n">UIKit</span><span class="o">-</span><span class="mf">3505.16</span><span class="o">/</span><span class="bp">UIApplication</span><span class="p">.</span><span class="nl">m</span><span class="p">:</span><span class="mi">3294</span>
</span><span class="line">
</span><span class="line"><span class="o">***</span>  <span class="n">Terminating</span> <span class="n">app</span> <span class="n">due</span> <span class="n">to</span> <span class="n">uncaught</span> <span class="n">exception</span> <span class="err">&#39;</span><span class="n">NSInternalInconsistencyException</span><span class="err">&#39;</span><span class="p">,</span> <span class="nl">reason</span><span class="p">:</span> <span class="err">&#39;</span><span class="n">Application</span> <span class="n">windows</span> <span class="n">are</span> <span class="n">expected</span> <span class="n">to</span> <span class="n">have</span> <span class="n">a</span> <span class="n">root</span> <span class="n">view</span> <span class="n">controller</span> <span class="n">at</span> <span class="n">the</span> <span class="n">end</span> <span class="n">of</span> <span class="n">application</span> <span class="n">launch</span><span class="err">&#39;</span>
</span><span class="line">
</span><span class="line"><span class="o">***</span> <span class="n">First</span> <span class="n">throw</span> <span class="n">call</span> <span class="nl">stack</span><span class="p">:</span>
</span><span class="line"><span class="cm">/*省略*/</span>
</span><span class="line"><span class="n">libc</span><span class="o">++</span><span class="n">abi</span><span class="p">.</span><span class="nl">dylib</span><span class="p">:</span> <span class="n">terminating</span> <span class="n">with</span> <span class="n">uncaught</span> <span class="n">exception</span> <span class="n">of</span> <span class="n">type</span> <span class="bp">NSException</span>
</span><span class="line"><span class="p">(</span><span class="n">lldb</span><span class="p">)</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>解决的方法是先设初始化个值，之后再赋值替换掉：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"><span class="bp">UIWindow</span> <span class="o">*</span><span class="n">window</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIWindow</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame</span><span class="p">:[</span><span class="n">UIScreenmainScreen</span><span class="p">].</span><span class="n">bounds</span><span class="p">];</span>
</span><span class="line"><span class="n">window</span><span class="p">.</span><span class="n">rootViewController</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIViewController</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>尤其注意一种情况，在 iOS8以前，我们有时候会通过在 AppDelegate 中添加另一个 UIWindow ，并修改其 Level 来达到 addSubview 的效果，因而也不设置 window 的 <code>rootViewController</code> ，而是把它直接以视图的形式展示了，则在 iOS8 上是警告，在 iOS9 上就崩溃了。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"><span class="o">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nl">application</span><span class="p">:(</span><span class="bp">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="n">application</span> <span class="nl">didFinishLaunchingWithOptions</span><span class="p">:(</span><span class="bp">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="n">launchOptions</span> <span class="p">{</span>
</span><span class="line">    <span class="nb">self</span><span class="p">.</span><span class="n">window</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIWindow</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame</span><span class="p">:[[</span><span class="bp">UIScreen</span> <span class="n">mainScreen</span><span class="p">]</span> <span class="n">bounds</span><span class="p">]];</span>
</span><span class="line">    <span class="nb">self</span><span class="p">.</span><span class="n">window</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">yellowColor</span><span class="p">];</span>
</span><span class="line">    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">window</span> <span class="n">makeKeyAndVisible</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">    <span class="bp">UIWindow</span> <span class="o">*</span><span class="n">normalWindow</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIWindow</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame</span><span class="p">:[[</span><span class="bp">UIScreen</span> <span class="n">mainScreen</span><span class="p">]</span> <span class="n">bounds</span><span class="p">]];</span>
</span><span class="line">    <span class="n">normalWindow</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">blueColor</span><span class="p">];</span>
</span><span class="line">    <span class="n">normalWindow</span><span class="p">.</span><span class="n">windowLevel</span> <span class="o">=</span> <span class="n">UIWindowLevelAlert</span><span class="p">;</span>
</span><span class="line">    <span class="p">[</span><span class="n">normalWindow</span> <span class="n">makeKeyAndVisible</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这种情况，在 <code>didFinishLaunchingWithOptions</code> 需要修改原来的策略，将第二个 window 类型改为其他类型，比如 viewController 类型、navigation 类型、tabbarController 类型等。</p>

<h2 id="demo5demo6-----api">9.Demo5、Demo6— 搜索 API</h2>

<p>导入两个 framework，</p>

<p>然后像设置tableView 的 cell 一样设置下每一个“搜索元素”，搜索元素的组成如下：</p>

<p><img src="http://i57.tinypic.com/144b22w.jpg" alt="enter image description here" /></p>

<p>详情见 Demo6 代码。</p>

<p><img src="http://image17-c.poco.cn/mypoco/myphoto/20150923/21/17338872420150923214730010.gif?370x686_110" alt="enter image description here" /></p>

<p>既然刚才说了搜索元素与 tableView 的 cell 非常相似：那么我们就展示一下如何让 tableView 与 CoreSpotlightSearch 进行结合：</p>

<p>详见 Demo6，Demo6 与 Demo5 的主要差异在于：在点击搜索结果跳转到 App 后，还会进一步根据搜索的内容 push 到相应的详情页中：</p>

<p><img src="http://image17-c.poco.cn/mypoco/myphoto/20150924/00/17338872420150924001340035.gif?306x572_110" alt="enter image description here" /></p>

<h2 id="ios">10.iOS国际化问题：当前设备语言字符串返回有变化。</h2>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="o">&lt;</span><span class="n">div</span> <span class="k">class</span><span class="o">=</span><span class="err">&#39;</span><span class="n">bogus</span><span class="o">-</span><span class="n">wrapper</span><span class="err">&#39;</span><span class="o">&gt;&lt;</span><span class="n">notextile</span><span class="o">&gt;&lt;</span><span class="n">figure</span> <span class="k">class</span><span class="o">=</span><span class="err">&#39;</span><span class="n">code</span><span class="err">&#39;</span><span class="o">&gt;&lt;</span><span class="n">div</span> <span class="k">class</span><span class="o">=</span><span class="s">&quot;highlight&quot;</span><span class="o">&gt;&lt;</span><span class="n">table</span><span class="o">&gt;&lt;</span><span class="n">tr</span><span class="o">&gt;&lt;</span><span class="n">td</span> <span class="k">class</span><span class="o">=</span><span class="s">&quot;gutter&quot;</span><span class="o">&gt;&lt;</span><span class="n">pre</span> <span class="k">class</span><span class="o">=</span><span class="s">&quot;line-numbers&quot;</span><span class="o">&gt;&lt;</span><span class="n">span</span> <span class="k">class</span><span class="o">=</span><span class="err">&#39;</span><span class="n">line</span><span class="o">-</span><span class="n">number</span><span class="err">&#39;</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;</span>
</span><span class="line"><span class="o">&lt;</span><span class="n">span</span> <span class="k">class</span><span class="o">=</span><span class="err">&#39;</span><span class="n">line</span><span class="o">-</span><span class="n">number</span><span class="err">&#39;</span><span class="o">&gt;</span><span class="mi">2</span><span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;</span>
</span><span class="line"><span class="o">&lt;</span><span class="n">span</span> <span class="k">class</span><span class="o">=</span><span class="err">&#39;</span><span class="n">line</span><span class="o">-</span><span class="n">number</span><span class="err">&#39;</span><span class="o">&gt;</span><span class="mi">3</span><span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;</span>
</span><span class="line"><span class="o">&lt;</span><span class="n">span</span> <span class="k">class</span><span class="o">=</span><span class="err">&#39;</span><span class="n">line</span><span class="o">-</span><span class="n">number</span><span class="err">&#39;</span><span class="o">&gt;</span><span class="mi">4</span><span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;</span>
</span><span class="line"><span class="o">&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">td</span><span class="o">&gt;&lt;</span><span class="n">td</span> <span class="k">class</span><span class="o">=</span><span class="err">&#39;</span><span class="n">code</span><span class="err">&#39;</span><span class="o">&gt;&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span> <span class="k">class</span><span class="o">=</span><span class="err">&#39;&#39;</span><span class="o">&gt;&lt;</span><span class="n">span</span> <span class="k">class</span><span class="o">=</span><span class="err">&#39;</span><span class="n">line</span><span class="err">&#39;</span><span class="o">&gt;</span><span class="bp">NSUserDefaults</span> <span class="o">*</span><span class="n">defaults</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">];</span>
</span><span class="line"><span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;&lt;</span><span class="n">span</span> <span class="k">class</span><span class="o">=</span><span class="err">&#39;</span><span class="n">line</span><span class="err">&#39;</span><span class="o">&gt;</span><span class="bp">NSArray</span> <span class="o">*</span><span class="n">allLanguage</span> <span class="o">=</span> <span class="p">[</span><span class="n">defaults</span> <span class="nl">objectForKey</span><span class="p">:</span><span class="s">@&quot;AppleLanguages&quot;</span><span class="p">];</span>
</span><span class="line"><span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;&lt;</span><span class="n">span</span> <span class="k">class</span><span class="o">=</span><span class="err">&#39;</span><span class="n">line</span><span class="err">&#39;</span><span class="o">&gt;</span><span class="bp">NSString</span> <span class="o">*</span><span class="n">currentLanguage</span> <span class="o">=</span> <span class="p">[</span><span class="n">allLanguage</span> <span class="nl">objectAtIndex</span><span class="p">:</span><span class="mi">0</span><span class="p">];</span>
</span><span class="line"><span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;&lt;</span><span class="n">span</span> <span class="k">class</span><span class="o">=</span><span class="err">&#39;</span><span class="n">line</span><span class="err">&#39;</span><span class="o">&gt;</span><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;The current language is : %@&quot;</span><span class="p">,</span> <span class="n">currentLanguage</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">td</span><span class="o">&gt;&lt;/</span><span class="n">tr</span><span class="o">&gt;&lt;/</span><span class="n">table</span><span class="o">&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;&lt;/</span><span class="n">figure</span><span class="o">&gt;&lt;/</span><span class="n">notextile</span><span class="o">&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>iOS 9 之前：以上返回结果：语言字符串代码。例如：”zh-Hans”</p>

<p>iOS 9:以上返回结果：语言字符串代码 + 地区代码。例如：”zh-Hans-US”</p>

<p>备注：<br />
1.请注意判断当前语言类型，不要用以下形式的代码了，不然在iOS9上就会遇到坑。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">if ([currentLanguage isEqualToString:@"zh-Hans"])</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可以使用：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">if ([currentLanguage hasPrefix:@"zh-Hans"])</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>另外：对于中文，语言有：</p>

<ul>
  <li>简体中文:zh-Hans</li>
  <li>繁体中文:zh-Hant</li>
  <li>香港中文:zh-HK</li>
  <li>澳门中文:zh-MO</li>
  <li>台湾中文:zh-TW</li>
  <li>新加坡中文:zh-SG</li>
</ul>

<p><strong>备注：以上iOS9 当前语言字符串返回结果：语言字符串代码 + 地区代码。在某些情况下不是这样，本人手机型号：大陆版电信iPhone5S/A1533/16GB测试结果：zh-HK/zh-TW，在地区为”中国”、”中国香港”、”中国台湾”的时候，显示的还是zh-HK/zh-TW，一旦切换到其它地区，设备语言会自动的切换到中文繁体。请开发人员注意中文的问题！</strong></p>

<h2 id="uitableview">11.UITableView显示异常</h2>

<p>原本在 Xcode6 上完好的项目，在 Xcode7 上一编译， <code>tableView</code> 出了两个问题 ：</p>

<ol>
  <li>代码创建的 <code>tableView</code> 无法隐藏 cell 分割线</li>
  <li><code>reloadData</code> 刷新失效；</li>
</ol>

<h3 id="tableview--cell-">代码创建的 <code>tableView</code> 无法隐藏 cell 分割线</h3>

<p>iOS9 里面用到 tableView 突然跑出来了很多 cell 的分割线， 但是在用xib创建的 tableview，就不存在这个问题</p>

<p>解决方法是将设置分割线隐藏的方法 <code>self.tableView.separatorStyle = UITableViewCellSeparatorStyleNone;</code> 写在 <code>-layoutSubviews</code> 中：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">layoutSubviews</span><span class="p">{</span>
</span><span class="line">    <span class="p">[</span><span class="nb">super</span> <span class="n">layoutSubviews</span><span class="p">];</span>
</span><span class="line">    <span class="nb">self</span><span class="p">.</span><span class="n">tableView</span><span class="p">.</span><span class="n">separatorStyle</span> <span class="o">=</span> <span class="n">UITableViewCellSeparatorStyleNone</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"> <span class="err">```</span>
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>也有人发现另一种方法，就是每次 reloadData 之前都进行一次设置：设置分割线隐藏，这样也可以解决：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line">    <span class="nb">self</span><span class="p">.</span><span class="n">tableView</span><span class="p">.</span><span class="n">separatorStyle</span> <span class="o">=</span> <span class="n">UITableViewCellSeparatorStyleNone</span><span class="p">;</span>
</span><span class="line">   <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">tableView</span> <span class="n">reloadData</span><span class="p">]</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>虽然也可以解决但是不推荐，这样写会给其他人造成困扰：不知所云。</p>

<h3 id="reloaddata-"><code>reloadData</code> 刷新失效</h3>

<p>现象： <code>[tableView reloadData]</code> 无效，有一行 cell 明明改变了但是刷新不出来。</p>

<p>感觉可能是这个方法和某种新加的特性冲突了，猜测可能是 <code>reloadData</code> 的操作被推迟到下一个 <code>RunLoop</code> 执行最终失效。</p>

<p>解决的方法是，注释 <code>[tableView reloadData]</code> ，改用局部刷新：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">tableView</span> <span class="nl">reloadSections</span><span class="p">:[</span><span class="bp">NSIndexSet</span> <span class="nl">indexSetWithIndex</span><span class="p">:</span><span class="mi">0</span><span class="p">]</span> <span class="nl">withRowAnimation</span><span class="p">:</span><span class="n">UITableViewRowAnimationNone</span><span class="p">];</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这两个推测均属 Xcode7 的bug，将来 Apple 肯定会修复。</p>

<h1 id="section-2">结束语</h1>

<p>疏漏之处，可前往阅读下<a href="http://asciiwwdc.com">这个网站</a>，这里有每年 WWDC 演讲的英文记录。</p>

<hr />

<p>Posted by <a href="http://weibo.com/luohanchenyilong/">微博@iOS程序犭袁</a><br />
原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">Creative Commons BY-NC-ND 3.0</a></p>
]]></content>
  </entry>
  
</feed>
