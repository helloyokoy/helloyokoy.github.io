<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[BryanFu Blog]]></title>
  <link href="http://helloyokoy.github.io/atom.xml" rel="self"/>
  <link href="http://helloyokoy.github.io/"/>
  <updated>2015-11-06T00:02:44+08:00</updated>
  <id>http://helloyokoy.github.io/</id>
  <author>
    <name><![CDATA[BryanFu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git Flow管理开发流程]]></title>
    <link href="http://helloyokoy.github.io/blog/git-flow/"/>
    <updated>2015-11-05T10:18:10+08:00</updated>
    <id>http://helloyokoy.github.io/blog/git-flow</id>
    <content type="html"><![CDATA[<p>我们都知道, 在 git 的分支功能相对 svn 确实方便许多，而且也非常推荐使用分支来做开发. 我的做法是每个项目都有2个分支, master 和 develop. master 分支是主分支, 保证程序有一个 稳定版本, develop 则是开发用的分支, 几乎所有的功能开发, bug 修复都在这个分支上, 完成后 再合并回 master.</p>

<p>但是情况并不是这么简单. 有时当我们正在开发一个功能, 但程序突然出现 bug 需要及时去修复的时候, 这时要切回 master 分支, 并基于它创建一个 hotfix 分支. 有时我们在开发一个功能时, 需要停下来去开发另一个功能. 而且所有这些问题都出现 的时候, 发布也会成为比较棘手问题.</p>

<p>也就是说, git branch 功能很强大，但是没有一套模型告诉我们应该怎样在开发的时候善用 这些分支。于是有人就整理出了一套比较好的方案 A successful Git branching model, 今天我们就一起来学习下这套方案.</p>

<!--more-->

<p>简单来说, 他将 branch 分成2个主要分支和3个临时的辅助分支:</p>

<p><img src="http://stormzhang.com/image/gitflow.png" alt="img" /></p>

<h4 id="section">主要分支</h4>

<p>master: 永远处在即将发布(production-ready)状态</p>

<p>develop: 最新的开发状态</p>

<h4 id="section-1">辅助分支</h4>

<ul>
  <li>
    <p>feature: 开发新功能的分支, 基于 develop, 完成后 merge 回 develop</p>
  </li>
  <li>
    <p>release: 准备要发布版本的分支, 用来修复 bug. 基于 develop, 完成后 merge 回 develop 和 master</p>
  </li>
  <li>
    <p>hotfix: 修复 master 上的问题, 等不及 release 版本就必须马上上线. 基于 master, 完成后 merge 回 master 和 develop</p>
  </li>
</ul>

<p>作者还提供了 git-flow 命令工具:</p>

<pre><code>$ git flow init
</code></pre>

<p>接着它会问你一系列的问题，蛋定！尽量使用它的默认值就好了：</p>

<pre><code>No branches exist yet. Base branches must be created now.
Branch name for production releases: [master]
Branch name for "next release" development: [develop]
How to name your supporting branch prefixes?
Feature branches? [feature/]
Release branches? [release/]
Hotfix branches? [hotfix/]
Support branches? [support/]
Version tag prefix? []
</code></pre>

<p>完成后当前所在分支就变成 develop. 任何开发都必须从 develop 开始:</p>

<pre><code>git flow feature start some_awesome_feature 完成功能开发之后:

git flow feature finish some_awesome_feature
</code></pre>

<p>该命令将会把feature/some_awesome_feature合并到develope分支，然后删除功能(feature)分支。</p>

<p>将一个 feature 分支推到远程服务器:</p>

<pre><code>git flow feature publish some_awesome_feature 或者

git push origin feature/some_awesome_feature 当你的功能点都完成时（需要发布新版本了），就基于develop创建一个发布(release)分支，然后升级版本号并在最后发布日期前把Bug Fix掉吧：

$ git flow release start v0.1.0 当你在完成（finish)一个发布分支时，它会把你所作的修改合并到master分支，同时合并回develop分支，所以，你不需要担心你的master分支比develop分支更加超前。
</code></pre>

<p>最后一件让git-flow显得威武的事情是它处理热修复（即时的BugFix）的能力，你可以像其他分支一样地创建和完成一个热修复分支，区别是它基于master分支，因此你可以在产品出现问题时快速修复，然后通过”finish”命令把修改合并回master和develop分支。</p>

<hr />
<p>git flow on github: <a href="https://github.com/nvie/gitflow">https://github.com/nvie/gitflow</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web开发cache]]></title>
    <link href="http://helloyokoy.github.io/blog/web-cache/"/>
    <updated>2015-11-04T16:55:48+08:00</updated>
    <id>http://helloyokoy.github.io/blog/web-cache</id>
    <content type="html"><![CDATA[<p>总结web应用中常用的各种cache</p>

<p>cache是提高应用性能重要的一个环节，写篇文章总结一下用过的各种对于动态内容的cache。
文章以Nginx，Rails，Mysql，Redis作为例子，换成其他web服务器，语言，数据库，缓存服务都是类似的。
以下是3层的示意图，方便后续引用：</p>

<pre><code>                      +-------+
1                     | Nginx |
                      +-+-+-+-+
                        | | |
        +---------------+ | +---------------+
        |                 |                 |
    +---+---+         +---+---+         +---+---+
2   |Unicorn|         |Unicorn|         |Unicorn|
    +---+---+         +---+---+         +---+---+
        |                 |                 |
        |                 |                 |
        |             +---+---+             |
3        +-------------+  D B  +-------------+
                      +-------+
</code></pre>

<!--more-->

<ol>
  <li>
    <h2 id="section">客户端缓存</h2>
  </li>
</ol>

<p>一个客户端经常会访问同一个资源，比如用浏览器访问网站首页或查看同一篇文章，或用app访问同一个api，如果该资源和他之前访问过的没有任何改变，就可以利用http规范中的304 Not Modified 响应头( http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.5 )，直接用客户端的缓存，而无需在服务器端再生成一次内容。
在Rails里面内置了fresh_when这个方法，一行代码就可以完成：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class ArticlesController
</span><span class="line">  def show
</span><span class="line">    @article = Article.find(params[:id])
</span><span class="line">    fresh_when :last_modified =&gt; @article.updated_at.utc, :etag =&gt; @article
</span><span class="line">  end
</span><span class="line">end</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>下次用户再访问的时候，会对比request header里面的If-Modified-Since和If-None-Match，如果相符合，就直接返回304，而不再生成response body。</p>

<p>但是这样会遇到一个问题，假设我们的网站导航有用户信息，一个用户在未登陆专题访问了一下，然后登陆以后再访问，会发现页面上显示的还是未登陆状态。或者在app访问一篇文章，做了一下收藏，下次再进入这篇文章，还是显示未收藏状态。解决这个问题的方法很简单，将用户相关的变量也加入到etag的计算里面：</p>

<pre><code>fresh_when :etag =&gt; [@article.cache_key, current_user.id]
fresh_when :etag =&gt; [@article.cache_key, current_user_favorited] 另外提一个坑，如果nginx开启了gzip，对rails执行的结果进行压缩，会将rails输出的etag header干掉，nginx的开发人员说根据rfc规范，对proxy_pass方式处理必须这样（因为内容改变了），但是我个人认为没这个必要，于是用了粗暴的方法，直接将src/http/modules/ngx_http_gzip_filter_module.c这个文件里面的这行代码注释掉，然后重新编译nginx：

//ngx_http_clear_etag(r); 或者你可以选择不改变nginx源代码，将gzip off掉，将压缩用Rack中间件来处理：

config.middleware.use Rack::Deflater 除了在controller里面指定fresh_when以外，rails框架默认使用Rack::ETag middleware，它会自动给无etag的response加上etag，但是和fresh_when相比，自动etag能够节省的只是客户端时间，服务器端还是一样会执行所有的代码，用curl来对比一下。 Rack::ETag自动加入etag：
</code></pre>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">curl -v http://localhost:3000/articles/1
</span><span class="line">&lt; Etag: "bf328447bcb2b8706193a50962035619"
</span><span class="line">&lt; X-Runtime: 0.286958
</span><span class="line">curl -v http://localhost:3000/articles/1 --header 'If-None-Match: "bf328447bcb2b8706193a50962035619"'
</span><span class="line">&lt; X-Runtime: 0.293798</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>用fresh_when：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">curl -v http://localhost:3000/articles/1 --header 'If-None-Match: "bf328447bcb2b8706193a50962035619"'
</span><span class="line">&lt; X-Runtime: 0.033884</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>
    <h2 id="nginx">Nginx缓存</h2>
  </li>
</ol>

<p>有一些资源可能会被调用很多，又无关用户状态，并且很少改变，比如新闻app上的列表api，购物网站上ajax请求分类菜单，可以考虑用Nginx来做缓存。
主要有2种实现方法：
####A. 动态请求静态文件化
在rails请求完成以后，将结果保存成静态文件，后续请求就会直接由nginx提供静态文件内容，用after_filter来实现一下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class CategoriesController &lt; ActionController::Base
</span><span class="line">  after_filter :generate_static_file, :only =&gt; [:index]
</span><span class="line">
</span><span class="line">  def index
</span><span class="line">    @categories = Category.all
</span><span class="line">  end
</span><span class="line">
</span><span class="line">  def generate_static_file
</span><span class="line">    File.open(Rails.root.join('public', 'categories'), 'w') do |f|
</span><span class="line">      f.write response.body
</span><span class="line">    end
</span><span class="line">  end
</span><span class="line">end</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>另外我们需要在任何分类更新的时候，删除掉这个文件，避免缓存不刷新的问题：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class Category &lt; ActiveRecord::Base
</span><span class="line">  after_save :delete_static_file
</span><span class="line">  after_destroy :delete_static_file
</span><span class="line">
</span><span class="line">  def delete_static_file
</span><span class="line">    File.delete Rails.root.join('public', 'categories')
</span><span class="line">  end
</span><span class="line">end</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Rails 4之前，处理这种生成静态文件缓存可以用内置的caches_page， rails 4之后变成了一个独立gem actionpack-page_caching，和手工代码对比一下，</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class CategoriesController &lt; ActionController::Base
</span><span class="line">  caches_page :index
</span><span class="line">
</span><span class="line">  def update
</span><span class="line">    #...
</span><span class="line">    expire_page action: 'index'
</span><span class="line">  end
</span><span class="line">end</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果只有一台服务器，这个方法简单又实用，但是如果有多台服务器，就会出现更新分类只能刷新自己本身这台服务器缓存的问题，可以用nfs来共享静态资源目录解决，或者用第2种：</p>

<h4 id="b-">B. 静态化到集中缓存服务</h4>
<p>首先我们得让Nginx有直接访问缓存的能力：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class=""><span class="line">upstream redis {
</span><span class="line">    server redis_server_ip:6379;
</span><span class="line">  }
</span><span class="line">
</span><span class="line">  upstream ruby_backend {
</span><span class="line">    server unicorn_server_ip1 fail_timeout=0;
</span><span class="line">    server unicorn_server_ip2 fail_timeout=0;
</span><span class="line">  }
</span><span class="line">
</span><span class="line">  location /categories {
</span><span class="line">    set $redis_key $uri;
</span><span class="line">    default_type   text/html;
</span><span class="line">    redis_pass redis;
</span><span class="line">    error_page 404 = @httpapp;
</span><span class="line">  }
</span><span class="line">
</span><span class="line">  location @httpapp {
</span><span class="line">    proxy_pass http://ruby_backend;
</span><span class="line">  }</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Nginx首先会用请求的uri作为key去redis里面获取，如果获取不到（404）就转发给unicorn进行处理，然后改写generate_static_file和delete_static_file方法：</p>

<pre><code>redis_cache.set('categories', response.body)
  	
redis_cache.del('categories')
</code></pre>

<p>这样除了集中管理以外，还能够设置缓存的失效时间，对于一些更新无时效性要求的数据，就可以不用处理刷新机制，简单地固定时间刷新一次：</p>

<pre><code>redis_cache.setex('categories', 3.hours.to_i, response.body)
</code></pre>

<ol>
  <li>
    <h2 id="section-1">整页缓存</h2>
  </li>
</ol>

<p>Nginx缓存在处理带参数资源或者有用户状态的请求时候，就非常难以处理，这个时候可以用到整页缓存。
比如说分页请求列表，我们可以将page参数加入到cache_path：</p>

<pre><code>class CategoriesController
  	caches_action :index, :expires_in =&gt; 1.day, :cache_path =&gt; proc 	{"categories/index/#{params[:page].to_i}"}
end
</code></pre>

<p>比如说我们只需要针对rss输出进行缓存8小时：</p>

<pre><code>class ArticlesController
  	caches_action :index, :expires_in =&gt; 8.hours, :if =&gt; proc 	{request.format.rss?}
end 再比如说对于非登陆用户，我们可以缓存首页：

class HomeController
  	caches_action :index, :expires_in =&gt; 3.hours, :if =&gt; proc {!	user_signed_in?}
end
</code></pre>

<ol>
  <li>
    <h2 id="section-2">片段缓存</h2>
  </li>
</ol>

<p>如果说前面2种缓存能够用到的场景有限，那么片段缓存是适用性最广的。</p>

<h4 id="section-3">场景1：</h4>

<p>我们需要在每个页面一段广告代码，用来显示不同广告，如果没有使用片段缓存，那么每个页面都会要去查询广告的代码，并且花费一定时间去生成html代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">- if advert = Advert.where(:name =&gt; request.controller_name + request.action_name, :enable =&gt; true).first
</span><span class="line">  div.ad
</span><span class="line">    = advert.content</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>加了片段缓存以后，就可以少去这个查询：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">- cache "adverts/#{request.controller_name}/#{request.action_name}", :expires_in =&gt; 1.day do
</span><span class="line">  - if advert = Advert.where(:name =&gt; request.controller_name + request.action_name, :enable =&gt; true).first
</span><span class="line">    div.ad
</span><span class="line">      = advert.content</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-4">场景2：</h4>
<p>阅读文章，文章的内容可能比较长时间都不会改变，经常变化可能是文章评论，就可以对文章主体部分加上片段缓存：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">- cache "articles/#{@article.id}/#{@article.updated_at.to_i}" do
</span><span class="line">  div.article
</span><span class="line">    = @article.content.markdown2html</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>节约了生成markdown语法转换到html时间，这里用文章最后更新时间作为cache key的一部分，文章内容如果有改变，缓存自动失效，默认activerecord的cache_key方法也是用updated_at，你也可以加入更多的参数，比如article上有评论数的counter cache，更新评论数的时候不会更新文章时间，可以将这个counter也加入到key的一部分</p>

<h4 id="section-5">场景3：</h4>
<p>复杂页面结构的生成</p>

<p>数据结构比较复杂的页面，在生成的时候避免不了大量的查询和html渲染，用片段缓存，可以将这部分时间大大地节约，以我们网站游记页面 http://chanyouji.com/trips/109123 （请允许小小地打个广告，带点流量）来说：</p>

<p>需要获取天气数据，照片数据，文本数据等，同时还要生成meta，keyword等seo数据，而这些内容又是和其他动态内容交叉，片段缓存就可以分开多个：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">- cache "trips/show/seo/#{@trip.fragment_cache_key}", :expires_in =&gt; 1.day do
</span><span class="line">  title #{trip_name @trip}
</span><span class="line">  meta name="description" content="..."
</span><span class="line">  meta name="keywords" content="..."
</span><span class="line">
</span><span class="line">body
</span><span class="line">  div
</span><span class="line">    ...
</span><span class="line">- cache "trips/show/viewer/#{@trip.fragment_cache_key}", :expires_in =&gt; 1.day do
</span><span class="line">  - @trip.eager_load_all</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>小贴士，我在trip对象里面加了一个eager_load_all方法，缓存没有命中的时候，查询的时候避免出现n+1问题：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">def eager_load_all
</span><span class="line">    ActiveRecord::Associations::Preloader.new([self], {:trip_days =&gt; [:weather_station_data, :nodes =&gt; [:entry, :notes =&gt; [:photo, :video, :audio]]]}).run
</span><span class="line">  end</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-6">小技巧1：带条件的片段缓存</h4>

<p>和caches_action不同，rails自带的片段缓存是不支持条件的，比如说我们想未登陆用户给他用片段缓存，而登陆用户不使用，写起来就很麻烦，我们可以改写一下helper就可以了：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">def cache_if (condition, name = {}, cache_options = {}, &amp;block)
</span><span class="line">    if condition
</span><span class="line">      cache(name, cache_options, &amp;block)
</span><span class="line">    else
</span><span class="line">      yield
</span><span class="line">    end
</span><span class="line">  end
</span><span class="line">
</span><span class="line">
</span><span class="line">- cache_if !user_signed_in?, "xxx", :expires_in =&gt; 1.day do</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-7">小技巧2：关联对象的自动更新</h4>

<p>常使用对象update_at时间戳来作为cache key，可以在关联对象上加上touch选项，自动更新关联对象时间戳，比如我们可以在更新或者删除文章评论的时候，自动个更新：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class Article
</span><span class="line">  has_many :comments
</span><span class="line">end
</span><span class="line">
</span><span class="line">class Comment
</span><span class="line">  belongs_to :article, :touch =&gt; true
</span><span class="line">end</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>
    <h2 id="section-8">数据查询缓存</h2>
  </li>
</ol>

<p>通常来说web应用性能瓶颈都出现在DB IO上，做好数据查询缓存，减少数据库的查询次数，可以极大提高整体响应时间。
数据查询缓存分2种：</p>

<h4 id="a-">A. 同一个请求周期内的缓存</h4>

<p>举一个显示文章列表的例子，输出文章标题和文章类别，对应代码如下</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># controller
</span><span class="line">  def index
</span><span class="line">    @articles = Article.first(10)
</span><span class="line">  end
</span><span class="line">
</span><span class="line"># view
</span><span class="line">- @articles.each do |article|
</span><span class="line">  h1 = article.name
</span><span class="line">  span = article.category.name</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>会发生10条类似的sql查询：</p>

<pre><code>SELECT `categories`.* FROM `categories` WHERE `categories`.`id` = ?
</code></pre>

<p>rails内置了query cache</p>

<p><a href="https://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb">https://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb</a>，</p>

<p>在同一个请求周期内，如果没有update/delete/insert的操作，会对相同的sql查询进行缓存，如果文章类别都是相同的话，真正去查询数据库只会有1次。</p>

<p>如果文章类别都不一样，就会出现N+1查询问题（常见的性能瓶颈），rails推荐的解决方法是用Eager Loading Associations</p>

<p><a href="http://guides.rubyonrails.org/active_record_querying.html#eager-loading-associations">http://guides.rubyonrails.org/active_record_querying.html#eager-loading-associations</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">def index
</span><span class="line">    	@articles = Article.includes(:category).first(10)
</span><span class="line">  	end</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>查询语句会变成</p>

<pre><code>SELECT `categories`.* FROM `categories` WHERE `categories`.`id` in (?,?,?...)
</code></pre>

<h4 id="b--1">B. 跨请求周期的缓存</h4>

<p>同请求周期缓存所带来性能优化是很有限的，很多时候我们需要用跨请求周期的缓存，将一些常用的数据（比如User model）缓存，对于active record来说，利用统一的查询接口来fetch cache，利用callback来expire cache，就很容易实现，而且有一些现成的gem可以来用。</p>

<p>比如说 identity_cache</p>

<p><a href="https://github.com/Shopify/identity_cache">https://github.com/Shopify/identity_cache</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class User &lt; ActiveRecord::Base
</span><span class="line">  include IdentityCache
</span><span class="line">end
</span><span class="line">
</span><span class="line">class Article &lt; ActiveRecord::Base
</span><span class="line">  include IdentityCache
</span><span class="line">  cached_belongs_to :user
</span><span class="line">end
</span><span class="line">
</span><span class="line">
</span><span class="line"># 都会命中缓存
</span><span class="line">User.fetch(1)
</span><span class="line">Article.find(2).user</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这个gem的优点是代码实现简单，cache设置灵活，也方便扩展，缺点是需要用不同的查询方法名（fetch），以及额外的关系定义。</p>

<p>如果想在无数据缓存的应用无缝加入缓存功能，推荐@hooopo 做的second_level_cache</p>

<p><a href="https://github.com/hooopo/second_level_cache">https://github.com/hooopo/second_level_cache</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class User &lt; ActiveRecord::Base
</span><span class="line">  acts_as_cached(:version =&gt; 1, :expires_in =&gt; 1.week)
</span><span class="line">end
</span><span class="line">
</span><span class="line">
</span><span class="line">
</span><span class="line">#还是使用find方法，就会命中缓存
</span><span class="line">User.find(1)
</span><span class="line">#无需额外用不一样的belongs_to定义
</span><span class="line">Article.find(2).user</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>实现原理是扩展了active record底层arel sql ast处理</p>

<p><a href="https://github.com/hooopo/second_level_cache/blob/master/lib/second_level_cache/arel/wheres.rb">https://github.com/hooopo/second_level_cache/blob/master/lib/second_level_cache/arel/wheres.rb</a></p>

<p>它的优点是无缝接入，缺点是扩展比较困难，对于只获取少量字段的查询无法缓存。</p>

<ol>
  <li>
    <h2 id="section-9">数据库缓存</h2>
  </li>
</ol>

<p>编辑中</p>

<p>这6种缓存，分布在客户端到服务器端不同的位置，所能够节约的时间也正好从多到少依次排列。</p>

<hr />
<p>转载自  <a href="https://ruby-china.org/topics/19389">ruby-china</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gemfile 详解]]></title>
    <link href="http://helloyokoy.github.io/blog/gem-description/"/>
    <updated>2015-11-03T16:05:02+08:00</updated>
    <id>http://helloyokoy.github.io/blog/gem-description</id>
    <content type="html"><![CDATA[<p>前几天读到的一篇博客，觉得内容很详实，就翻译了下给大家分享下。绝大部分为直译，极少数地方加了点自己的注释，若有不周到地方，还望大家指出。如果有排版方面的问题，也请指出。</p>

<p>原文：<a href="http://tosbourn.com/what-is-the-gemfile/">http://tosbourn.com/what-is-the-gemfile/</a></p>

<p>作为Ruby开发者，我们一直在使用Gemfile，并且大部分人知道一些关于Gemfile的基础知识。在这篇文章里，我想更加深入到Gemfile里面去看看通过Gemfile所能做的一切。</p>

<h2 id="gemfile">什么是Gemfile</h2>

<p>Gemfile是我们创建的一个用于描述gem之间依赖的文件。gem是一堆Ruby代码的集合，它能够为我们提供调用。你的Gemfile必须放在项目的根目录下面， 这是Bundler的要求，对于任何的其他形式的包管理文件来说，这也是标准。这里值得注意的一点是Gemfile会被作为Ruby代码来执行。当在Bundler上下文环境中被执行的时能使我们访问一些方法，我们用这些方法来解释gem之间的require关系。</p>

<!--more-->

<h2 id="gemfile-1">创建Gemfile</h2>

<p>首先我们要做的就是告诉Gemfile到那里去找到这些gems, 这就是gem的源。</p>

<p>我们使用#source方法来做这件事情</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">source "https://rubygems.org"</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这里并不推荐一个项目有多个源。对于99%的项目，你的Gemfile的源都会被要求设置为https://rubygems.org，对于一个源，唯一的要求是它必须是一个合法的Rubygems的repo。</p>

<h2 id="section">源的优先级</h2>

<p>现在我们来探讨下关于gem源的优先级。
我们在Gemfile的顶部位置定义一个源的同时，我们也可以针对每个gem定义一个源。我们也能够为一个本地的gem定义一个路径或者是为gem定义一个git路径，比如说GitHub之类的（我们在后面点讲到这点）。</p>

<p>当Bundler尝试定位一个gem的时候，它会首先查看这个gem有没有显示的设置源，如果有，就先使用这个源。如果你在设置gem的时候有使用source, path或者git依赖的话，Bundler将会先在这些地方找，然后再去其他地方寻找。如果没有被显示设置的话， Bundler将会依照你Gemfile里面定义的源的顺序来找。如果一个gem能够在多个源里面被找到的话（虽然这是极为罕见的，因为你最好只定义一个源），你将会得到一个warning来提示你哪个源被使用了。</p>

<p>你能够使#source作为一个block来调用</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">source "https://my_awesome_source.com" do
</span><span class="line">   gem "my_gem"
</span><span class="line">   gem “my_other_gem”
</span><span class="line">end</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-1">带验证的源</h2>

<p>有些源需要你使用验证才能够被设定。Bundler有一个设置选项使得你可以为每个源设置用户名和密码</p>

<pre><code>bundle config my_gem_source.com my_username:my_password
</code></pre>

<p>这是任何希望通过Bundler来安装gem都必须要的因为它不会被放入版本管理里面。你也可以直接在Gemfile中设置你的验证信息，当然，这些验证信息也会被commit进你的版本管理工具。如下所示</p>

<pre><code>source "https://username:password@my_gem_source.com" 你在源里面的设置，都会被你以bundle config的方式设置的东西所覆盖。
</code></pre>

<h2 id="ruby">设置Ruby信息</h2>

<p>如果你的应用程序需要使用一个特别的Ruby版本或是引擎，我们都能够在Gemfile里面进行设置。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ruby "1.9.3", :patchlevel =&gt; "247", :engine =&gt; "jruby", :engine_version =&gt; "1.6.7"</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>当设定这个的时候，需要的唯一点信息就是ruby的版本（我们这里使用1.9.3）
* :pathlevel 声明了Ruby的patch level
* :engine 声明了使用的Ruby引擎
* :engine_version 声明了引擎的版本 (如果这个被设置了，engine也需要被设置）</p>

<h2 id="gems">设置Gems</h2>

<p>现在我们到了Gemfile的核心，设置你的gems。最基本的语法如下：</p>

<pre><code>gem "my_gem"
</code></pre>

<p>这里my_gem是 gem的名字，gem的名字是唯一要求的参数，此外还有几个可以选择的参数可以使用。</p>

<h2 id="gem">设置Gem的版本</h2>

<p>对于一个gem，你最常做的事情就是设置它的版本，如果你不设置版本的话，你也可以说任意的版本都可以。</p>

<pre><code>gem "my_gem", "&gt;= 0.0"
</code></pre>

<p>这里有7个操作符供你用来设置你的gem</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">* = Equal To "=1.0"
</span><span class="line"> * != Not Equal To "!=1.0"
</span><span class="line"> * &gt; Greater Than "&gt;1.0"
</span><span class="line"> * &lt; Less Than "&lt;1.0"
</span><span class="line"> * &gt;= Greater Than or Equal To "&gt;=1.0"
</span><span class="line"> * &lt;= Less Than or Equal To "&lt;=1.0"
</span><span class="line"> * ~&gt; Pessimistically Greater Than or Equal To "~&gt;1.0"
</span><span class="line"> * ~&gt; Pessimistically Greater Than or Equal To</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>~&gt; 操作能够让你使用这个gem的未来的某个安全的版本。如果你觉得使用一个大的版本更安全，你能够像下面这样声明.</p>

<pre><code>gem "my_gem", "~&gt; 2.0"
</code></pre>

<p>这能够允许你安装任意的2.x版本的gem，但是3.x版本是不被允许的。或许你对这么宽泛的版本感到不爽，你也可以声明一个更具体的版本，如下</p>

<pre><code>gem "my_gem", "~&gt; 2.5.0"
</code></pre>

<p>这能够让你使用2.5.0到2.6.0之间的版本。下面的例子能够让你更加理解~&gt; 操作符</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">* gem "my_gem", "~&gt; 1.0" –&gt; gem "my_gem", "&gt;= 1.0", "&lt; 2.0"
</span><span class="line">   * gem "my_gem", "~&gt; 1.5.0" –&gt; gem "my_gem", "&gt;= 1.5.0", "&lt; 1.6.0"
</span><span class="line">   * gem "my_gem", "~&gt; 1.5.5" –&gt; gem "my_gem", "&gt;= 1.5.5", "&lt; 1.6.0"</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="gemrequired">设置gem被required</h2>

<p>如果你使用Rails的话，这点小技巧可能被隐藏了，但是在你的config/application.rb文件里面你能看到这么一行代码。</p>

<pre><code>Bundler.require(:default, Rails.env)
</code></pre>

<p>它的意思是require所有没有被放入group（后面会讲到这个概念）里面的gems和所有放入和当前rails环境（RAILS_ENV, development, test, production)同名的group里面的gems。</p>

<p>默认方式下，如果你在Gemfile里面包含一个gem，当Bundler.require被调用的时候会被包含进来。我们也能通过下面的设置让gem不被包含进来(译者注释：这样你就只能安装这个gem，在使用的时候必须在你的代码里手动的添加require ‘my_gem’来调用my_gem里面的方法了。为什么需要这样呢，因为并不是所有的地方都需要使用这个gem，比如你在rake task里面使用了my_gem, 而其他地方没有使用，故你只需要在这个gem require到task里面，避免了所有的进程都把这个gem加载进去）</p>

<pre><code>gem "my_gem", require: false
</code></pre>

<p>当然你也可以指定哪些文件夹被required的，如下：</p>

<pre><code>gem "my_gem", require: ["my_gem/specific_module/my_class", "my_gem"]
</code></pre>

<p>这点在当你的gem有很多功能的，你必须每次手动require的时候非常有用。</p>

<h2 id="gem-1">gem分组</h2>

<p>正如我上面提到的一样，一个gem可以属于一个或多个group，当它不属于任何group的时候，它被放入了:default group。
有两种方法你可以对一个gem分组。第一种是对group属性进行赋值，如下所示：</p>

<pre><code>gem "my_gem", group: :development
</code></pre>

<p>它的意思是，这个gem只在development环境下被require。这也意味着当你在安装gems的时候，你可以指定某个group下面的gems不被安装，这样在一定程度上能加快gem的安装。</p>

<pre><code>bundle install --without development test
</code></pre>

<p>上面的意思是安装除development和test group意外的所有gems。
第二种gem分组的方法就是你可以将gems放入一个block里面，如下所示：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">group :development do
</span><span class="line">   gem "my_gem"
</span><span class="line">   gem "my_other_gem"
</span><span class="line">end</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这看上去更美观，并且你也可以设置多个group。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">group :development, :test do
</span><span class="line">  gem "my_gem"
</span><span class="line">  gem "my_other_gem"
</span><span class="line">end</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果你想让某个group变成可选的形式，你也可以像下面这样，设置optional: true</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">group :development, optional: true do
</span><span class="line">   gem "my_gem"
</span><span class="line">   gem "my_other_gem"
</span><span class="line">end</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>当上面被设置时，为了安装development group下面的gems，需要运行bundle install —with development</p>

<h2 id="gem-2">设置gem的平台</h2>

<p>如果某个gem只能在某个平台上使用，你也可以在gemfile里面设置。平台的原理和group很类似，但不同的是你不需要去通过—without这样的option去指定，它会自动根据平台判断执行。</p>

<pre><code>gem "my_gem", platform: :jrubygem "my_other_gem", platform: [:ruby, :mri_18]
</code></pre>

<p>下面是一个不同平台的list。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">* ruby – C Ruby (MRI) or Rubinius, but not Windows
</span><span class="line">   * ruby_18 to ruby_22 – ruby &amp; (version 1.8 .. version 2.2)
</span><span class="line">   * mri – Same as ruby, but not Rubinius
</span><span class="line">   * mri_18 to mri_22 – mri &amp; (version 1.8 .. version 2.2)
</span><span class="line">   * rbx – Same as ruby, but only Rubinius (not MRI)
</span><span class="line">   * jruby – JRuby
</span><span class="line">   * mswin – Windows
</span><span class="line">   * mingw – Windows 32 bit mingw32 platform (aka RubyInstaller)
</span><span class="line">   * mingw_18 to mingw_22 – mingw &amp; (version 1.8 .. version 2.2)
</span><span class="line">   * x64_mingw – Windows 64 bit mingw32 platform
</span><span class="line">   * x64_mingw_20 to x64_mingw_22 – x64_mingw &amp; (version 2.0 .. version 2.2)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我发现平台真的非常有用，当一个开发团队在不同平台开发的时候。当你team的一个开发者使用的是Windows平台的时候，你可能需要不同版本的gem来支持。我经常使用下面的block语法来使用platform设定。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">platforms :jruby do
</span><span class="line">  gem "my_gem"
</span><span class="line">  gem "my_other_gem"
</span><span class="line">end</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="gem-3">设置gem的源</h2>

<p>ok，现在我们来讲设置gem的源，如下所示:</p>

<pre><code>gem "my_gem", source: "https://my_awesome_gemsite.com"
</code></pre>

<p>如果这个my_gem 在source里面找不到的话，Bundler也不会去default的源里面找，所以找不到的情况下这个gem就不会被安装。</p>

<h2 id="gitgem">从git安装gem</h2>

<p>你可以设置gem的安装源为一个git repo，比如GitHub, 这只需要你将source属性替换为git。你可以设置这个repo的链接为HTTP(S), SSH, GIT等协议，但最好使用HTTP(S)和SSH，因为其他的会使你可能成为man-in-the-middle攻击的受害者。如果你把gem放入到repo里面，你必须要在repo根目录文件夹下面有一个.gemspec 文件。这里面需要包含一个合法gem的声明。如果你没有提供这个文件，Bundler会尝试创建一个，但是他不会被依赖。如果你尝试去include一个没有提供.gemspec文件的git repo里面的gem，你必须指定一个版本号。</p>

<p>你可以为gem设置branch，tag，ref，默认是使用master branch。你也可以强制Bundler扩展submodule，通过以下方式来设置：</p>

<pre><code>gem "my_gem", git: "ssh@githib.com/tosbourn/my_gem", branch: test_branch, submodules: true
</code></pre>

<p>如果你有多个gem来自同一个git repo，你也可以通过下面block形式组织起来。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git "git@github.com:tosbourn/my_gems.git" do
</span><span class="line">  gem "my_gem"
</span><span class="line">  gem "my_other_gem"
</span><span class="line">end</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="gitsource">设置Git作为source</h2>

<p>你可以设置一个URL来作为一个更广义的源，你可以通过调用#git_source方法并将name作为参数传进去，以及一个接收一个参数的block，并返回一个string作为repo的URL。如下所示：</p>

<pre><code>git_source(:custom_git){ |repo| "https://my_secret_git_repos.com/#{repo}.git" }
gem "my_gem", custom_git: "tosbourn/test_repo"
</code></pre>

<h2 id="bitbucketgithubhelper-method">BitBucket和Github的helper method</h2>

<p>因为BitBucket和Github都是比较流行的git repo host，所以有两者的helper method。在两者里面，Bundler都默认repo是public的。</p>

<pre><code>gem "my_gem", github: "tosbourn/my_gem" 
gem "my_gem", bitbucket: "tosbourn/my_gem"
</code></pre>

<p>你也可以设置两者的branch。当用户名和repo名字一致的时候，可以省略一个。</p>

<pre><code>gem "rails", github: "rails"
gem "rails", bitbucket: "rails"
</code></pre>

<p>注意：在Bundler 2出来之前，你不能使用:github这个参数，目前它是使用git://协议的，就是前面讲过的可能会受到man-in-the-middle攻击的。还有一个helper :gist, 如果你Github上是以gist的形式存放的话就能够使用它。你可以只使用gist ID作为path，也可以像:github, :bitbucket那样传入:branch参数。</p>

<pre><code>gem "my_gem", :gist =&gt; "5935162112", branch: "my_custom_branch"
</code></pre>

<h2 id="pathgem">用path包含本地Gem</h2>

<p>你可以通过传入:path参数来依赖你本地的gems。</p>

<pre><code>gem "my_gem", :path =&gt; "../my_path/my_gem"
</code></pre>

<p>如果你传入一个相对路径的话（如上），这个路径是相对于你Gemfile的路径的。如果你想把某个文件夹下所有的gems都包含进去的话，你可以使用如下的block。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">path "../my_path/gems" do
</span><span class="line">  gem "my_gem"
</span><span class="line">  gem "my_other_gem"
</span><span class="line">end</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>有一点值得注意的是，如果你使用的是path的话，Bundler是不会编译c extension的。</p>

<h2 id="gems-1">选择性的安装gems</h2>

<p>有时候你想在某个前提条件被满足的情况下安装这个gem，比如你系统里面是否有某个程序。下面这个方法能够接收一个proc或lambda，下面的例子中我们将在你的系统是mac的时候安装这个gem</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">install_if -&gt; { RUBY_PLATFORM =~ /darwin/ } do
</span><span class="line">   gem "my_osx_gem"
</span><span class="line">end</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-2">结束语</h2>

<p>谢谢你的阅读并希望它能对你有所帮助，如果我有什么遗漏或你有什么问题的话请联系我~</p>

<hr />
<p>转载自 <a href="https://ruby-china.org/topics/26655">ruby-china</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Surge]]></title>
    <link href="http://helloyokoy.github.io/blog/surge/"/>
    <updated>2015-11-02T11:24:57+08:00</updated>
    <id>http://helloyokoy.github.io/blog/surge</id>
    <content type="html"><![CDATA[<p>iOS 9 有个激动人心的新特性 Network Extension 弥补了 iOS 长久以来无法定制底层网络 app 的不足。APN 代理不安全，成本高；虚拟专网速度不佳，爱掉线，阻塞问题严重…</p>

<p><img src="https://g.owind.com/content/images/2015/10/surgelogo.jpg" alt="alt text" title="surge" /></p>

<p>那么对于专业用户来说比较完美的方案必须是安全的，可低成本的，最大网络速度，无连接状态，国内外分流完美的 iOS 方案，那么现在这个堕落的愿望已经实现了，感谢苹果公司这么给(chi)力(dao)的 API 和 app 开发大牛。</p>

<p>Surge.app （App Store）是一款给专业用户使用的网络调试工具，使用比较复杂。它的工作原理是使用 packet tunnel provider，然后给系统套上一个代理，后端转发支持 http 代理，SSL 代理，和 Socks 代理。如果 app 尊重系统代理，就会走这个代理，如果不尊重，我们也可以通过规则强制流量走系统 tun 设备达到支持全部 app 的目的。用代理的好处是可以跟踪和调试网络，容易分流，ACL 功能更多，弹性更大更方便。</p>

<!--more-->

<p>简单的开始可以直接导入一份 conf 文件（URL 或者 iTunes），例如<a href="https://gist.github.com/janlay/b57476c72a93b7e622a6" title="link">这里</a>的，对于不求甚解的用户来说你可以直接使用完事（但是你还是要改改服务器地址用户名什么的。。或者直接从供应商处获取导入 URL）。</p>

<p>配置的结构大概是这样，对于专业用户来说，理解应该不难</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span> (rules)</span> <a href="http://helloyokoy.github.io/downloads/code/rules">download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
</pre></td><td class="code"><pre><code class=""><span class="line"><span class="k">[General]</span>
</span><span class="line"><span class="c1"># warning, notify, info, verbose</span>
</span><span class="line"><span class="na">loglevel</span> <span class="o">=</span> <span class="s">notify</span>
</span><span class="line">
</span><span class="line"><span class="k">[Proxy]</span>
</span><span class="line"><span class="c1"># http, https, socks5</span>
</span><span class="line"><span class="c1"># SSLedge 使用 https，老式 APNp 用 http</span>
</span><span class="line"><span class="na">Proxy</span> <span class="o">=</span> <span class="s">https, server, port, username, password, ciphers </span>
</span><span class="line">
</span><span class="line"><span class="k">[Rule]</span>
</span><span class="line"><span class="c1"># 域名关键字，干掉不想要的请求</span>
</span><span class="line"><span class="err">DOMAIN-KEYWORD,umeng.co,REJECT</span>
</span><span class="line"><span class="err">...</span>
</span><span class="line">
</span><span class="line"><span class="c1"># 常用网站优先匹配，加快速度。使用代理转发，完全没有 CDN 被干扰的问题~</span>
</span><span class="line"><span class="err">DOMAIN-SUFFIX,cn,DIRECT</span>
</span><span class="line"><span class="err">DOMAIN-SUFFIX,qq.com,DIRECT</span>
</span><span class="line"><span class="err">DOMAIN-SUFFIX,ls.apple.com,DIRECT</span>
</span><span class="line"><span class="err">DOMAIN-SUFFIX,apple.com,Proxy</span>
</span><span class="line"><span class="err">...</span>
</span><span class="line">
</span><span class="line"><span class="c1"># 强制这些不尊重系统代理的请求走 packet-tunnel-provider，解决 Twitter.app 和 Mail.app 收发邮件问题</span>
</span><span class="line"><span class="err">DOMAIN-KEYWORD,twitter,Proxy,force-remote-dns</span>
</span><span class="line"><span class="err">DOMAIN-KEYWORD,gmail,Proxy,force-remote-dns</span>
</span><span class="line"><span class="c1"># instagram.app 也没问题</span>
</span><span class="line"><span class="err">DOMAIN-KEYWORD,instagram,Proxy,force-remote-dns</span>
</span><span class="line"><span class="c1"># Telegram.app 也没问题</span>
</span><span class="line"><span class="err">IP-CIDR,91.108.56.0/22,Proxy,force-remote-dns</span>
</span><span class="line"><span class="err">...</span>
</span><span class="line">
</span><span class="line"><span class="c1"># LAN</span>
</span><span class="line"><span class="err">IP-CIDR,192.168.0.0/16,DIRECT</span>
</span><span class="line"><span class="err">...</span>
</span><span class="line">
</span><span class="line"><span class="c1"># 其余的请求使用 GEOIP 判断服务器所在地，如果是国内的，走直连，搞定</span>
</span><span class="line"><span class="err">GEOIP,CN,DIRECT</span>
</span><span class="line">
</span><span class="line"><span class="c1"># 最后 Matchall，丢给代理</span>
</span><span class="line"><span class="err">FINAL,Proxy</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>通过规则定义和组合，必然可以满足专业用户的需求，非常强大。配置可以使用 app 自带的 GUI，当然也有文本编辑方式。</p>

<p>由于 Surge 的核心和是个 http proxy，有些处理不了的请求我们可以强制 bypass 掉，走系统接口，这个可以在代理设置-高级处设置，如果你不太懂，请不要随意设置。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime Text 2 Plugin]]></title>
    <link href="http://helloyokoy.github.io/blog/sublime-text-2-plugin/"/>
    <updated>2015-11-01T19:58:52+08:00</updated>
    <id>http://helloyokoy.github.io/blog/sublime-text-2-plugin</id>
    <content type="html"><![CDATA[<p>Sublime Text 2是一个轻量、简洁、高效、跨平台的编辑器，方便的配色以及兼容vim快捷键等各种优点博得了很多前端开发人员的喜爱。之前也不并知道它有这么多插件的扩展与支持，直到vincent问到有没有在用cTags插件，才知道原来Sublime通过插件也可以实现一些大型IDE的功能，遂google一下，本篇Blog就来介绍下Sublime下经常使用的插件。</p>

<h4 id="package-control">安装包控制（Package Control）</h4>

<p>打开Sublime Text 2，点击 Tools -&gt; Command Palette 调出控制台Console；</p>

<p>将以下代码粘贴进命令行中并回车：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">import urllib2,os;pf='Package Control.sublime-package';ipp=sublime.installed_packages_path();os.makedirs(ipp) if not os.path.exists(ipp) else None;open(os.path.join(ipp,pf),'wb').write(urllib2.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read())</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>重启 Sublime Text 2，如果在 Preferences -&gt; Package Settings中见到Package Control这一项，就说明安装成功了。</p>

<!--more-->

<h4 id="alignment">安装Alignment插件</h4>
<p>对于某些喜欢整齐的程序员来说，看到下面这种情况可能是让其无法忍受的：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var joe = 'joe';
</span><span class="line">var johnny = 'johnny';
</span><span class="line">var quaid = 'quaid';</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>一定要改成这样才会安心：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var joe    = 'joe';
</span><span class="line">var johnny = 'johnny';
</span><span class="line">var quaid  = 'quaid';</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Sublime Text 2 之中，一个 Sublime Alignment 插件也可以轻松实现。</p>

<ol>
  <li>
    <p>按下 Ctrl + Shift + P 调出命令面板。</p>
  </li>
  <li>
    <p>输入 install 调出 Package Control: Install Package 选项，按下回车。</p>
  </li>
  <li>
    <p>在列表中找到 Alignment，按下回车进行安装。</p>
  </li>
  <li>
    <p>重启 Sublime Text 2 使之生效。现在通过选中文本并按 Ctrl + Shift + A 就可以进行对齐操作了。</p>
  </li>
</ol>

<h4 id="vim">Vim模式</h4>

<p>是的，Sublime Text 2已经支持 Vim 的编辑模式了，如果更喜欢 Vim 的编辑模式，可以通过以下方法来激活 Vintage mode：</p>

<ol>
  <li>
    <p>按下 Ctrl + Shift + P 调出命令面板。</p>
  </li>
  <li>
    <p>输入 settings user 调出 Preferences：Settings - User，并按下回车。</p>
  </li>
  <li>
    <p>这时会打开一个 Preferences.sublime-settings 的文件， 如果是第一次修改，它应该是个空文件，把以下文本粘贴进去：</p>

    <p>{
  		“ignored_packages”: []
 }</p>
  </li>
  <li>
    <p>保存这个文件，这时按下 ESC 键，再按下一些你熟悉的 Vim 命令，是不是很有亲切感？</p>
  </li>
</ol>

<h4 id="soda-">安装 Soda 主题</h4>
<p>这里所讲的主题不同于针对代码的 Color Scheme，是指针对 Sublime 程序本身的主题，目前可以安装的是 Ian Hill 的 Soda。</p>

<p>因为源中已经添加，所以这款主题的安装同样可以通过 Package Control，非常方便。目前 Soda 主题提供了明暗两种风格。</p>

<p>激活方法，同样要修改 Preferences：Settings - User：</p>

<ol>
  <li>
    <p>按下 Ctrl + Shift + P 调出命令面板。</p>
  </li>
  <li>
    <p>输入 user settings 调出 Preferences：Settings - User，并按下回车。</p>
  </li>
  <li>
    <p>添加以下代码激活 Soda Light 主题：</p>

    <p>{
  		“theme”: “Soda Light.sublime-theme”
 }</p>

    <p>添加以下代码激活 Soda Dark 主题：</p>

    <p>{
  		“theme”: “Soda Dark.sublime-theme”
 }</p>
  </li>
  <li>
    <p>保存生效。</p>
  </li>
</ol>

<h4 id="ctags">安装cTags插件</h4>
<p>这个插件能跨文件跳转，实现像eclipse可那样以追踪函数的功能，从此更喜欢上Sublime了。安装方法:</p>

<ol>
  <li>
    <p>按下 Ctrl + Shift + P 调出命令面板。</p>
  </li>
  <li>
    <p>输入 install 调出 Package Control: Install Package 选项，按下回车。</p>
  </li>
  <li>
    <p>在列表中找到 ctags，按下回车进行安装。</p>
  </li>
  <li>
    <p>ubuntu下安装运行命令：sudo apt-get install exuberant-ctags。</p>
  </li>
  <li>
    <p>在sublime项目文件夹右键， 会出现Ctag:Rebuild Tags 的菜单。点击它，然后会生成.tags的文件。</p>
  </li>
</ol>

<p>然后在你代码中， 光标放在某个函数上， 点击ctrl+shift+鼠标左键 就可以跳转到函数声明的地方。</p>

<h4 id="zen-coding">Zen Coding</h4>
<p>如果经常要写一些前端的代码，这个插件也是必不可少的，还不知道ZenCoding的同学推荐去看一下：《Zen Coding: 一种快速编写HTML/CSS代码的方法》</p>

<h4 id="git">Git</h4>
<p>一个整合GIT和Sublime Text的插件，执行了很多你需要使用的命令。</p>

<hr />
<p>转载自 <a href="http://stormzhang.com/devtools/2012/12/30/sublime-plugin/">stormzhang博客</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WeChat 开发环境搭建]]></title>
    <link href="http://helloyokoy.github.io/blog/wechat-develop-environment/"/>
    <updated>2015-10-29T15:46:09+08:00</updated>
    <id>http://helloyokoy.github.io/blog/wechat-develop-environment</id>
    <content type="html"><![CDATA[<p>由于微信开发都是在微信内浏览器运行，不管是登陆还是支付都不能在PC开发端愉快地玩耍，但世界我们还是需要拯救的。</p>

<p>由于自己换了新电脑，第一次做微信开发跟大家分享一下我的开发环境，欢迎拍砖交流。</p>

<p>一般的第三方开发永远离不开两个配置，域名 &amp; 回调，有一些平台支持localhost的域名&amp;回调会方便，更有支持随意更改端口的，微信上面貌似都没有 。</p>

<p>好了，假定我们的域名是playmonkey.me</p>

<h2 id="section">域名</h2>

<p>微信登陆，JSAPI以及支付都有域名限制，所以需要让手机微信上打开palymonkey.me时，访问到我们本地的development server。</p>

<p>干这个勾当的当属 Charles 神器。</p>

<!--more-->

<p>下载安装打开Charles
Proxy -&gt; Proxy Setting -&gt; Http Proxy勾选Enable…. 开启http proxy代理，端口默认是8888
Tool -&gt; DNS Spoofing Settings 勾选Enable DNS Spoofing
然后把palymonkey.me加到DNS Spoofs，指向本机127.0.0.1
Charles好了，下一步配置手机，确保你的手机网络和电脑在同一局域网，配置手机的HTTP代理到电脑的IP上，端口8888；</p>

<p>访问http://playmonkey.me；</p>

<p>什么？挂了？当然，酱紫访问的是本地的80端口。</p>

<p>好了，我们再来用 Nginx 反向代理搞定这个问题，让手机端的playmonkey.me访问到本地development server的3000端口上。</p>

<p>首先安装启动Nginx，用Apache的朋友对不起了，你们要自食其力XD</p>

<p>配置Nginx</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">server</span> <span class="p">{</span>
</span><span class="line">      <span class="n">listen</span> <span class="mi">80</span><span class="p">;</span>
</span><span class="line">      <span class="n">server_name</span> <span class="n">playmonkey</span><span class="o">.</span><span class="n">me</span><span class="p">;</span>
</span><span class="line">      <span class="n">charset</span> <span class="n">utf</span><span class="o">-</span><span class="mi">8</span><span class="p">;</span>
</span><span class="line">      <span class="n">location</span> <span class="o">/</span> <span class="p">{</span>
</span><span class="line">        <span class="n">proxy_pass</span>          <span class="ss">http</span><span class="p">:</span><span class="sr">//mon</span><span class="n">key_servers</span><span class="p">;</span>
</span><span class="line">        <span class="n">proxy_redirect</span>      <span class="n">default</span><span class="p">;</span>
</span><span class="line">        <span class="n">proxy_set_header</span>    <span class="n">X</span><span class="o">-</span><span class="no">Forwarded</span><span class="o">-</span><span class="no">For</span> <span class="vg">$proxy_add_x_forwarded_for</span><span class="p">;</span>
</span><span class="line">        <span class="n">proxy_set_header</span>    <span class="n">X</span><span class="o">-</span><span class="no">Real</span><span class="o">-</span><span class="no">IP</span> <span class="vg">$remote_addr</span><span class="p">;</span>
</span><span class="line">        <span class="n">proxy_set_header</span>    <span class="no">Host</span> <span class="vg">$http_host</span><span class="p">;</span>
</span><span class="line">        <span class="n">proxy_next_upstream</span> <span class="n">http_502</span> <span class="n">http_504</span> <span class="n">error</span> <span class="n">timeout</span> <span class="n">invalid_header</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">      <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">upstream</span> <span class="n">palymonkey_servers</span><span class="p">{</span>
</span><span class="line">      <span class="n">server</span> <span class="mi">127</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="p">:</span><span class="mi">3000</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>再用手机访问http://playmonkey.me ，Nice….这回看到页面了。
到此我们可以在微信上用playmonkey.me访问本地的dev server，可以愉快地调用JSAPI &amp; 微信oauth登陆 &amp; 发起支付。</p>

<p>噢，如果做的是PC端的oauth微博登录怎么办？ 在本地host加上 127.0.0.1 palymonkey.com。Nice XD、</p>

<h2 id="section-1">异步回调</h2>

<p>上面说到发起支付，微信的支付结果是通过异步回调的，所以需要做内网穿透，这里推荐两个工具 ngrok OR localtunnel</p>

<p>localtunnel</p>

<p>localtunnel 是node写的，用起来非常简单</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>npm install -g localtunnel
</span><span class="line"><span class="nv">$ </span>lt --port 3000
</span><span class="line">your url is: https://gqgh.localtunnel.me
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这样外网打开https://gqgh.localtunnel.me 就可以访问到本地的3000端口</p>

<p>但是localtunnel是国外的，公司网络刚刚搭好，经常不稳定果断抛弃转入ngrok；</p>

<p>ngrok（不想折腾的可以忽略XD）</p>

<p>悲催的是ngrok也是国外的，而且服务器给墙了，BUT，问题不大，我们可以pull ngrok 1.X的源码自己编译，2.0会报证书错误如果没有合法的https证书。</p>

<p>好了我们来编译ngrok，噢，对了，ngrok是Go写的，编译出来直接是一个可执行文件，爽歪歪有木有，哈~</p>

<p>在服务器端（每家都有一只staging服务器吧）</p>

<p>NGROK_DOMAIN 设置为您自己拥有的域名，并指向Ngrok server运行的服务器</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">NGROK_DOMAIN</span><span class="o">=</span><span class="s2">&quot;my.domain.com&quot;</span>
</span><span class="line">git clone https://github.com/inconshreveable/ngrok.git
</span><span class="line"><span class="nb">cd </span>ngrok
</span><span class="line">
</span><span class="line">openssl genrsa -out rootCA.key 2048
</span><span class="line">openssl req -x509 -new -nodes -key rootCA.key -subj <span class="s2">&quot;/CN=$NGROK_DOMAIN&quot;</span> -days <span class="m">5000</span> -out rootCA.pem
</span><span class="line">openssl genrsa -out device.key 2048
</span><span class="line">openssl req -new -key device.key -subj <span class="s2">&quot;/CN=$NGROK_DOMAIN&quot;</span> -out device.csr
</span><span class="line">openssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000
</span><span class="line">
</span><span class="line">cp rootCA.pem assets/client/tls/ngrokroot.crt
</span><span class="line"><span class="c"># make clean</span>
</span><span class="line">make release-server release-client
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>编译完有两个可执行文件 bin/ngrok &amp; bin/ngrokd 
将bin/ngrok copy到你本机
在服务器上开启ngrok server</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">bin/ngrokd -tlsKey<span class="o">=</span>device.key -tlsCrt<span class="o">=</span>device.crt -domain<span class="o">=</span><span class="s2">&quot;$NGROK_DOMAIN&quot;</span> -httpAddr<span class="o">=</span><span class="s2">&quot;:8000&quot;</span> -httpsAddr<span class="o">=</span><span class="s2">&quot;:8001&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>本地端</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">NGROK_DOMAIN</span><span class="o">=</span><span class="s2">&quot;my.domain.com&quot;</span>
</span><span class="line"><span class="nb">echo</span> -e <span class="s2">&quot;server_addr: $NGROK_DOMAIN:4443\ntrust_host_root_certs: false&quot;</span> &gt; ngrok-config
</span><span class="line">./ngrok -config<span class="o">=</span>ngrok-config -subdomain<span class="o">=</span>playmonkey <span class="m">3000</span> // 配置subdomain到本地3000端口，这样外网通过playmonkey.NGROK_DOMAIN 就可以访问到本地dev server的3000端口
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>或者用SSH forwarding</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">./ngrok -config<span class="o">=</span>ngrok-config -subdomain<span class="o">=</span><span class="m">3000</span> --proto<span class="o">=</span>tcp 22
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>以上Ngrok编译&amp;配置出自 <a href="https://gist.github.com/lyoshenka/002b7fbd801d0fd21f2f">How to setup Ngrok with a self-signed SSL cert</a></p>

<p>至此我们在发起微信支付时回调URL的HOST就可以设置为playmonkey.NGROK_DOMAIN</p>

<p>至此我们可以愉快地开发测试 微信的oauth登录 &amp; JSAPI &amp; 支付 &amp; 支付回调，好吧，很多BUG一点都不愉快。
另外感谢 <a href="https://ruby-china.org/ruby_sky">@ruby_sky</a> 的这篇 <a href="https://ruby-china.org/topics/26138">微信支付文章</a> 微信支付做起来如丝般顺滑；
内微信文档看起来太蛋疼了，各种配置也是找半天，大家有兴趣我可以总结一下微信各个开发的各种配置XD。</p>

<hr />
<p>转载自 <a href="https://ruby-china.org/topics/26443">ruby-china</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微信开发 gems]]></title>
    <link href="http://helloyokoy.github.io/blog/wechat-gems/"/>
    <updated>2015-10-27T15:35:10+08:00</updated>
    <id>http://helloyokoy.github.io/blog/wechat-gems</id>
    <content type="html"><![CDATA[<p>最近陆续有不少用Rails开发微信项目的朋友在Github上开始使用weixin_rails_middleware、weixin_authorize，也不少人谈到Ratchet，春节开始到现在，一直有做微信的开发，现在在论坛上发布出来，希望让更多人知道这些gem的存在，更快速的完成你们手中的任务。</p>

<p>有问题可以前往：微信开发论坛：http://weixin-dev.com/</p>

<p>代码写得不好，还请多多包涵，如果有任何问题，可以直接联系我。:)</p>

<!--more-->

<h4 id="rails">1:一（两）条命令搭建Rails微信版本</h4>

<p>按照最简洁的速度，10分钟可以跑起一个微信的项目：
https://github.com/lanrion/weixin_rails_middleware</p>

<p>自动验证微信请求；
一（两）条命令，一个配置，简练风格；
支持Rails 3, Rails 4；
支持多公众账号平台，例如类似微盟；
支持单个用户，即一个账号，但又不想保存在数据库；
提供回复消息辅助方法；
提供所有微信消息类型的业务逻辑的回复处理；
wiki 中提供自定义菜单中的实现案例；
自动生成token；
详细见：</p>

<p>https://github.com/lanrion/weixin_rails_middleware/wiki/</p>

<p>wiki中也有不少关于开发上的建议与经验，还有自己遇到一些奇葩的问题</p>

<p>https://github.com/lanrion/weixin_rails_middleware</p>

<h4 id="api">2：微信高级API实现：</h4>

<p>https://github.com/lanrion/weixin_authorize</p>

<p>除 Oauth 2 未实现，其他API均已实现；
支持Redis存储access_token；
还是直接看wiki 吧：</p>

<p>https://github.com/lanrion/weixin_authorize/wiki/Getting-Started
wiki中也有不少关于开发上的建议与经验，还有自己遇到一些奇葩的问题</p>

<h4 id="ratchet-v201gem-twitterratchetrails">3：集成Ratchet v2.0.1的gem: twitter_ratchet_rails</h4>

<p>即：http://goratchet.com/ 压缩后非常小，十分适合wap使用，但有一个不足之处在于，组件不够丰富，期待更丰富的实现
没其他多余的好说，看官直接点击：</p>

<p>https://github.com/lanrion/twitter_ratchet_rails</p>

<p>小弟身材弱小，砖别拍的太猛，嘿，把我拍死了，就没人维护这三个gem了。:)</p>

<h4 id="section">4：例子（可能没有及时更新上最新版本）</h4>

<p>Rails 4: https://github.com/lanrion/weixin_rails_middleware_example</p>

<p>Rails 3: https://github.com/lanrion/weixin_rails_3</p>

<p>企业微信gem</p>

<p>请稳步： https://ruby-china.org/topics/22479</p>

<p>微信开发论坛：http://weixin-dev.com/</p>

<hr />
<p>转载自 <a href="https://ruby-china.org/topics/18439">ruby-china</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS9 适配]]></title>
    <link href="http://helloyokoy.github.io/blog/ios9-adaption/"/>
    <updated>2015-10-27T12:44:03+08:00</updated>
    <id>http://helloyokoy.github.io/blog/ios9-adaption</id>
    <content type="html"><![CDATA[<h2 id="ios9atshttps">1. iOS9网络适配_ATS：改用更安全的HTTPS</h2>

<p>[摘要]为了强制增强数据访问安全， iOS9 默认会把 <del>所有的http请求</del> 所有从<code>NSURLConnection</code> 、 <code>CFURL</code> 、 <code>NSURLSession</code>发出的 HTTP 请求，都改为 HTTPS 请求：iOS9.x-SDK编译时，默认会让所有从<code>NSURLConnection</code> 、 <code>CFURL</code> 、 <code>NSURLSession</code>发出的 HTTP 请求统一采用TLS 1.2 协议。因为 AFNetworking 现在的版本底层使用了 <code>NSURLConnection</code> ，众多App将被影响（基于iOS8.x-SDK的App不受影响）。服务器因此需要更新，以解析相关数据。如不更新，可通过在 Info.plist 中声明，倒退回不安全的网络请求。而这一做法，官方文档称为ATS，全称为App Transport Security，是iOS9的一个新特性。</p>

<p>一个符合 ATS 要求的 HTTPS，应该满足如下条件：</p>

<ol>
  <li>Transport Layer Security协议版本要求TLS1.2以上</li>
  <li>服务的Ciphers配置要求支持Forward Secrecy等</li>
  <li>证书签名算法符合ATS要求等</li>
</ol>

<p>官方文档 <a href="https://developer.apple.com/library/prerelease/ios/technotes/App-Transport-Security-Technote/index.html#//apple_ref/doc/uid/TP40016240"> <strong><em>App Transport Security Technote</em></strong> </a> 对ATS 的介绍：</p>

<p><img src="http://i58.tinypic.com/ajsf0j.jpg" alt="enter image description here" /></p>

<!--more-->

<p>注：有童鞋反映：服务器已支持TLS 1.2 SSL ，但iOS9上还是不行，还要进行本文提出的适配操作。</p>

<p>那是因为：要注意 App Transport Security 要求 TLS 1.2，而且它要求站点使用支持forward secrecy协议的密码。证书也要求是符合ATS规格的，ATS只信任知名CA颁发的证书，小公司所使用的 self signed certificate，还是会被ATS拦截。。因此慎重检查与你的应用交互的服务器是不是符合ATS的要求非常重要。对此，建议使用下文中给出的NSExceptionDomains，并将你们公司的域名挂在下面。下文也会详细描述该问题。</p>

<p>官方文档 <a href="https://developer.apple.com/library/prerelease/ios/technotes/App-Transport-Security-Technote/index.html#//apple_ref/doc/uid/TP40016240"> <strong><em>App Transport Security Technote</em></strong> </a> 对CA颁发的证书要求：</p>

<blockquote>
  <p>Certificates must be signed using a SHA256 or better signature hash algorithm, with either a 2048 bit or greater RSA key or a 256 bit or greater Elliptic-Curve (ECC) key.
Invalid certificates result in a hard failure and no connection</p>
</blockquote>

<p>在讨论之前，跟往常一样，先说下iOS程序猿们最关心的问题：</p>

<h3 id="section">跟我有毛关系？需要我加班吗？！</h3>

<p>首先咱们来看下业内对Apple这一做法的评论：</p>

<p><img src="https://i.imgur.com/Q17QDG0.png" alt="enter image description here" /></p>

<p>这是某社交App上讨论，看来业内还是吐槽声和肯定声同在。</p>

<p>结论是：</p>

<blockquote>
  <p>跟你很有关系，加班吧，少年！</p>
</blockquote>

<p>书归正传【严肃脸】，我们正式讨论下 WHAT，WHY，HOW：</p>

<ol>
  <li>WHAT（什么是SSL/TLS？跟HTTP和HTTPS有什么关系）</li>
  <li>WHY（以前的HTTP不是也能用吗？为什么要用SSL/TLS？！Apple是不是又在反人类？）</li>
  <li>HOW（如何适配？—弱弱地问下：加班要多久？）</li>
</ol>

<h3 id="whatssltlshttphttps">WHAT（什么是SSL/TLS？跟HTTP和HTTPS有什么关系）</h3>

<p>什么是SSL/TLS？
SSL你一定知道，在此不做赘述。主要说下什么是TLS，还有跟HTTP和HTTPS有什么关系。</p>

<p>TLS 是 SSL 新的别称：</p>

<p>“TLS1.0”之于“SSL3.1”，犹“公元2015”之于“民国104”，“一千克”之于“一公斤”：称呼不同，意思相同。</p>

<p>SSL 3.0版本之后的迭代版本被重新命名为TLS 1.0：<strong>TLS 1.0＝SSL 3.1</strong>。所以我们平常也经常见到 “SSL/TLS” 这种说法。</p>

<p>目前，应用最广泛的是TLS 1.0，接下来是SSL 3.0。目前主流浏览器都已经实现了TLS 1.2的支持。</p>

<p>常用的有下面这些：</p>

<ul>
  <li>SSL 2.0</li>
  <li>SSL 3.0</li>
  <li>TLS 1.0 (SSL 3.1)</li>
  <li>TLS 1.1 (SSL 3.1)</li>
  <li>TLS 1.2 (SSL 3.1)</li>
</ul>

<p>那为什么标题是“使用HTTPS”而没有提及SSL和TLS什么事？
“SSL/TLS”跟HTTP和HTTPS有什么关系？</p>

<p>要理解这个，要看下他们之间的关系：</p>

<blockquote>
  <p>HTTP+SSL/TLS+TCP = HTTPS</p>
</blockquote>

<p><img src="http://www.zytrax.com/tech/survival/ssl-layers.gif" alt="HTTP+SSL/TLS+TCP" /></p>

<p>或者</p>

<blockquote>
  <p>HTTPS = “HTTP over SSL”</p>
</blockquote>

<p>也就是说：</p>

<blockquote>
  <p>Apple让你的HTTP采用SSL/TLS协议，就是让你从HTTP转到HTTPS。而这一做法，官方文档称为ATS，全称为App Transport Security。</p>
</blockquote>

<h3 id="whyhttpssltlsapple">WHY（以前的HTTP不是也能用吗？为什么要用SSL/TLS？Apple是不是又在反人类？）</h3>

<blockquote>
  <p>不使用SSL/TLS的HTTP通信，就是不加密的通信！</p>
</blockquote>

<p>不使用SSL/TLS的HTTP通信，所有信息明文传播，带来了三大风险：</p>

<ol>
  <li>窃听风险（eavesdropping）：第三方可以获知通信内容。</li>
  <li>篡改风险（tampering）：第三方可以修改通信内容。</li>
  <li>冒充风险（pretending）：第三方可以冒充他人身份参与通信。</li>
</ol>

<p>SSL/TLS协议是为了解决这三大风险而设计的，希望达到：
 1. 所有信息都是加密传播，第三方无法窃听。
 2. 具有校验机制，一旦被篡改，通信双方会立刻发现。
 3. 配备身份证书，防止身份被冒充。</p>

<p>SSL/TLS的作用，打个比方来讲：</p>

<p>如果原来的 HTTP 是塑料水管，容易被戳破；那么如今新设计的 HTTPS 就像是在原有的塑料水管之外，再包一层金属水管（SSL/TLS协议）。一来，原有的塑料水管照样运行；二来，用金属加固了之后，不容易被戳破。</p>

<h3 id="how---">HOW（如何适配？—弱弱地问下：加班要多久？）</h3>

<p>正如文章开头所说：</p>

<blockquote>
  <p>TLS 1.2 协议 强制增强数据访问安全 系统 Foundation 框架下的“相关网络请求”将不再默认使用 HTTP 等不安全的网络协议，而默认采用 TLS 1.2。服务器因此需要更新，以解析相关数据。如不更新，可通过在 Info.plist 中声明，倒退回不安全的网络请求。</p>
</blockquote>

<p>总之：</p>

<blockquote>
  <p>要么咱们iOS程序猿加班，要么后台加班：</p>
</blockquote>

<p>方案一：立即让公司的服务端升级使用TLS 1.2，以解析相关数据。</p>

<p>方案二：虽Apple不建议，但可通过在 Info.plist 中声明，倒退回不安全的网络请求依然能让App访问指定http，甚至任意的http，具体做法见gif图，示例Demo见 <a href="https://github.com/ChenYilong/iOS9AdaptationTips">Demo1</a></p>

<p><img src="https://github.com/ChenYilong/iOS9AdaptationTips/blob/master/Demo1_iOS9网络适配_改用更安全的HTTPS/微博%40iOS程序犭袁/http问题.gif" alt="enter image description here" /></p>

<p>这也是官方文档和WWDC给出的解决方案：</p>

<ol>
  <li>
    <p><a href="https://developer.apple.com/library/prerelease/ios/releasenotes/General/WhatsNewIniOS/Articles/iOS9.html#//apple_ref/doc/uid/TP40016198-DontLinkElementID_13">Apple官方文档</a>  <img src="https://i.imgur.com/eTgSHZY.png" alt="enter image description here" /></p>
  </li>
  <li>
    <p><a href="https://developer.apple.com/videos/wwdc/2015/?id=703">WWDC Session： “Networking with NSURLSession” session（ 【WWDC 2015 session 703, “Privacy and Your App” O网页链接 】, 时间在30:18左右）</a></p>
  </li>
</ol>

<p><img src="https://i.imgur.com/Tc0fS6p.jpg" alt="enter image description here" /></p>

<p><img src="https://i.imgur.com/v2Tskwh.jpg" alt="enter image description here" /></p>

<p><img src="https://cdn-images-1.medium.com/max/800/1*9-VeRXU5SAI6lLZeWLI0hQ.png" alt="enter image description here" /></p>

<p>即使你的应用使用的是：你没有权限控制的CDN (Content Delivery Network)，而且它不支持HTTPS！</p>

<p>也别担心，Apple都替你考虑好了：</p>

<p><img src="http://i61.tinypic.com/ae9tgj.jpg" alt="enter image description here" />
 正如你在上图中看到的：苹果官方提供了一些可选配置项来决定是否开启ATS模式，也就是可以选择开启或者不开启。</p>

<p>开发者可以针对某些确定的URL不使用ATS，这需要在工程中的info.plist中标记NSExceptionDomains。在NSExceptionDomains字典中，可以显式的指定一些不使用ATS的URL。这些你可以使用的例子可以是:</p>

<ul>
  <li>
    <p>NSIncludesSubdomains</p>
  </li>
  <li>
    <p>NSExceptionAllowInsecureHTTPLoads</p>
  </li>
  <li>
    <p>NSExceptionRequiresForwardSecrecy</p>
  </li>
  <li>
    <p>NSExceptionMinimumTLSVersion</p>
  </li>
  <li>
    <p>NSThirdPartyExceptionAllowsInsecureHTTPLoads</p>
  </li>
  <li>
    <p>NSThirdPartyExceptionMinimumTLSVersion</p>
  </li>
  <li>
    <p>NSThirdPartyExceptionRequiresForwardSecrecy</p>
  </li>
</ul>

<p>这些关键字使我们可以更加细致的设置针对不使用ATS的域名情况下禁用ATS或者一些特殊的ATS选项。</p>

<p>你可能注意到一些关键字像是使用了一些其他关键字中的词但是在前面加上了”ThirdParty”字样，比如列表里最后三个：</p>

<ul>
  <li>
    <p>NSThirdPartyExceptionAllowsInsecureHTTPLoads</p>
  </li>
  <li>
    <p>NSThirdPartyExceptionMinimumTLSVersion</p>
  </li>
  <li>
    <p>NSThirdPartyExceptionRequiresForwardSecrecy</p>
  </li>
</ul>

<p>在功能上，这些关键字与不含有”ThirdParty”的关键字有同样的效果。而且实际运行中所调用的代码将会完全忽略是否使用”ThirdParty”关键字。你应该使用适用于你的场景的关键字而不必过多考虑这些。</p>

<p>关于App Transport Security，每个应用都属于4个大类当中的一类。我们来看看每一个大类都是怎样影响应用的。</p>

<table>
  <thead>
    <tr>
      <th>–</th>
      <th>分类名</th>
      <th>解释</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1.</td>
      <td>HTTPS Only （只有HTTPS，所有情况下都使用ATS）</td>
      <td>如果你的应用只基于支持HTTPS的服务器，那么你太幸运了。你的应用不需要做任何改变。但是，注意App Transport Security要求TLS 1.2而且它要求站点使用支持forward secrecy协议的密码。证书也要求是符合ATS规格的。因此慎重检查与你的应用交互的服务器是不是符合ATS的要求非常重要。</td>
    </tr>
    <tr>
      <td>2.</td>
      <td>Mix &amp; Match（混合）</td>
      <td>你的应用与一个不符合ATS要求的服务器工作是很有可能的。在这种情况下，你需要告诉操作系统哪些站点是涉及到的然后在你的应用的 Info.plist文件中指明哪些要求没有达到。</td>
    </tr>
    <tr>
      <td>3.</td>
      <td>Opt Out（禁用ATS）</td>
      <td>如果你在创建一个网页浏览器，那么你有一个更大的麻烦。因为你不可能知道你的用户将要访问那个网页，你不可能指明这些网页是否支持ATS要求且在HTTPS上传输。在这种情况下，除了全部撤销 App Transport Security 没有其它办法。</td>
    </tr>
    <tr>
      <td>4.</td>
      <td>Opt Out With Exceptions（除特殊情况外，都不使用ATS）</td>
      <td>当你的应用撤消了App Transport Security,，但同时定义了一些例外。这非常有用就是当你的应用从很多的服务器上取数据，但是也要与一个你可控的API交互。在这种情况下，在应用的Info.plist文件中指定任何加载都是被允许的，但是你也指定了一个或多个例外来表明哪些是必须要求 App Transport Security的。</td>
    </tr>
  </tbody>
</table>

<p>下面分别做一下介绍：</p>

<h4 id="https-only-httpsats">1.HTTPS Only （只有HTTPS，所有情况下都使用ATS）</h4>
<p>如果你的应用只基于支持HTTPS的服务器，那么你太幸运了。你的应用不需要做任何改变。</p>

<p>唯一需要做的事情就是使用  <code>NSURLSession</code> 。如果你的开发目标是iOS 9或者 OS X EI Capitan之后，ATS 的最佳实践将会应用到所有基于 <code>NSURLSession</code> 的网络。</p>

<p>但也有人遇到过这样的疑惑：服务器已支持TLS 1.2 SSL ，但iOS9上还是不行，还要进行本文提出的适配操作。</p>

<p>那是因为：要注意 App Transport Security 要求 TLS 1.2，而且它要求站点使用支持forward secrecy协议的密码。证书也要求是符合ATS规格的，ATS只信任知名CA颁发的证书，小公司所使用的 self signed certificate，还是会被ATS拦截。。因此慎重检查与你的应用交互的服务器是不是符合ATS的要求非常重要。对此，建议使用下文中给出的NSExceptionDomains，并将你们公司的域名挂在下面。</p>

<p>官方文档 <a href="https://developer.apple.com/library/prerelease/ios/technotes/App-Transport-Security-Technote/index.html#//apple_ref/doc/uid/TP40016240"> <strong><em>App Transport Security Technote</em></strong> </a> 对CA颁发的证书要求：</p>

<blockquote>
  <p>Certificates must be signed using a SHA256 or better signature hash algorithm, with either a 2048 bit or greater RSA key or a 256 bit or greater Elliptic-Curve (ECC) key.
Invalid certificates result in a hard failure and no connection</p>
</blockquote>

<h4 id="mix--match">2.Mix &amp; Match（混合）</h4>
<p>你的应用与一个不符合ATS要求的服务器工作是很有可能的，</p>

<p>当你遇到以下三个不符合 ATS 要求的服务器的域名时：</p>

<ol>
  <li>api.insecuredomain.com</li>
  <li>cdn.domain.com</li>
  <li>thatotherdomain.com</li>
</ol>

<p>你可以分别设置如下：</p>

<ol>
  <li>api.insecuredomain.com</li>
</ol>

<p>Info.plist 配置中的XML源码如下所示:</p>

<p>```XML
    <key>NSAppTransportSecurity</key>
    <dict>
        <key>NSExceptionDomains</key>
        <dict>
            <key>api.insecuredomain.com</key>
            <dict></dict></dict></dict></p>

<pre><code>            &lt;!--允许App进行不安全的HTTP请求--&gt;
            &lt;key&gt;NSExceptionAllowsInsecureHTTPLoads&lt;/key&gt;
            &lt;true/&gt;
            
            &lt;!--适用于这个特定域名下的所有子域--&gt;
            &lt;key&gt;NSIncludesSubdomains&lt;/key&gt;
            &lt;true/&gt;
        &lt;/dict&gt;
    &lt;/dict&gt;
&lt;/dict&gt;  ```
</code></pre>

<p>在 plist 文件里显示如下：</p>

<p><img src="http://i59.tinypic.com/fxtk0j.jpg" alt="enter image description here" /></p>

<p>我们定义的第一个“例外”（Exception）告诉ATS当与这个子域交互的时候撤销了必须使用HTTPS的要求。注意这个仅仅针对在“例外”（Exception）中声明了的子域。非常重要的一点是要理解NSExceptionAllowsInsecureHTTPLoads关键字并不仅仅只是与使用HTTPS相关。这个“例外”（Exception）指明了对于那个域名，所有的App Transport Security的要求都被撤销了。</p>

<ol>
  <li>cdn.domain.com
 Info.plist 配置中的XML源码如下所示:</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"> ```XML
</span><span class="line">	<span class="nt">&lt;key&gt;</span>NSAppTransportSecurity<span class="nt">&lt;/key&gt;</span>
</span><span class="line">	<span class="nt">&lt;dict&gt;</span>
</span><span class="line">		<span class="nt">&lt;key&gt;</span>NSExceptionDomains<span class="nt">&lt;/key&gt;</span>
</span><span class="line">		<span class="nt">&lt;dict&gt;</span>
</span><span class="line">			<span class="nt">&lt;key&gt;</span>cdn.somedomain.com<span class="nt">&lt;/key&gt;</span>
</span><span class="line">			<span class="nt">&lt;dict&gt;</span>
</span><span class="line">				<span class="nt">&lt;key&gt;</span>NSThirdPartyExceptionMinimumTLSVersion<span class="nt">&lt;/key&gt;</span>
</span><span class="line">				<span class="nt">&lt;string&gt;</span>TLSv1.1<span class="nt">&lt;/string&gt;</span>
</span><span class="line">			<span class="nt">&lt;/dict&gt;</span>
</span><span class="line">		<span class="nt">&lt;/dict&gt;</span>
</span><span class="line">	<span class="nt">&lt;/dict&gt;</span>
</span><span class="line"> ```
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在 plist 文件里显示如下：</p>

<p><img src="http://i58.tinypic.com/29atm5k.jpg" alt="enter image description here" /></p>

<p>很可能你的应用是与一个支持HTTPS传输数据的服务器交互，但是并没有使用TLS 1.2或更高。在这种情况下，你定义一个“例外”（Exception），它指明应该使用的最小的TLS的版本。这比完全撤销那个域名的App Transport Security要更好更安全。</p>

<ol>
  <li>thatotherdomain.com</li>
</ol>

<p>Info.plist 配置中的XML源码如下所示:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"> ```XML
</span><span class="line">       <span class="nt">&lt;key&gt;</span>NSAppTransportSecurity<span class="nt">&lt;/key&gt;</span>
</span><span class="line">        <span class="nt">&lt;dict&gt;</span>
</span><span class="line">            <span class="nt">&lt;key&gt;</span>NSExceptionDomains<span class="nt">&lt;/key&gt;</span>
</span><span class="line">            <span class="nt">&lt;dict&gt;</span>
</span><span class="line">                <span class="nt">&lt;key&gt;</span>thatotherdomain.com<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                <span class="nt">&lt;dict&gt;</span>
</span><span class="line">                    <span class="c">&lt;!--适用于这个特定域名下的所有子域--&gt;</span>
</span><span class="line">                    <span class="nt">&lt;key&gt;</span>NSIncludesSubdomains<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                    <span class="nt">&lt;true/&gt;</span>
</span><span class="line">                    <span class="c">&lt;!--扩展可接受的密码列表：这个域名可以使用不支持 forward secrecy 协议的密码--&gt;</span>
</span><span class="line">                    <span class="nt">&lt;key&gt;</span>NSExceptionRequiresForwardSecrecy<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                    <span class="nt">&lt;false/&gt;</span>
</span><span class="line">                    <span class="c">&lt;!--允许App进行不安全的HTTP请求--&gt;</span>
</span><span class="line">                    <span class="nt">&lt;key&gt;</span>NSExceptionAllowsInsecureHTTPLoads<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                    <span class="nt">&lt;true/&gt;</span>
</span><span class="line">                    <span class="c">&lt;!--在这里声明所支持的 TLS 最低版本--&gt;</span>
</span><span class="line">                    <span class="nt">&lt;key&gt;</span>NSExceptionMinimumTLSVersion<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                    <span class="nt">&lt;string&gt;</span>TLSv1.1<span class="nt">&lt;/string&gt;</span>
</span><span class="line">                <span class="nt">&lt;/dict&gt;</span>
</span><span class="line">            <span class="nt">&lt;/dict&gt;</span>
</span><span class="line">        <span class="nt">&lt;/dict&gt;</span>
</span><span class="line"> ```
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在 plist 文件里显示如下：</p>

<p><img src="http://i61.tinypic.com/w6xn43.jpg" alt="enter image description here" /></p>

<p><code>NSIncludesSubdomains</code> 关键字告诉 App Transport Security 这个“例外”（Exception）适用于这个特定域名的所有子域。这个“例外”（Exception）还进一步通过扩展可接受的密码列表来定义这个域名可以使用不支持forward secrecy( <code>NSExceptionRequiresForwardSecrecy</code> )  协议的密码。想了解更多关于forward secrecy的信息，推荐去看官方文档  <a href="https://developer.apple.com/library/prerelease/mac/technotes/App-Transport-Security-Technote/index.html"> <strong><em>Apple’s technote</em></strong> </a> 。</p>

<p>如果你的App中同时用到了这三个域名，那么应该是这样：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"> ```XML
</span><span class="line">     <span class="nt">&lt;key&gt;</span>NSAppTransportSecurity<span class="nt">&lt;/key&gt;</span>
</span><span class="line">        <span class="nt">&lt;dict&gt;</span>
</span><span class="line">            <span class="nt">&lt;key&gt;</span>NSExceptionDomains<span class="nt">&lt;/key&gt;</span>
</span><span class="line">            <span class="nt">&lt;dict&gt;</span>
</span><span class="line">                <span class="nt">&lt;key&gt;</span>api.insecuredomain.com<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                <span class="nt">&lt;dict&gt;</span>
</span><span class="line">                    <span class="nt">&lt;key&gt;</span>NSExceptionAllowsInsecureHTTPLoads<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                    <span class="nt">&lt;false/&gt;</span>
</span><span class="line">                <span class="nt">&lt;/dict&gt;</span>
</span><span class="line">                <span class="nt">&lt;key&gt;</span>cdn.somedomain.com<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                <span class="nt">&lt;dict&gt;</span>
</span><span class="line">                    <span class="nt">&lt;key&gt;</span>NSThirdPartyExceptionMinimumTLSVersion<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                    <span class="nt">&lt;string&gt;</span>TLSv1.1<span class="nt">&lt;/string&gt;</span>
</span><span class="line">                <span class="nt">&lt;/dict&gt;</span>
</span><span class="line">                <span class="nt">&lt;key&gt;</span>thatotherdomain.com<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                <span class="nt">&lt;dict&gt;</span>
</span><span class="line">                    <span class="nt">&lt;key&gt;</span>NSIncludesSubdomains<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                    <span class="nt">&lt;true/&gt;</span>
</span><span class="line">                    <span class="nt">&lt;key&gt;</span>NSExceptionRequiresForwardSecrecy<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                    <span class="nt">&lt;false/&gt;</span>
</span><span class="line">                <span class="nt">&lt;/dict&gt;</span>
</span><span class="line">            <span class="nt">&lt;/dict&gt;</span>
</span><span class="line">        <span class="nt">&lt;/dict&gt;</span>
</span><span class="line"> ```
</span><span class="line">
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img src="http://i61.tinypic.com/13ynggk.jpg" alt="enter image description here" /></p>

<h4 id="opt-outats">3. Opt Out（禁用ATS）</h4>
<p>上面是比较严谨的做法，指定了能访问哪些特定的HTTP。当然也有暴力的做法：
彻底倒退回不安全的HTTP网络请求，能任意进行HTTP请求，比如你在开发一款浏览器App，或者你想偷懒，或者后台想偷懒，或者公司不给你升级服务器。。。</p>

<p>你可以在Info.plist 配置中改用下面的XML源码：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"> ```XML
</span><span class="line">    <span class="nt">&lt;key&gt;</span>NSAppTransportSecurity<span class="nt">&lt;/key&gt;</span>
</span><span class="line">    <span class="nt">&lt;dict&gt;</span>
</span><span class="line">        <span class="c">&lt;!--彻底倒退回不安全的HTTP网络请求，能任意进行HTTP请求 (不建议这样做)--&gt;</span>
</span><span class="line">	    <span class="nt">&lt;key&gt;</span>NSAllowsArbitraryLoads<span class="nt">&lt;/key&gt;</span>
</span><span class="line">	    <span class="nt">&lt;true/&gt;</span>
</span><span class="line">    <span class="nt">&lt;/dict&gt;</span>
</span><span class="line"> ```
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在 plist 文件里显示如下：</p>

<p><img src="http://i57.tinypic.com/9uq2c7.jpg" alt="enter image description here" /></p>

<h4 id="opt-out-with-exceptionsats">4. Opt Out With Exceptions（除特殊情况外，都不使用ATS）</h4>

<p>上面已经介绍了三种情景，还有一种可能你也会遇到：</p>

<p>当你的应用撤消了App Transport Security,，但同时定义了一些“例外”（Exception）。当你的应用从很多的服务器上取数据，但是也要与一个你可控的API交互。在这种情况下，在应用的Info.plist文件中指定任何加载都是被允许的，但是你也指定了一个或多个“例外”（Exception）来表明哪些是必须要求 App Transport Security的。下面是Info.plist文件应该会有的内容：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"> ```XML
</span><span class="line"><span class="nt">&lt;key&gt;</span>NSAppTransportSecurity<span class="nt">&lt;/key&gt;</span>
</span><span class="line">        <span class="nt">&lt;dict&gt;</span>
</span><span class="line">            <span class="nt">&lt;key&gt;</span>NSAllowsArbitraryLoads<span class="nt">&lt;/key&gt;</span>
</span><span class="line">            <span class="nt">&lt;true/&gt;</span>
</span><span class="line">            <span class="nt">&lt;key&gt;</span>NSExceptionDomains<span class="nt">&lt;/key&gt;</span>
</span><span class="line">            <span class="nt">&lt;dict&gt;</span>
</span><span class="line">                <span class="nt">&lt;key&gt;</span>api.tutsplus.com<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                <span class="nt">&lt;dict&gt;</span>
</span><span class="line">                    <span class="nt">&lt;key&gt;</span>NSExceptionAllowsInsecureHTTPLoads<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                    <span class="nt">&lt;false/&gt;</span>
</span><span class="line">                <span class="nt">&lt;/dict&gt;</span>
</span><span class="line">            <span class="nt">&lt;/dict&gt;</span>
</span><span class="line">        <span class="nt">&lt;/dict&gt;</span>
</span><span class="line"> ```
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在 plist 文件里显示如下：</p>

<p><img src="http://i62.tinypic.com/de1rw9.jpg" alt="enter image description here" /></p>

<p><del>【注：以上在Info.plist配置中的做法已经验证可行，但目前Apple的prerelease版本的官方文档并未提及Info.plist中配置的代码，我将密切关注官方文档，如有提及，再来更新[本文](https://github.com/ChenYilong/iOS9AdaptationTips) .你若发现官方文档有提及了，也可在[微博@iOS程序犭袁](http://weibo.com/luohanchenyilong/)通知下我。】（官方文档已经有阐述）</del></p>

<h4 id="certificate-transparency">Certificate Transparency</h4>

<p>虽然ATS大多数安全特性都是默认可用的，Certificate Transparency 是必须设置的。如果你有支持Certificate Transparency的证书，你可以检查NSRequiresCertificateTransparency关键字来使用Certificate Transparency。再次强调，如果你的证书不支持Certificate Transparency，此项需要设置为不可用。</p>

<p>如果需要调试一些由于采用了ATS而产生的问题，需要设置CFNETWORK_DIAGNOSTICS为1，这样就会打印出包含被访问的URL和ATS错误在内的NSURLSession错误信息。要确保处理了遇到的所有的错误消息，这样才能使ATS易于提高可靠性和扩展性。</p>

<h4 id="q-a">Q-A</h4>

<p>Q：我用xcode7编译的app，如果不在plist里面加关键字说明，ios9下不能进行网络请求，因为我们服务器并不支持 TLS 1.2 ，我要是直接下载app store上的，什么也没有做，也是能正常网络请求。</p>

<p>A：本文中所罗列的新特性，多数情况下指的是 iOS9.X-SDK 新特性，AppStore 的版本是基于 iOS8.X-SDK或 iOS7.X-SDK，所以并不受 iOS9新特性约束。也就是说：<strong>Xcode7给iOS8打设备包可以请求到网络，Xcode7给iOS9设备打的包请求不到网络，Xcode7和iOS9缺一不可，才需要网络适配ATS。</strong></p>

<p>那么，如何确认自己项目所使用的 SDK？在Targets-&gt;Build Setting–&gt;Architectures</p>

<p><img src="http://i58.tinypic.com/amsa9u.jpg" alt="enter image description here" /></p>

<p>Q：服务器已支持TLS 1.2 SSL ，但iOS9上还是不行，还要进行本文提出的适配操作。</p>

<p>A：那是因为：要注意 App Transport Security 要求 TLS 1.2，而且它要求站点使用支持forward secrecy协议的密码。证书也要求是符合ATS规格的，ATS只信任知名CA颁发的证书，小公司所使用的 self signed certificate，还是会被ATS拦截。。因此慎重检查与你的应用交互的服务器是不是符合ATS的要求非常重要。对此，建议使用下文中给出的NSExceptionDomains，并将你们公司的域名挂在下面。</p>

<p>官方文档 <a href="https://developer.apple.com/library/prerelease/ios/technotes/App-Transport-Security-Technote/index.html#//apple_ref/doc/uid/TP40016240"> <strong><em>App Transport Security Technote</em></strong> </a> 对CA颁发的证书要求：</p>

<blockquote>
  <p>Certificates must be signed using a SHA256 or better signature hash algorithm, with either a 2048 bit or greater RSA key or a 256 bit or greater Elliptic-Curve (ECC) key.
Invalid certificates result in a hard failure and no connection</p>
</blockquote>

<p>Q：我使用的是第三方的网络框架，比如 AFNetworking 、ASIHTTPRequest、CFSocket 等，这个有影响没有？</p>

<p>A： AFNetworking 有影响，其它没影响。</p>

<p>ATS 是只针对 <code>NSURLConnection</code> 、 <code>CFURL</code> 、 <code>NSURLSession</code> ，如果底层涉及到这三个类就会有影响。</p>

<p>现在的 AFNetworking 的 AFHTTPRequestOperationManager 实现是使用的 <code>NSURLConnection</code> 。</p>

<p>但 AFNetworking 也有更新计划，移除 <code>NSURLConnection</code> 相关API，迁移到 AFHTTPSessionManager ，但还未执行，详情见：<a href="https://github.com/AFNetworking/AFNetworking/issues/2806">https://github.com/AFNetworking/AFNetworking/issues/2806</a>。</p>

<p>Q：试了一下禁用 ATS 的方法 但是还是无法联网 仍然提示要使用https?</p>

<blockquote>
  <p>App Transport Security has blocked a cleartext HTTP (http://) resource load since it is insecure. Temporary exceptions can be configured via your app's Info.plist file.</p>
</blockquote>
<p>&lt;/p&gt;The resource could not be loaded because the App Transport Security policy requires the use of a secure connection.</p>

<p>A：遇到这类问题，90%是出现在“一个 Project 多 Target ”的情况下，所以
请确保你修改的，确实是你的 Target 所属的 Info.plist ！</p>

<p>如何确认？请前往这里，确认你 Target 所属的 Info.plist 究竟是哪个：</p>

<p>Project -&gt; Your Target -&gt; Build Settings -&gt; Info.plist File</p>

<p><img src="http://i60.tinypic.com/sbrfrl.jpg" alt="enter image description here" /></p>

<p>或者更直截了当一点，直接修改：</p>

<p>Project -&gt; Your Target —&gt;info－&gt; Custom iOS target properties－&gt; 添加禁用 ATS 的属性</p>

<p><img src="http://i60.tinypic.com/zvbt7b.jpg" alt="enter image description here" /></p>

<p>还有一种可能性是：禁用 ATS 的代码粘贴进 plist 时，位置不对，可以尝试放在 diwuhang</p>

<p>Q：我的项目是“一个 Project 多 Target ”，按照本文禁用 ATS 的方法，是不是每个 Info.plist 都要修改？</p>

<p>A：不需要，用到哪个 Target 修改哪个的 Info.plist ，Target 是独立的，不受其他 Target 的影响，也不会影响其他 Target。</p>

<p>Q：如何检测我们公司 HTTPS 是否符合 ATS 的要求？</p>

<p>A：
如果你的 App 的服务也在升级以适配ATS要求，可以使用如下的方式进行校验：</p>

<p>在OS X EI Capitan系统的终端中通过nscurl命令来诊断检查你的HTTPS服务配置是否满足Apple的ATS要求:</p>

<p><code>Objective-C
 $ nscurl --verbose --ats-diagnostics https://&lt;your_server_domain&gt;
</code></p>

<p>当然，你也可以让公司服务端的同事参考Apple提供官方指南App Transport Security Technote进行服务的升级配置以满足ATS的要求：</p>

<p>一个符合 ATS 要求的 HTTPS，应该满足如下条件：</p>

<ol>
  <li>Transport Layer Security协议版本要求TLS1.2以上</li>
  <li>服务的Ciphers配置要求支持Forward Secrecy等</li>
  <li>证书签名算法符合ATS要求等</li>
</ol>

<h2 id="demo2ios9">2.Demo2_iOS9新特性_更灵活的后台定位</h2>

<p>【iOS9在定位的问题上，有一个坏消息一个好消息】坏消息：如果不适配iOS9，就不能偷偷在后台定位（不带蓝条，见图）！好消息：将允许出现这种场景：同一App中的多个location manager：一些只能在前台定位，另一些可在后台定位，并可随时开启或者关闭特定location manager的后台定位。</p>

<p>如果没有请求后台定位的权限，也是可以在后台定位的，不过会带蓝条：
 ![enter image description here][9]
  [9]: https://i.imgur.com/UoqGHlG.png</p>

<p>如何偷偷在后台定位：请求后台定位权限：</p>

<pre><code> // 1. 实例化定位管理器
_locationManager = [[CLLocationManager alloc] init];
// 2. 设置代理
_locationManager.delegate = self;
// 3. 定位精度
[_locationManager setDesiredAccuracy:kCLLocationAccuracyBest];
// 4.请求用户权限：分为：⓵只在前台开启定位⓶在后台也可定位，
//注意：建议只请求⓵和⓶中的一个，如果两个权限都需要，只请求⓶即可，
//⓵⓶这样的顺序，将导致bug：第一次启动程序后，系统将只请求⓵的权限，⓶的权限系统不会请求，只会在下一次启动应用时请求⓶
if ([[[UIDevice currentDevice] systemVersion] floatValue] &gt;= 8) {
    //[_locationManager requestWhenInUseAuthorization];//⓵只在前台开启定位
    [_locationManager requestAlwaysAuthorization];//⓶在后台也可定位
}
// 5.iOS9新特性：将允许出现这种场景：同一app中多个location manager：一些只能在前台定位，另一些可在后台定位（并可随时禁止其后台定位）。
if ([[[UIDevice currentDevice] systemVersion] floatValue] &gt;= 9) {
    _locationManager.allowsBackgroundLocationUpdates = YES;
}
// 6. 更新用户位置
[_locationManager startUpdatingLocation];
</code></pre>

<p>但是如果照着这种方式尝试，而没有配置Info.plist，100%你的程序会崩溃掉，并报错：</p>

<blockquote>
  <p>*** Assertion failure in -[CLLocationManager setAllowsBackgroundLocationUpdates:], /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocationFramework_Sim/CoreLocation-1808.1.5/Framework/CoreLocation/CLLocationManager.m:593</p>
</blockquote>

<p>这个问题，有两种方式可以解决：</p>

<p>第一种：</p>

<p>要将  Info.plist 配置如下：
 <img src="https://i.imgur.com/MAoKbUe.png" alt="enter image description here" /></p>

<p>对应的 Info.plist 的XML源码是：</p>

<pre><code>&lt;key&gt;NSLocationAlwaysUsageDescription&lt;/key&gt;
&lt;string&gt;微博@iOS程序犭袁 请求后台定位权限&lt;/string&gt;

&lt;key&gt;UIBackgroundModes&lt;/key&gt;
&lt;array&gt;
    &lt;string&gt;location&lt;/string&gt;
&lt;/array&gt;
</code></pre>

<p>第二种：</p>

<p>在对应 target 的 Capabilities -&gt; Background Modes -&gt; 开启 Location Updates</p>

<p><img src="http://cdn2.raywenderlich.com/wp-content/uploads/2014/12/background_modes.png" alt="enter image description here" /></p>

<h2 id="section-1">3.企业级分发</h2>

<p>有两处变化：</p>

<ol>
  <li>iOS9以后，企业级分发ipa包将遭到与Mac上dmg安装包一样的待遇：默认不能安装，也不再出现“信任按钮”</li>
  <li>iOS9以后，企业分发时可能存在：下载的ipa包与网页两者的 bundle ID 无法匹配而导致下载失败的情况</li>
</ol>

<h3 id="ios9ipamacdmg">1. iOS9以后，企业级分发ipa包将遭到与Mac上dmg安装包一样的待遇：默认不能安装，也不再出现“信任按钮”</h3>

<p>iOS9之前，企业级分发十分方便：点击App出现“信任按钮”，</p>

<p><img src="https://i.imgur.com/aSmM8bk.png" alt="enter image description here" /></p>

<p>iOS9以后，企业级分发ipa包将遭到与Mac上dmg安装包一样的待遇：默认不能安装，也不再出现“信任按钮”</p>

<p><img src="http://i58.tinypic.com/2zecm83.jpg" alt="enter image description here" /></p>

<p>必须让用户进行gif图中的设置：</p>

<p><img src="https://i.imgur.com/PXM235L.gif" alt="enter image description here" /></p>

<h3 id="ios9ipa-bundle-id-">2. iOS9以后，企业分发时可能存在：下载的ipa包与网页两者的 bundle ID 无法匹配而导致下载失败的情况</h3>

<p>iOS9升级后众多企业分发的 app 已经出现了不能安装的情况，而iOS8或更早的系统不受影响。那是因为从iOS9以后，系统会在 ipa 包下载完之后，拿ipa包中的 bundle ID 与网页中的 plist 文件中的 bundle ID 进行比对，不一致不允许安装。</p>

<p>错误提示如下：</p>

<p><img src="http://i57.tinypic.com/28jckus.jpg" alt="enter image description here" /></p>

<p>网页中的 plist 文件中的 bundle ID 的作用可参考 <a href="http://blog.sina.com.cn/s/blog_6afb7d800101fa16.html">《iOS:苹果企业证书通过网页分发安装app》</a> 。</p>

<p>正如这篇文章提到的，“网页中的 plist 文件”是习惯的叫法，也有人称作“manifest文件”，比如 <a href="http://gknops.github.io/adHocGenerate/">这篇文章</a>。</p>

<p>而iOS9之前，苹果不会检查这一项，因此iOS9之前可以安装。</p>

<p>导致这一错误的原因除了粗心，还有开发者是故意设置不一致，据开发者说：</p>

<blockquote>
  <p>当初服务器 plist 的 bundle id 上故意做成成不一致。是为了解决一些人安装不上的问题。</p>
</blockquote>

<p>详情可参考： <a href="http://www.cocoachina.com/bbs/read.php?tid-324230-fpage-2-page-1.html">《升级到ios 9，企业版发布现在无法安装成功了，有人遇到了这种问题吗？》</a></p>

<p>如何知道是因为 bundle id 不一致造成的无法安装？</p>

<p>通过查看设备上的日志信息：有一个 itunesstored 进程提示安装信息：</p>

<pre><code>  itunesstored →  &lt;Warning&gt;: [Download]: Download task did finish: 8 for download: 2325728577585828282
  itunesstored →  &lt;Warning&gt;: [ApplicationWorkspace] Installing download: 2325728577585828282 with step(s): Install
  itunesstored →  &lt;Warning&gt;: [ApplicationWorkspace]: Installing software package with bundleID: com.***.***: bundleVersion: 1.01 path: /var/mobile/Media/Downloads/2325728577585828282/-1925357977307433048
  itunesstored →  &lt;Warning&gt;: BundleValidator: Failed bundleIdentifier: com.***.**** does not match expected bundleIdentifier: com.***.*********
  itunesstored →  &lt;Warning&gt;: [ApplicationWorkspace]: Bundle validated for bundleIdentifier: com.****.******success: 0
  itunesstored →  &lt;Warning&gt;: LaunchServices: Uninstalling placeholder for app &lt;LSApplicationProxy: 0x12677be70&gt; com.****.*******(Placeholder) &lt;file:///private/var/mobile/Containers/Bundle/Application/B62D8EA3-2052-4393-8A7E-3FD27228BFC2/2325728577585828282.app&gt;
  itunesstored →  &lt;Warning&gt;: LaunchServices: Uninstalling app &lt;LSApplicationProxy: 0x12677be70&gt; com.****.*****(Placeholder) &lt;file:///private/var/mobile/Containers/Bundle/Application/B62D8EA3-2052-4393-8A7E-3FD27228BFC2/2325728577585828282.app&gt;
</code></pre>

<p>其中的这一句很重要：</p>

<pre><code> itunesstored →  &lt;Warning&gt;: BundleValidator: Failed bundleIdentifier: com.***.**** does not match expected bundleIdentifier: com.***.*********
</code></pre>

<p>经过核对，果然是.ipa文件中真实的Bundle ID和manifest文件中配置的信息不匹配，然后测试发现：</p>

<blockquote>
  <p>iOS 9是校验bundle-identifier值的，而iOS 9以下版本是不校验，一旦iOS 9发现bundle-identifier不匹配，即使下载成功了，也会 Uninstall(日志中提示的)app的。</p>
</blockquote>

<p>适配方法：</p>

<ol>
  <li>两者的 bundle id 修改一致</li>
</ol>

<p>一旦出现iOS9能够安装企业版本APP，iOS9以下版本不能安装，一定先查看安装日志，然后核对每个参数配置。</p>

<p>manifest文件的参考配置。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"> ```XML
</span><span class="line"> <span class="cp">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot;</span>
</span><span class="line"><span class="cp">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span>
</span><span class="line"><span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
</span><span class="line"><span class="nt">&lt;dict&gt;</span>
</span><span class="line">   <span class="c">&lt;!-- array of downloads. --&gt;</span>
</span><span class="line">   <span class="nt">&lt;key&gt;</span>items<span class="nt">&lt;/key&gt;</span>
</span><span class="line">   <span class="nt">&lt;array&gt;</span>
</span><span class="line">       <span class="nt">&lt;dict&gt;</span>
</span><span class="line">           <span class="c">&lt;!-- an array of assets to download --&gt;</span>
</span><span class="line">           <span class="nt">&lt;key&gt;</span>assets<span class="nt">&lt;/key&gt;</span>
</span><span class="line">           <span class="nt">&lt;array&gt;</span>
</span><span class="line">               <span class="c">&lt;!-- software-package: the ipa to install. --&gt;</span>
</span><span class="line">               <span class="nt">&lt;dict&gt;</span>
</span><span class="line">                   <span class="c">&lt;!-- required.  the asset kind. --&gt;</span>
</span><span class="line">                   <span class="nt">&lt;key&gt;</span>kind<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                   <span class="nt">&lt;string&gt;</span>software-package<span class="nt">&lt;/string&gt;</span>
</span><span class="line">                   <span class="c">&lt;!-- optional.  md5 every n bytes.  --&gt;</span>
</span><span class="line">                   <span class="c">&lt;!-- will restart a chunk if md5 fails. --&gt;</span>
</span><span class="line">                   <span class="nt">&lt;key&gt;</span>md5-size<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                   <span class="nt">&lt;integer&gt;</span>10485760<span class="nt">&lt;/integer&gt;</span>
</span><span class="line">                   <span class="c">&lt;!-- optional.  array of md5 hashes --&gt;</span>
</span><span class="line">                   <span class="nt">&lt;key&gt;</span>md5s<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                   <span class="nt">&lt;array&gt;</span>
</span><span class="line">                       <span class="nt">&lt;string&gt;</span>41fa64bb7a7cae5a46bfb45821ac8bba<span class="nt">&lt;/string&gt;</span>
</span><span class="line">                       <span class="nt">&lt;string&gt;</span>51fa64bb7a7cae5a46bfb45821ac8bba<span class="nt">&lt;/string&gt;</span>
</span><span class="line">                   <span class="nt">&lt;/array&gt;</span>
</span><span class="line">                   <span class="c">&lt;!-- required.  the URL of the file to download. --&gt;</span>
</span><span class="line">                   <span class="nt">&lt;key&gt;</span>url<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                   <span class="nt">&lt;string&gt;</span>http://www.example.com/apps/foo.ipa<span class="nt">&lt;/string&gt;</span>
</span><span class="line">               <span class="nt">&lt;/dict&gt;</span>
</span><span class="line">               <span class="c">&lt;!-- display-image: the icon to display during download. --&gt;</span>
</span><span class="line">               <span class="nt">&lt;dict&gt;</span>
</span><span class="line">                   <span class="nt">&lt;key&gt;</span>kind<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                   <span class="nt">&lt;string&gt;</span>display-image<span class="nt">&lt;/string&gt;</span>
</span><span class="line">                   <span class="c">&lt;!-- optional. icon needs shine effect applied. --&gt;</span>
</span><span class="line">                   <span class="nt">&lt;key&gt;</span>needs-shine<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                   <span class="nt">&lt;true/&gt;</span>
</span><span class="line">                   <span class="nt">&lt;key&gt;</span>url<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                   <span class="nt">&lt;string&gt;</span>http://www.example.com/image.57×57.png<span class="nt">&lt;/string&gt;</span>
</span><span class="line">               <span class="nt">&lt;/dict&gt;</span>
</span><span class="line">               <span class="c">&lt;!-- full-size-image: the large 512×512 icon used by iTunes. --&gt;</span>
</span><span class="line">               <span class="nt">&lt;dict&gt;</span>
</span><span class="line">                   <span class="nt">&lt;key&gt;</span>kind<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                   <span class="nt">&lt;string&gt;</span>full-size-image<span class="nt">&lt;/string&gt;</span>
</span><span class="line">                   <span class="c">&lt;!-- optional.  one md5 hash for the entire file. --&gt;</span>
</span><span class="line">                   <span class="nt">&lt;key&gt;</span>md5<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                   <span class="nt">&lt;string&gt;</span>61fa64bb7a7cae5a46bfb45821ac8bba<span class="nt">&lt;/string&gt;</span>
</span><span class="line">                   <span class="nt">&lt;key&gt;</span>needs-shine<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                   <span class="nt">&lt;true/&gt;</span>
</span><span class="line">                   <span class="nt">&lt;key&gt;</span>url<span class="nt">&lt;/key&gt;</span>
</span><span class="line">                   <span class="nt">&lt;string&gt;</span>http://www.example.com/image.512×512.jpg<span class="nt">&lt;/string&gt;</span>
</span><span class="line">               <span class="nt">&lt;/dict&gt;</span>
</span><span class="line">           <span class="nt">&lt;/array&gt;&lt;key&gt;</span>metadata<span class="nt">&lt;/key&gt;</span>
</span><span class="line">           <span class="nt">&lt;dict&gt;</span>
</span><span class="line">               <span class="c">&lt;!-- required --&gt;</span>
</span><span class="line">               <span class="nt">&lt;key&gt;</span>bundle-identifier<span class="nt">&lt;/key&gt;</span>
</span><span class="line">               <span class="nt">&lt;string&gt;</span>com.example.fooapp<span class="nt">&lt;/string&gt;</span>
</span><span class="line">               <span class="c">&lt;!-- optional (software only) --&gt;</span>
</span><span class="line">               <span class="nt">&lt;key&gt;</span>bundle-version<span class="nt">&lt;/key&gt;</span>
</span><span class="line">               <span class="nt">&lt;string&gt;</span>1.0<span class="nt">&lt;/string&gt;</span>
</span><span class="line">               <span class="c">&lt;!-- required.  the download kind. --&gt;</span>
</span><span class="line">               <span class="nt">&lt;key&gt;</span>kind<span class="nt">&lt;/key&gt;</span>
</span><span class="line">               <span class="nt">&lt;string&gt;</span>software<span class="nt">&lt;/string&gt;</span>
</span><span class="line">               <span class="c">&lt;!-- optional. displayed during download; --&gt;</span>
</span><span class="line">               <span class="c">&lt;!-- typically company name --&gt;</span>
</span><span class="line">               <span class="nt">&lt;key&gt;</span>subtitle<span class="nt">&lt;/key&gt;</span>
</span><span class="line">               <span class="nt">&lt;string&gt;</span>Apple<span class="nt">&lt;/string&gt;</span>
</span><span class="line">               <span class="c">&lt;!-- required.  the title to display during the download. --&gt;</span>
</span><span class="line">               <span class="nt">&lt;key&gt;</span>title<span class="nt">&lt;/key&gt;</span>
</span><span class="line">               <span class="nt">&lt;string&gt;</span>Example Corporate App<span class="nt">&lt;/string&gt;</span>
</span><span class="line">           <span class="nt">&lt;/dict&gt;</span>
</span><span class="line">       <span class="nt">&lt;/dict&gt;</span>
</span><span class="line">   <span class="nt">&lt;/array&gt;</span>
</span><span class="line"><span class="nt">&lt;/dict&gt;</span>
</span><span class="line"><span class="nt">&lt;/plist&gt;</span>
</span><span class="line"> ```
</span><span class="line">
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>使用fir.im等第三方分发平台：上述“ bundle id 不一致导致下载失败”这种情况只会出现在企业自己搭建网页分发的情形下，事实证明第三方的分发平台更加专业，已经很好地规避了该情况的发生。</li>
</ol>

<h3 id="q-a-1">Q-A</h3>

<p>Q：企业分发，企业版证书在iOS9上安装应用报 ` Ignore manifest download, already have bundleID: com.mycom.MyApp`  只有我的手机无法安装，别人 iOS9 都可以安装</p>

<p>A：这并非 iOS9的问题，iOS8及以前的系统也会出现，和缓存有关系，请尝试关机重启手机，然后就可以安装了。</p>

<h2 id="bitcode">4.Bitcode</h2>

<p>【前言】未来， Watch 应用必须包含 bitcode ，iOS不强制，Mac OS不支持。
但最坑的一点是： Xcode7 及以上版本会默认开启 bitcode 。</p>

<p>什么是 bitcode ？</p>

<p>通俗解释：在线版安卓ART模式。</p>

<p>Apple 官方文档–<a href="https://developer.apple.com/library/prerelease/ios/documentation/IDEs/Conceptual/AppDistributionGuide/AppThinning/AppThinning.html#//apple_ref/doc/uid/TP40012582-CH35"> <strong><em>App Distribution Guide – App Thinning (iOS, watchOS)</em></strong> </a>是这样定义的：</p>

<blockquote>
  <p>Bitcode is an intermediate representation of a compiled program. Apps you upload to iTunes Connect that contain bitcode will be compiled and linked on the App Store. Including bitcode will allow Apple to re-optimize your app binary in the future without the need to submit a new version of your app to the store.</p>
</blockquote>

<p>翻译过来就是：</p>

<blockquote>
  <p>bitcode 是被编译程序的一种中间形式的代码。包含 bitcode 配置的程序将会在 App Store 上被编译和链接。 bitcode 允许苹果在后期重新优化我们程序的二进制文件，而不需要我们重新提交一个新的版本到 App Store 上。</p>
</blockquote>

<p>在 Xcode简介— <a href="https://developer.apple.com/library/prerelease/ios/documentation/DeveloperTools/Conceptual/WhatsNewXcode/Articles/xcode_7_0.html"> <strong><em>What’s New in Xcode-New Features in Xcode 7</em></strong> </a>中这样描述：</p>

<blockquote>
  <p>Bitcode. When you archive for submission to the App Store, Xcode will compile your app into an intermediate representation. The App Store will then compile the bitcode down into the 64 or 32 bit executables as necessary.</p>
</blockquote>

<p>也就是</p>

<blockquote>
  <p>当我们提交程序到 App Store上时， Xcode 会将程序编译为一个中间表现形式( bitcode )。然后 App store 会再将这个 bitcode 编译为可执行的64位或32位程序。</p>
</blockquote>

<p>再看看这两段描述都是放在App Thinning(App瘦身)一节中，可以看出其与包的优化有关了。</p>

<p>打个比方，没有 bitcode  的 AppStore 里所提供的 App，类似在新华书店里卖捆绑销售的《四大名著丛书–精装版》，要买只能全买走，有了 bitcode 就好比这套四大名著每本都可以单卖，顾客就能按需购买。我们开发者在这个过程中扮演的角色是图书出版商的角色，应该照顾那些没钱一次买四本的顾客。（不要做不珍惜用户流量和存储空间的奸商。。）</p>

<p>那为什么第三方的 SDK 不支持 bitcode，我的 app 也就不能支持？打个比方，《四大名著丛书》只要有一本是可以单卖的，那么你很难再卖捆绑销售款的《四大名著丛书》了，所以干脆全都可以单卖，这大概就是 Apple 的逻辑。</p>

<p>App Thinning 官方文档解释如下：</p>

<blockquote>
  <p>The App Store and operating system optimize the installation of iOS and watchOS apps by tailoring app delivery to the capabilities of the user’s particular device, with minimal footprint. This optimization, called app thinning, lets you create apps that use the most device features, occupy minimum disk space, and accommodate future updates that can be applied by Apple. Faster downloads and more space for other apps and content provides a better user experience.</p>
</blockquote>

<p>开发者都知道，当前 iOS App 的编译打包方式是把适配兼容多个设备的执行文件及资源文件合并一个文件，上传和下载的文件则包含了所有的这些文件，导致占用较多的存储空间。</p>

<p>App Thinning是一个关于节省iOS设备存储空间的功能，它可以让iOS设备在安装、更新及运行App等场景中仅下载所需的资源，减少App的占用空间，从而节省设备的存储空间。</p>

<p>根据Apple官方文档的介绍，App Thinning主要有三个机制：</p>

<ol>
  <li>Slicing</li>
</ol>

<p>开发者把App安装包上传到AppStore后，Apple服务会自动对安装包切割为不同的应用变体(App variant)，当用户下载安装包时，系统会根据设备型号下载安装对应的单个应用变体。</p>

<ol>
  <li>On-Demand Resources</li>
</ol>

<p>ORD(随需资源)是指开发者对资源添加标签上传后，系统会根据App运行的情况，动态下载并加载所需资源，而在存储空间不足时，自动删除这类资源。</p>

<ol>
  <li>Bitcode
 开启Bitcode编译后，可以使得开发者上传App时只需上传Intermediate Representation(中间件)，而非最终的可执行二进制文件。 在用户下载App之前，AppStore会自动编译中间件，产生设备所需的执行文件供用户下载安装。</li>
</ol>

<p>（喵大(@onevcat)在其博客 <a href="http://onevcat.com/2015/06/ios9-sdk/">《开发者所需要知道的 iOS 9 SDK 新特性》</a> 中也描述了iOS 9中苹果在App瘦身中所做的一些改进，大家可以转场到那去研读一下。）</p>

<p>其中，Bitcode的机制可以支持动态的进行App Slicing，而对于Apple未来进行硬件升级的措施，此机制可以保证在开发者不重新发布版本的情况下而兼容新的设备。</p>

<p>Bitcode 是一种中间代码，那它是什么格式的呢？ LLVM 官方文档有介绍这种文件的格式：  <a href="http://llvm.org/docs/BitCodeFormat.html#llvm-bitcode-file-format"> <strong><em>LLVM Bitcode File Format</em></strong> </a> 。</p>

<p>如果你的应用也准备启用 Bitcode 编译机制，就需要注意以下几点：</p>

<ol>
  <li>Xcode 7默认开启 Bitcode ，如果应用开启 Bitcode，那么其集成的其他第三方库也需要是 Bitcode 编译的包才能真正进行 Bitcode 编译</li>
  <li>开启 Bitcode 编译后，编译产生的  <code>.app</code>  体积会变大(中间代码，不是用户下载的包)，且  <code>.dSYM</code>  文件不能用来崩溃日志的符号化(用户下载的包是 Apple 服务重新编译产生的，有产生新的符号文件)</li>
  <li>通过 Archive 方式上传 AppStore 的包，可以在Xcode的Organizer工具中下载对应安装包的新的符号文件</li>
</ol>

<p>如何适配？</p>

<p>在上面的错误提示中，提到了如何处理我们遇到的问题：</p>

<blockquote>
  <p>You must rebuild it with bitcode enabled (Xcode setting ENABLE_BITCODE), obtain an updated library from the vendor, or disable bitcode for this target. for architecture arm64</p>
</blockquote>

<p>正如开头所说的：</p>

<blockquote>
  <p>未来， Watch 应用必须包含 Bitcode ，iOS不强制，Mac OS不支持。
但最坑的一点是： Xcode7 及以上版本会默认开启 Bitcode 。</p>
</blockquote>

<p>Xcode 7 + 会开启 Bitcode。</p>

<p>也就是说，也两种方法适配：</p>

<p>方法一：更新 library 使包含 Bitcode ，否则会出现以下中的警告；</p>

<blockquote>
  <p>(null): URGENT: all bitcode will be dropped because
‘/Users/myname/Library/Mobile
Documents/com~apple~CloudDocs/foldername/appname/GoogleMobileAds.framework/GoogleMobileAds(GADSlot+AdEvents.o)’
was built without bitcode. You must rebuild it with bitcode enabled
(Xcode setting ENABLE_BITCODE), obtain an updated library from the
vendor, or disable bitcode for this target. Note: This will be an
error in the future.</p>
</blockquote>

<p>甚至有的会报错误，无法通过编译：</p>

<blockquote>
  <p>ld: ‘/Users/<strong>/Framework/SDKs/PolymerPay/Library/mobStat/lib</strong>SDK.a(**ForSDK.o)’ does not contain bitcode. You must rebuild it with bitcode enabled (Xcode setting ENABLE_BITCODE), obtain an updated library from the vendor, or disable bitcode for this target. for architecture arm64</p>
</blockquote>

<p>或：</p>

<blockquote>
  <p>ld: -undefined and -bitcode_bundle (Xcode setting  <code>ENABLE_BITCODE</code> =YES) cannot be used together
clang: error: linker command failed with exit code 1 (use -v to see invocation)</p>
</blockquote>

<p><img src="http://i62.tinypic.com/330vhug.jpg" alt="enter image description here" /></p>

<p>无论是警告还是错误，得到的信息是：我们引入的一个第三方库不包含bitcode。</p>

<p>方法二：关闭Bitcode，方法见下图</p>

<blockquote>
  <p><img src="https://i.imgur.com/OoOogUe.gif" alt="enter image description here" /></p>
</blockquote>

<p>我们可以在”Build Settings”-&gt;”Enable Bitcode”选项中看到：</p>

<p>用 Xcode 7+ 新建一个 iOS 程序时， bitcode 选项默认是设置为YES的。现在需要改成NO。</p>

<p>如果我们开启了 bitcode ，在提交包时，下面这个界面也会有个 bitcode 选项：</p>

<p><img src="http://i60.tinypic.com/5b2q7m.jpg" alt="enter image description here" /></p>

<p>那么 SDK 厂商如何支持 bitcode 呢？答案是只要在 Xcode7上重新编译一下就 ok 了。（请确保默认开启的 bitcode 没有去主动关闭）</p>

<p>但是如果仅仅是编译一下，则会出现下类似的如下警告：</p>

<p><img src="http://image17-c.poco.cn/mypoco/myphoto/20150928/17/1733887242015092817143106.jpg?1462x120_120" alt="enter image description here" /></p>

<blockquote>
  <p>ld: warning: full bitcode bundle could not be generated because ‘Lookback(Lookback.o)’ was built only with bitcode marker. The library must be generated from Xcode archive build with bitcode enabled (Xcode setting ENABLE_BITCODE)</p>
</blockquote>

<p>警告的消除步骤：</p>

<p>模拟器、真机分开打包，SDK在build的时候，让模拟器与真机分开build，模拟器不设置bitcode的参数，真机的加上，然后再合起来。（“合起来”指的是指令集，好比 x86_64 i386 跟 armv7 arm64合起来。）用命令行打包的话 加上这个参数OTHER_CFLAGS=“-fembed-bitcode”。</p>

<p>详情可移步：<a href="http://stackoverflow.com/a/31486233/3395008"> <strong><em>How do I xcodebuild a static library with Bitcode enabled?</em></strong> </a></p>

<p>更多信息，请移步</p>

<ol>
  <li><a href="https://developer.apple.com/library/prerelease/watchos/documentation/IDEs/Conceptual/AppDistributionGuide/AppThinning/AppThinning.html#//apple_ref/doc/uid/TP40012582-CH35-SW2">bitcode 苹果官方文档</a></li>
</ol>

<ol>
  <li>WWDC 2015 Session 102: <a href="https://developer.apple.com/videos/wwdc/2015/?id=102">“Platforms State of the Union”</a></li>
</ol>

<p><img src="http://mobileforward.net/wp-content/uploads/2015/06/Screen-Shot-2015-06-12-at-6.57.54-PM-697x351.png" alt="enter image description here" /></p>

<h2 id="demo3---ios9-url-scheme-">5.Demo3—iOS9 URL Scheme 适配_引入白名单概念</h2>

<p><a href="https://developer.apple.com/videos/wwdc/2015/?id=703"> <strong><em>WWDC 2015 Session 703: “Privacy and Your App</em></strong> </a> （ 时间在30：18左右）关于 <code>URL scheme</code> 的介绍，指出：</p>

<p><img src="https://i.imgur.com/2HxWQqq.png" alt="enter image description here" /></p>

<p>也就是说：在iOS9中，如果使用 <code>canOpenURL:</code> 方法，该方法所涉及到的  <code>URL scheme</code> 必须在”Info.plist”中将它们列为白名单，否则不能使用。key叫做LSApplicationQueriesSchemes ，键值内容是</p>

<pre><code>&lt;key&gt;LSApplicationQueriesSchemes&lt;/key&gt;
&lt;array&gt;
 &lt;string&gt;urlscheme&lt;/string&gt;
 &lt;string&gt;urlscheme2&lt;/string&gt;
 &lt;string&gt;urlscheme3&lt;/string&gt;
 &lt;string&gt;urlscheme4&lt;/string&gt;
&lt;/array&gt; 
</code></pre>

<p>白名单上限是50个：</p>

<p><a href="https://developer.apple.com/videos/wwdc/2015/?id=703"> <strong><em>WWDC 2015 Session 703: “Privacy and Your App</em></strong> </a> ）有说明：</p>

<blockquote>

  <p>“So for apps that are linked before iOS 9 and are running on iOS 9, they will be given 50 distinct URL schemes.”  –  WWDC 2015 session 703 Privacy and Your App</p>
</blockquote>

<p><del>
然而，我们却发现了一件意外的事：
当我们在 iOS9-beta（截至本文发布时，iOS9正式版还未发布）中，使用 `openURL:`  方法时，不在白名单中的 URL 会报错 &gt; “This app is not allowed to query for scheme xxx” 。
无论是官方文档还是 WWDC 的视频中都没有提及 `openURL:`  方法的这一变动，所以猜测这是 beta 版本一个 bug ，截至本文发布时，iOS9正式版还未发布，期望在正式版中能得以修复。在此之前，可通过将 `openURL:`  用到的 `URL scheme` 列入白名单来解决这个 bug 。（经测试：iOS9 beta5中已经修复）</del></p>

<p>iOS9中 <code>openURL:</code> 方法没有什么实质性的变化，仅仅多了一个确认动作：</p>

<p><img src="http://i57.tinypic.com/8zjh35.jpg" alt="enter image description here" /></p>

<p>苹果为什么要这么做？</p>

<p>在 iOS9 之前，你可以使用 <code>canOpenURL:</code> 监测用户手机里到底装没装微信，装没装微博。但是也有一些别有用心的 App ，这些 App 有一张常用 App 的 <code>URL scheme</code>，然后他们会多次调用<code>canOpenURL:</code> 遍历该表，来监测用户手机都装了什么 App ，比如这个用户装了叫“大姨妈”的App，你就可以知道这个用户是女性，你就可以只推给这个用户女性用品的广告。这是侵犯用户隐私的行为。</p>

<p>这也许就是原因。</p>

<p>本项目中给出了一个演示用的 Demo ，仓库的文件夹叫“Demo3_iOS9URLScheme适配_引入白名单概念”，Demo引用自<a href="https://github.com/gatzsche/LSApplicationQueriesSchemes-Working-Example"> <strong><em>LSApplicationQueriesSchemes-Working-Example</em></strong> </a></p>

<p>Demo结构如下：</p>

<p><img src="http://i61.tinypic.com/2hyyuqv.jpg" alt="enter image description here" /></p>

<p>主要演示的情景是这样的：</p>

<p>假设有两个App： weixin(微信) and 我的App. 我的App 想监测 weixin(微信) 是否被安装了. “weixin(微信)” 在 info.plist  中定义了 URL scheme :</p>

<pre><code>&lt;key&gt;CFBundleURLTypes&lt;/key&gt;
&lt;array&gt;
    &lt;dict&gt;
        &lt;key&gt;CFBundleURLSchemes&lt;/key&gt;
        &lt;array&gt;
            &lt;string&gt;weixin&lt;/string&gt;
        &lt;/array&gt;
    &lt;/dict&gt;
&lt;/array&gt;
</code></pre>

<p>我的App 想监测 weixin(微信) 是否被安装了 ：</p>

<pre><code>[[UIApplication sharedApplication]
                    canOpenURL:[NSURL URLWithString:@"weixin(微信)://"]];
</code></pre>

<p>即使你安装了微信，在iOS9中，这有可能会返回NO：</p>

<p>因为你需要将 “weixin(微信)” 添加到 “我的App” 的 info.plist 文件中：</p>

<pre><code>&lt;key&gt;LSApplicationQueriesSchemes&lt;/key&gt;
&lt;array&gt;
    &lt;string&gt;weixin&lt;/string&gt;
&lt;/array&gt;
</code></pre>

<p>（以上只是为了演示，实际开发中，你不仅需要添加“weixin”还需要“wechat”这两个。具体下文给出表格）</p>

<p><del>关于 `openURL:` 这个问题，可在 Demo3 中自行测试，如果该 bug 修复了的话，请私信[微博@iOS程序犭袁](http://weibo.com/luohanchenyilong/)，我再来更新本文。（经测试：iOS9 beta5中已经修复）</del></p>

<p>另外，推荐一篇<a href="http://awkwardhare.com/post/121196006730/quick-take-on-ios-9-url-scheme-changes">博文</a>，其中最关键的是以下部分：</p>

<blockquote>
  <p>If you call the “canOpenURL” method on a URL that is not in your whitelist, it will return “NO”, even if there is an app installed that has registered to handle this scheme. A “This app is not allowed to query for scheme xxx” syslog entry will appear.</p>
</blockquote>

<p><del>&gt; If you call the “openURL” method on a URL that is not in your whitelist, it will fail silently. A “This app is not allowed to query for scheme xxx” syslog entry will appear.
</del></p>

<h3 id="url-scheme">常见 URL Scheme</h3>

<p>如果想一次性集成最常用的微信、新浪微博、QQ、支付宝四者的白名单，则配置如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"> ```XML
</span><span class="line"> <span class="nt">&lt;key&gt;</span>LSApplicationQueriesSchemes<span class="nt">&lt;/key&gt;</span>
</span><span class="line"><span class="nt">&lt;array&gt;</span>
</span><span class="line">    <span class="c">&lt;!-- 微信 URL Scheme 白名单--&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>wechat<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>weixin<span class="nt">&lt;/string&gt;</span>
</span><span class="line">
</span><span class="line">    <span class="c">&lt;!-- 新浪微博 URL Scheme 白名单--&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>sinaweibohd<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>sinaweibo<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>sinaweibosso<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>weibosdk<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>weibosdk2.5<span class="nt">&lt;/string&gt;</span>
</span><span class="line">
</span><span class="line">    <span class="c">&lt;!-- QQ、Qzone URL Scheme 白名单--&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqqapi<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqq<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqqOpensdkSSoLogin<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqqconnect<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqqopensdkdataline<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqqopensdkgrouptribeshare<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqqopensdkfriend<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqqopensdkapi<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqqopensdkapiV2<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqqopensdkapiV3<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqzoneopensdk<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>wtloginmqq<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>wtloginmqq2<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqqwpa<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqzone<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqzonev2<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqzoneshare<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>wtloginqzone<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqzonewx<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqzoneopensdkapiV2<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqzoneopensdkapi19<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqzoneopensdkapi<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>mqzoneopensdk<span class="nt">&lt;/string&gt;</span>
</span><span class="line">
</span><span class="line">    <span class="c">&lt;!-- 支付宝  URL Scheme 白名单--&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>alipay<span class="nt">&lt;/string&gt;</span>
</span><span class="line">    <span class="nt">&lt;string&gt;</span>alipayshare<span class="nt">&lt;/string&gt;</span>
</span><span class="line">
</span><span class="line"><span class="nt">&lt;/array&gt;</span>
</span><span class="line"> ```
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>plist 文件看起来会是这样的：</p>

<p><img src="http://i58.tinypic.com/e5pyee.jpg" alt="enter image description here" /></p>

<p>其他平台可在下面的列表中查询：
各平台OpenURL白名单说明</p>

<table>
  <thead>
    <tr>
      <th>平台名称</th>
      <th>URL Schem</th>
      <th>补充说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>微信</td>
      <td>wechat,&lt;/p&gt; weixin</td>
      <td> </td>
    </tr>
    <tr>
      <td>支付宝</td>
      <td>alipay,&lt;/p&gt;alipayshare</td>
      <td> </td>
    </tr>
    <tr>
      <td>QQ</td>
      <td>mqqOpensdkSSoLogin, &lt;/p&gt;mqqopensdkapiV2,&lt;/p&gt;mqqopensdkapiV3,&lt;/p&gt;wtloginmqq2,&lt;/p&gt;mqq,&lt;/p&gt;mqqapi</td>
      <td> </td>
    </tr>
    <tr>
      <td>QZONE</td>
      <td>mqzoneopensdk, &lt;/p&gt;mqzoneopensdkapi,&lt;/p&gt;mqzoneopensdkapi19,&lt;/p&gt;mqzoneopensdkapiV2,&lt;/p&gt;mqqOpensdkSSoLogin,&lt;/p&gt;mqqopensdkapiV2,&lt;/p&gt;mqqopensdkapiV3,&lt;/p&gt;wtloginmqq2,&lt;/p&gt;mqqapi,&lt;/p&gt;mqqwpa，&lt;/p&gt;mqzone，&lt;/p&gt;mqq</td>
      <td>[注:若同时使用QQ和QZONE,则直接添加本格即可]</td>
    </tr>
    <tr>
      <td>新浪微博</td>
      <td>sinaweibo,&lt;/p&gt;sinaweibohd,&lt;/p&gt;sinaweibosso,&lt;/p&gt;sinaweibohdsso,&lt;/p&gt;weibosdk,&lt;/p&gt;weibosdk2.5</td>
      <td>[后两个若导入新浪SDK则需要]</td>
    </tr>
    <tr>
      <td>豆瓣</td>
      <td>无需配置</td>
      <td> </td>
    </tr>
    <tr>
      <td>开心网</td>
      <td>无需配置</td>
      <td> </td>
    </tr>
    <tr>
      <td>易信</td>
      <td>yixin,&lt;/p&gt; yixinopenapi</td>
      <td> </td>
    </tr>
    <tr>
      <td>Google+</td>
      <td>googlechrome, &lt;/p&gt;googlechrome-x-callback,&lt;/p&gt;hasgplus4,&lt;/p&gt;com.google.gppconsent,&lt;/p&gt;com.google.gppconsent.2.2.0,&lt;/p&gt;com.google.gppconsent.2.3.0,&lt;/p&gt;com.google.gppconsent.2.4.0,&lt;/p&gt;com.google.gppconsent.2.4.1</td>
      <td> </td>
    </tr>
    <tr>
      <td>人人网</td>
      <td>renrenapi,&lt;/p&gt;renrenios,&lt;/p&gt;renreniphone,&lt;/p&gt;renren,</td>
      <td> </td>
    </tr>
    <tr>
      <td>Facebook</td>
      <td>fbauth2</td>
      <td> </td>
    </tr>
    <tr>
      <td>Twitter</td>
      <td>无需配置</td>
      <td> </td>
    </tr>
    <tr>
      <td>Pocket</td>
      <td>pocket-oauth-v1</td>
      <td> </td>
    </tr>
    <tr>
      <td>Pinterest</td>
      <td>pinit</td>
      <td> </td>
    </tr>
    <tr>
      <td>Instagram</td>
      <td>instagram</td>
      <td> </td>
    </tr>
    <tr>
      <td>WhatsApp</td>
      <td>whatsapp</td>
      <td> </td>
    </tr>
    <tr>
      <td>Line</td>
      <td>line</td>
      <td> </td>
    </tr>
    <tr>
      <td>KakaoTalk</td>
      <td>kakaolink</td>
      <td> </td>
    </tr>
    <tr>
      <td>KaokaoStory</td>
      <td>storylink</td>
      <td> </td>
    </tr>
    <tr>
      <td>LinkedIn</td>
      <td>无需配置</td>
      <td> </td>
    </tr>
    <tr>
      <td>Tumblr</td>
      <td>无需配置</td>
      <td> </td>
    </tr>
    <tr>
      <td>非平台类</td>
      <td>无需配置</td>
      <td>( 如短信，复制，邮件等)</td>
    </tr>
  </tbody>
</table>

<h3 id="q-a-2">Q-A</h3>

<p>Q：我用xcode7编译的app，如果不在plist里面加scheme，ios9下qq就会不显示，因为我用了qqsdk里的判断是否安装qq的方法，我要是直接下载app store上的，没有加scheme，qq也是能显示。</p>

<p>A：本文中所罗列的新特性，多数情况下指的是 iOS9.X-SDK 新特性，AppStore 的版本是基于 iOS8.X-SDK或 iOS7.X-SDK，所以并不受 iOS9新特性约束。也就是说：<strong>Xcode7给iOS8打设备包不需要白名单也能调用“canOpenURL” ，Xcode7给iOS9设备打的包则不然，Xcode7和iOS9缺一不可，才需要适配URL Scheme。</strong></p>

<p>那么，如何确认自己项目所使用的 SDK？在Targets-&gt;Build Setting–&gt;Architectures</p>

<p><img src="http://i58.tinypic.com/amsa9u.jpg" alt="enter image description here" /></p>

<p>Q：我们自己的应用跳到微信、支付宝、微博等的URLScheme是固定几个，但是从微信、支付宝、微博跳回到我们的应用的URLScheme可能是成千上万个，那他们那些大厂是如何做这个白名单？</p>

<p>A：白名单策略影响的仅仅是 canOpenURL: 接口，OpenURL: 不受影响，这些大厂只调用 openURL: 所以不受 iOS9 的影响。</p>

<p>Q：文中提到了设置白名单的原因，然而，如果这些别有用心的APP在它自己的白名单列出它关心的APP, 然后依次调用canOpenURL来检测，照样可以监控用户都安装了哪些APP啊？所以我依然不明白苹果这样做得原因。</p>

<p>A：白名单的数目上限是50个。苹果这样子做，使得最多只能检测50个App。</p>

<p>Q：按照文中的适配方法，error原因就没有了的确没问题了，但是还是会打印如下信息：</p>

<p><code>Objective-C
 -canOpenURL: failed for URL: "XXXXXXXXXX" - error: "(null)"。
</code></p>

<p>A：这个模拟器的一个 bug，无论使用iOS9的真机还是模拟器均出现该问题，估计 Xcode 后续的升级中会修复掉。</p>

<p>那如何判断日志究竟是 Xcode bug 造成的还是没有适配造成的？看error的值，如果是null，则是 bug。（2015-09-21更）</p>

<h2 id="ipadslide-over--split-view">6. iPad适配Slide Over 和 Split View</h2>

<p><img src="http://cdn1.tnwcdn.com/wp-content/blogs.dir/1/files/2015/06/ew-.gif" alt="enter image description here" /></p>

<p>【iPad适配Slide Over 和 Split View】
若想适配multi tasking特性，唯一的建议：弃纯代码，改用storyboard、xib，纵观苹果WWDC所有Demo均是如此：</p>

<ol>
  <li>
    <p><a href="https://developer.apple.com/videos/wwdc/2015/?id=218">Mysteries of Auto Layout, Part 1</a></p>
  </li>
  <li>
    <p><a href="https://developer.apple.com/videos/wwdc/2015/?id=215">What’s New in Storyboards</a></p>
  </li>
  <li>
    <p><a href="https://developer.apple.com/videos/wwdc/2015/?id=407">Implementing UI Designs in Interface Builder</a></p>
  </li>
  <li>
    <p><a href="https://developer.apple.com/videos/wwdc/2015/?id=205">Getting Started with Multitasking on iPad in iOS 9</a></p>
  </li>
  <li>
    <p><a href="https://developer.apple.com/videos/wwdc/2015/?id=212">Optimizing Your App for Multitasking on iPad in iOS</a></p>
  </li>
</ol>

<h2 id="ui-">7.字体间隙变大导致 UI 显示异常</h2>

<p>iOS8中，字体是Helvetica，中文的字体有点类似于“华文细黑”。只是苹果手机自带渲染，所以看上去可能比普通的华文细黑要美观。iOS9中，中文系统字体变为了专为中国设计的“苹方” 有点类似于一种word字体“幼圆”。字体有轻微的加粗效果，并且最关键的是字体间隙变大了！</p>

<p>所以很多原本写死了width的label可能会出现“…”的情况：</p>

<table>
  <thead>
    <tr>
      <th>情况</th>
      <th>显示</th>
      <th>解释</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>XIB</td>
      <td>将 label 的 width 写死</td>
      <td>下面这两张图也可以直观的看出同一个界面，同一个label的变化。</td>
    </tr>
    <tr>
      <td>iOS8</td>
      <td><img src="http://images2015.cnblogs.com/blog/717809/201509/717809-20150919223903476-176844619.png" alt="enter image description here" /></td>
      <td>正常</td>
    </tr>
    <tr>
      <td>iOS9</td>
      <td><img src="http://images2015.cnblogs.com/blog/717809/201509/717809-20150919223918101-1917717144.png" alt="enter image description here" /></td>
      <td>最后四位数字、、、</td>
    </tr>
  </tbody>
</table>

<p>如果不将 label 的 width 写死，仅仅添加左端约束则右端的四个数字会越界</p>

<table>
  <thead>
    <tr>
      <th>情况</th>
      <th>显示</th>
      <th>解释</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>XIB</td>
      <td><img src="http://i60.tinypic.com/292r428.jpg" alt="enter image description here" /></td>
      <td>如果仅仅添加左端约束</td>
    </tr>
    <tr>
      <td>iOS8</td>
      <td><img src="http://i58.tinypic.com/2vj92bn.jpg" alt="enter image description here" /></td>
      <td>正常</td>
    </tr>
    <tr>
      <td>iOS9</td>
      <td><img src="http://i62.tinypic.com/2czaq1v.jpg" alt="enter image description here" /></td>
      <td>“3199”这四个数字越界了</td>
    </tr>
  </tbody>
</table>

<p>所以为了在界面显示上不出错，就算是固定长度的文字也还是建议使用sizetofit 或者ios向上取整 ceilf() 或者提前计算：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"><span class="bp">CGSize</span> <span class="n">size</span> <span class="o">=</span> <span class="p">[</span><span class="n">title</span> <span class="nl">sizeWithAttributes</span><span class="p">:</span><span class="l">@{</span><span class="nl">NSFontAttributeName</span><span class="p">:</span> <span class="p">[</span><span class="bp">UIFont</span> <span class="nl">systemFontOfSize</span><span class="p">:</span><span class="mf">14.0f</span><span class="p">]</span><span class="l">}</span><span class="p">];</span>
</span><span class="line"><span class="bp">CGSize</span> <span class="n">adjustedSize</span> <span class="o">=</span> <span class="n">CGSizeMake</span><span class="p">(</span><span class="n">ceilf</span><span class="p">(</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">),</span> <span class="n">ceilf</span><span class="p">(</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">));</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="xcode7-">8.升级 Xcode7 后的崩溃与警告</h2>

<h3 id="sdk--ios9--crash">旧版本新浪微博 SDK 在 iOS9 上会导致的 Crash</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"> <span class="n">app</span> <span class="n">was</span> <span class="n">compiled</span> <span class="n">with</span> <span class="n">optimization</span> <span class="o">-</span> <span class="n">stepping</span> <span class="n">may</span> <span class="n">behave</span> <span class="n">oddly</span><span class="p">;</span> <span class="n">variables</span> <span class="n">may</span> <span class="n">not</span> <span class="n">be</span> <span class="n">available</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>打印出来这句话，然后崩溃。多是启动的过程中程序就崩溃。</p>

<p>在iOS9下，新浪微博SDK里面使用的 JSONKit 在部分机型可能导致崩溃。崩溃信息如下图。</p>

<p><img src="http://wiki.mob.com/wp-content/uploads/2015/09/4062130C-1138-4352-89AF-E518F189A851.png" alt="enter image description here" /></p>

<p>解决：更新新浪微博SDK，新浪的SDK最新版做了对iOS9兼容。</p>

<h3 id="ios9--masonry-">iOS9 下使用 Masonry 会引起崩溃的一种情况</h3>

<p>在 iOS8（及以前）我们有这样的经验：</p>

<blockquote>
  <p><code>leading 与 left</code>  、 <code>trailing 与 right</code>  在正常情况下是等价的 但是当一些布局是从右至左时(比如阿拉伯文?没有类似的经验) 则会对调，换句话说就是基本可以不理不用，用left和right就好了</p>
</blockquote>

<p>（摘自 <a href="http://adad184.com/2014/09/28/use-masonry-to-quick-solve-autolayout/">《Masonry介绍与使用实践(快速上手Autolayout)》</a> ）</p>

<p>但在概念里，还是一直将 leading 与 left 划为等号，这样做在 iOS8（及以前）上是正常的，但在 iOS9 上这样的观念可能会引起崩溃，比如：</p>

<p><code>Objective-C
 make.left.equalTo(self.mas_leading).offset(15);
</code></p>

<p>应该为：</p>

<p><code>Objective-C
 make.left.equalTo(self.mas_left).offset(15);
</code></p>

<p>同理 mas_training 也需要改为right</p>

<p>同时也有人反馈说也需要作如下调整否则也会崩溃：</p>

<p>toplayoutGuide 替换成 mas_toplayoutguide
bottomlayoutguide 替换成 mas_bottomlayoutguide</p>

<p>而且使用类似 <code>make.top.equalTo(topView.mas_baseline).with.offset(5);</code> 涉及 <code>mas_baseline</code> 的语句也会引起崩溃。</p>

<p>暂时的解决方案是</p>

<p>使用 <code>make.top.equalTo(self.mas_topLayoutGuide).with.offset(5);</code> 来替换原来的  <code>self.topLayoutGuide.mas_baseline</code>  反正效果是一样的</p>

<p>原来的代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">headerView</span> <span class="nl">mas_makeConstraints</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="n">MASConstraintMaker</span> <span class="o">*</span><span class="n">make</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="bp">UIView</span> <span class="o">*</span><span class="n">topView</span> <span class="o">=</span> <span class="p">(</span><span class="bp">UIView</span> <span class="o">*</span><span class="p">)</span><span class="nb">self</span><span class="p">.</span><span class="n">topLayoutGuide</span><span class="p">;</span>
</span><span class="line">    <span class="n">make</span><span class="p">.</span><span class="n">top</span><span class="p">.</span><span class="n">equalTo</span><span class="p">(</span><span class="n">topView</span><span class="p">.</span><span class="n">mas_baseline</span><span class="p">).</span><span class="n">with</span><span class="p">.</span><span class="n">offset</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span><span class="line">    <span class="n">make</span><span class="p">.</span><span class="n">leading</span><span class="p">.</span><span class="n">equalTo</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">mas_leading</span><span class="p">).</span><span class="n">with</span><span class="p">.</span><span class="n">offset</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class="line">    <span class="n">make</span><span class="p">.</span><span class="n">right</span><span class="p">.</span><span class="n">equalTo</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">mas_right</span><span class="p">).</span><span class="n">with</span><span class="p">.</span><span class="n">offset</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">);</span>
</span><span class="line">    <span class="n">make</span><span class="p">.</span><span class="n">height</span><span class="p">.</span><span class="n">equalTo</span><span class="p">(</span><span class="mi">@34</span><span class="p">);</span>
</span><span class="line"><span class="p">}];</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>修改后：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">headerView</span> <span class="nl">mas_makeConstraints</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="n">MASConstraintMaker</span> <span class="o">*</span><span class="n">make</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="n">make</span><span class="p">.</span><span class="n">top</span><span class="p">.</span><span class="n">equalTo</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">mas_topLayoutGuide</span><span class="p">).</span><span class="n">with</span><span class="p">.</span><span class="n">offset</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span><span class="line">    <span class="n">make</span><span class="p">.</span><span class="n">left</span><span class="p">.</span><span class="n">equalTo</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">mas_left</span><span class="p">).</span><span class="n">with</span><span class="p">.</span><span class="n">offset</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class="line">    <span class="n">make</span><span class="p">.</span><span class="n">right</span><span class="p">.</span><span class="n">equalTo</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">mas_right</span><span class="p">).</span><span class="n">with</span><span class="p">.</span><span class="n">offset</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">);</span>
</span><span class="line">    <span class="n">make</span><span class="p">.</span><span class="n">height</span><span class="p">.</span><span class="n">equalTo</span><span class="p">(</span><span class="mi">@34</span><span class="p">);</span>
</span><span class="line"><span class="p">}];</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="xcode-">Xcode 升级后，旧的状态栏的样式设置方式会引起警告</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"><span class="o">&lt;</span><span class="n">Error</span><span class="o">&gt;:</span> <span class="nl">CGContextSaveGState</span><span class="p">:</span> <span class="n">invalid</span> <span class="n">context</span> <span class="mh">0x0</span><span class="p">.</span> <span class="n">If</span> <span class="n">you</span> <span class="n">want</span> <span class="n">to</span> <span class="n">see</span> <span class="n">the</span> <span class="n">backtrace</span><span class="p">,</span> <span class="n">please</span> <span class="n">set</span> <span class="n">CG_CONTEXT_SHOW_BACKTRACE</span> <span class="n">environmental</span> <span class="n">variable</span><span class="p">.</span>
</span><span class="line"><span class="o">&lt;</span><span class="n">Error</span><span class="o">&gt;:</span> <span class="nl">CGContextTranslateCTM</span><span class="p">:</span> <span class="n">invalid</span> <span class="n">context</span> <span class="mh">0x0</span><span class="p">.</span> <span class="n">If</span> <span class="n">you</span> <span class="n">want</span> <span class="n">to</span> <span class="n">see</span> <span class="n">the</span> <span class="n">backtrace</span><span class="p">,</span> <span class="n">please</span> <span class="n">set</span> <span class="n">CG_CONTEXT_SHOW_BACKTRACE</span> <span class="n">environmental</span> <span class="n">variable</span><span class="p">.</span>
</span><span class="line"><span class="o">&lt;</span><span class="n">Error</span><span class="o">&gt;:</span> <span class="nl">CGContextRestoreGState</span><span class="p">:</span> <span class="n">invalid</span> <span class="n">context</span> <span class="mh">0x0</span><span class="p">.</span> <span class="n">If</span> <span class="n">you</span> <span class="n">want</span> <span class="n">to</span> <span class="n">see</span> <span class="n">the</span> <span class="n">backtrace</span><span class="p">,</span> <span class="n">please</span> <span class="n">set</span> <span class="n">CG_CONTEXT_SHOW_BACKTRACE</span> <span class="n">environmental</span> <span class="n">variable</span><span class="p">.</span>
</span><span class="line"> <span class="err">```</span>
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>出错原因：设置 app 的状态栏样式的时候，使用了旧的方式，在 info.plist 里面的 <code>View controller-based status bar appearance</code> 默认会为 YES，即使不设置也是 YES，但一般 iOS6 的时候为了设置状态栏样式，需要将其设为NO，iOS7，8也兼容，但是到了iOS9 就会报警告。</p>

<p>解决办法：</p>

<p>删除原先的设置代码，通常老的设置方式是这样的：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"> <span class="c1">//设置状态栏的白色</span>
</span><span class="line">    <span class="p">[[</span><span class="bp">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="nl">setStatusBarStyle</span><span class="p">:</span><span class="n">UIStatusBarStyleLightContent</span><span class="p">];</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>删除的原因见下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"> <span class="c1">// Setting the statusBarStyle does nothing if your application is using the default UIViewController-based status bar system.</span>
</span><span class="line"><span class="k">@property</span><span class="p">(</span><span class="k">readwrite</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="n">UIStatusBarStyle</span> <span class="n">statusBarStyle</span> <span class="n">NS_DEPRECATED_IOS</span><span class="p">(</span><span class="mi">2</span><span class="n">_0</span><span class="p">,</span> <span class="mi">9</span><span class="n">_0</span><span class="p">,</span> <span class="s">&quot;Use -[UIViewController preferredStatusBarStyle]&quot;</span><span class="p">);</span>
</span><span class="line"><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setStatusBarStyle:</span><span class="p">(</span><span class="n">UIStatusBarStyle</span><span class="p">)</span><span class="nv">statusBarStyle</span> <span class="nf">animated:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span> <span class="n">NS_DEPRECATED_IOS</span><span class="p">(</span><span class="mi">2</span><span class="n">_0</span><span class="p">,</span> <span class="mi">9</span><span class="n">_0</span><span class="p">,</span> <span class="s">&quot;Use -[UIViewController preferredStatusBarStyle]&quot;</span><span class="p">);</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>修改方式是在 <code>Info.plist</code> 文件中做如下修改：</p>

<p>将 <code>View controller-based status bar appearance</code> 删除（默认为 YES），或设置为YES：</p>

<p>对应的 plist 里的 XML源码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"> ```Objective-C
</span><span class="line"> <span class="nt">&lt;key&gt;</span>UIViewControllerBasedStatusBarAppearance<span class="nt">&lt;/key&gt;</span>
</span><span class="line">	<span class="nt">&lt;true/&gt;</span>
</span><span class="line"> ```
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>看起来长这样：</p>

<p><img src="http://i61.tinypic.com/jrsjnd.jpg" alt="enter image description here" /></p>

<p>然后使用新的方式来实现状态栏的样式：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"><span class="o">-</span> <span class="p">(</span><span class="n">UIStatusBarStyle</span><span class="p">)</span><span class="n">preferredStatusBarStyle</span><span class="p">;</span>
</span><span class="line"><span class="p">-</span> <span class="p">(</span><span class="bp">UIViewController</span> <span class="o">*</span><span class="p">)</span><span class="nf">childViewControllerForStatusBarStyle</span><span class="p">;</span>
</span><span class="line"><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setNeedsStatusBarAppearanceUpdate</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>比如，你想将状态栏设置为白色，就可以这样写：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"><span class="c1">//设置状态栏的白色</span>
</span><span class="line"> <span class="o">-</span><span class="p">(</span><span class="n">UIStatusBarStyle</span><span class="p">)</span><span class="n">preferredStatusBarStyle</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="n">UIStatusBarStyleLightContent</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>记得要 clean 下或者删除应用程序重新运行</p>

<h4 id="demo4---navigationcontroller">Demo4—navigationController状态栏样式新的设置方法</h4>

<p>如果你按照上面的方法设置了，但还是不行。八成是 rootViewController 设置的问题，你必须设置 rootViewController，编译器才会去 rootViewController 中重载 preferredStatusBarStyle 方法。</p>

<p>另外当你在 appdelegate 中将 navigationController 设为 rootViewController 的时候：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line">     <span class="nb">self</span><span class="p">.</span><span class="n">window</span><span class="p">.</span><span class="n">rootViewController</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">navigationController</span><span class="p">;</span>
</span><span class="line"> <span class="err">```</span>
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>因为 rootViewController 变为了 navigationController，你在 ViewController 里重写 preferredStatusBarStyle 方法是不会起作用的。所以最好的方法是</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"> <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">viewDidLoad</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="p">[</span><span class="nb">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class="line">    <span class="nb">self</span><span class="p">.</span><span class="n">title</span> <span class="o">=</span> <span class="s">@&quot;微博@iOS程序犭袁&quot;</span><span class="p">;</span>
</span><span class="line">    <span class="nb">self</span><span class="p">.</span><span class="n">navigationController</span><span class="p">.</span><span class="n">navigationBar</span><span class="p">.</span><span class="n">barStyle</span> <span class="o">=</span> <span class="n">UIBarStyleBlack</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果你还是想重写 preferredStatusBarStyle 方法来达到作用，那最好使用分类来解决：</p>

<p>.h文件：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"> <span class="c1">//</span>
</span><span class="line"><span class="c1">//  UINavigationController+StatusBarStyle.h</span>
</span><span class="line"><span class="c1">//  微博@iOS程序犭袁</span>
</span><span class="line"><span class="c1">//</span>
</span><span class="line"><span class="c1">//  Created by  https://github.com/ChenYilong/iOS9AdaptationTips/ on 15/6/8.</span>
</span><span class="line"><span class="c1">//  Copyright (c) 2015年   http://weibo.com/luohanchenyilong/  . All rights reserved.</span>
</span><span class="line"><span class="c1">//</span>
</span><span class="line">
</span><span class="line"><span class="cp">#import &lt;UIKit/UIKit.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="k">@interface</span> <span class="bp">UINavigationController</span> <span class="nl">(StatusBarStyle)</span>
</span><span class="line">
</span><span class="line"><span class="k">@end</span>
</span><span class="line">
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>.m文件：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"> <span class="c1">//</span>
</span><span class="line"><span class="c1">//  UINavigationController+StatusBarStyle.m</span>
</span><span class="line"><span class="c1">//  微博@iOS程序犭袁</span>
</span><span class="line"><span class="c1">//</span>
</span><span class="line"><span class="c1">//  Created by  https://github.com/ChenYilong/iOS9AdaptationTips/ on 15/6/8.</span>
</span><span class="line"><span class="c1">//  Copyright (c) 2015年   http://weibo.com/luohanchenyilong/  . All rights reserved.</span>
</span><span class="line"><span class="c1">//</span>
</span><span class="line">
</span><span class="line"><span class="cp">#import &quot;UINavigationController+StatusBarStyle.h&quot;</span>
</span><span class="line">
</span><span class="line"><span class="k">@implementation</span> <span class="bp">UINavigationController</span> <span class="nl">(StatusBarStyle)</span>
</span><span class="line">
</span><span class="line"><span class="p">-</span> <span class="p">(</span><span class="n">UIStatusBarStyle</span><span class="p">)</span><span class="nf">preferredStatusBarStyle</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="c1">//also you may add any fancy condition-based code here</span>
</span><span class="line">    <span class="k">return</span> <span class="n">UIStatusBarStyleLightContent</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">@end</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我在仓库里给出了 navigation 的设置方法，见Demo4。</p>

<p>参考链接： <a href="http://stackoverflow.com/a/19513714/3395008">preferredStatusBarStyle isn’t called–For anyone using a UINavigationController:</a></p>

<h3 id="xcode7--debug--dsym-">Xcode7 在 debug 状态下也生成 .dSYM 文件引起的警告</h3>

<p>Xcode6 的工程升级到 Xcode7上来，会报警告：</p>

<p><img src="http://i57.tinypic.com/2a5zuia.jpg" alt="enter image description here" /></p>

<p>这是 debug 编译时导出符号文件出现的告警，</p>

<p>然而新建的Xcode7工程不会有该问题。</p>

<p>解决方法是让 debug 编译的时候不生成符号文件：</p>

<p><img src="http://i60.tinypic.com/2e23qyp.jpg" alt="enter image description here" /></p>

<h3 id="xcode7--8x--there-is-an-intenal-api-error">Xcode7 无法使用 8.x 系统的设备调试，一运行就报错 <code>there is an intenal API error</code></h3>

<p><img src="http://cdn.cocimg.com/bbs/attachment/Fid_21/21_296305_92094d6a71e587a.png" alt="enter image description here" /></p>

<p><code>Xcode7</code> 调试  <code>iOS8.x</code> 的真机，需要确保项目名改为英文，中间含有中文会报错  <code>there is an intenal API error</code></p>

<p>按照下面的步骤检查：</p>

<p>bulid settings  -&gt;    packaging  -&gt; product name</p>

<h3 id="html--iframe--safari--app">使用了 HTML 的 iframe 元素可能导致无法从 Safari 跳转至 App</h3>

<p>我们都知道，从网易新闻分享一条新闻到QQ，然后从QQ中打开链接再用safari打开链接，在iOS8上，这个时候会跳转到网易新闻App。但是现在（2015年09月23日）版本的网易新闻在 iOS9 就不能正常跳转，会跳转到 App Store 页面并提示要不要打开 App Store。</p>

<p>这是很可能是因为使用了 HTML 的 iframe 元素，并将自定义的链接放进了该元素中</p>

<p>举例说明：</p>

<p><img src="http://i61.tinypic.com/2wbvok8.jpg" alt="enter image description here" /></p>

<p>我之前写的一个 Demo： <a href="https://github.com/ChenYilong/CYLExternalURL">模仿 《简书 App》 的效果:在html中跳转到App中的对应页面,并能从App跳转到原来的网址</a>，在例子中直接调用自定义链接在 iOS9上是可以跳转到 App 中的，然而，如果用 iframe 元素包起来就会变不可用。</p>

<p>参考链接：</p>

<ol>
  <li><a href="http://www.w3school.com.cn/tags/tag_iframe.asp">HTML 的iframe 标签</a></li>
  <li><a href="http://stackoverflow.com/questions/31891777/ios-9-safari-iframe-src-with-custom-url-scheme-not-working">iOS 9 safari iframe src with custom url scheme not working</a></li>
</ol>

<h3 id="ios9">iOS9锁屏控制台会打印警告</h3>

<p>加入运行如下示例代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">viewDidLoad</span> <span class="p">{</span>
</span><span class="line">    <span class="p">[</span><span class="nb">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class="line">    <span class="kt">dispatch_queue_t</span> <span class="n">queue</span> <span class="o">=</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line">    <span class="n">dispatch_async</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="c1">//在这个10秒内锁屏</span>
</span><span class="line">         <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;准备休眠&quot;</span><span class="p">);</span>
</span><span class="line">        <span class="n">sleep</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class="line">        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;打印成功&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>应用运行过程中锁屏，总是会出现以下提示：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"><span class="o">**</span> <span class="o">-</span><span class="p">[</span><span class="bp">UIApplication</span> <span class="nl">_handleNonLaunchSpecificActions</span><span class="p">:</span><span class="nl">forScene</span><span class="p">:</span><span class="nl">withTransitionContext</span><span class="p">:</span><span class="nl">completion</span><span class="p">:]</span> <span class="o">**</span> <span class="n">unhandled</span> <span class="n">action</span> <span class="o">-&gt;</span> <span class="o">&lt;</span><span class="nl">FBSSceneSnapshotAction</span><span class="p">:</span> <span class="mh">0x16da76c0</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class="line">    <span class="n">handler</span> <span class="o">=</span> <span class="n">remote</span><span class="p">;</span>
</span><span class="line">    <span class="n">info</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nl">BSSettings</span><span class="p">:</span> <span class="mh">0x16d80e50</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class="line">        <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>当应用处于空闲状态时（无网络请求）锁屏对于用户而言并无较大影响，</p>

<p>但是当应用在执行某个异步任务时（比如下拉刷新一下列表）锁屏，重新解锁进入就可能会发现异步任务失败，控制台也会提示 Error 信息：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"><span class="o">**</span> <span class="o">-</span><span class="p">[</span><span class="bp">UIApplication</span> <span class="nl">_handleNonLaunchSpecificActions</span><span class="p">:</span><span class="nl">forScene</span><span class="p">:</span><span class="nl">withTransitionContext</span><span class="p">:</span><span class="nl">completion</span><span class="p">:]</span> <span class="o">**</span> <span class="n">unhandled</span> <span class="n">action</span> <span class="o">-&gt;</span> <span class="o">&lt;</span><span class="nl">FBSSceneSnapshotAction</span><span class="p">:</span> <span class="mh">0x16da76c0</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class="line">    <span class="n">handler</span> <span class="o">=</span> <span class="n">remote</span><span class="p">;</span>
</span><span class="line">    <span class="n">info</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nl">BSSettings</span><span class="p">:</span> <span class="mh">0x16d80e50</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class="line">        <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="n">error</span> <span class="k">in</span> <span class="nl">__connection_block_invoke_2</span><span class="p">:</span> <span class="n">Connection</span> <span class="n">interrupted</span>
</span><span class="line"> <span class="err">```</span>
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>以上情况不易复现，但确有发生。</p>

<p>在 iOS8 系统下测试并未发现此问题。</p>

<p>对此并未找到合理的解释和对应的解决办法，如果你有解决方法，欢迎提 PR !</p>

<h3 id="didfinishlaunchingwithoptionswindowrootviewcontroller">在<code>didFinishLaunchingWithOptions</code>结束后还没有设置window的<code>rootViewController</code>会导致崩溃</h3>

<p>iOS9 不允许在 <code>didFinishLaunchingWithOptions</code> 结束了之后，还没有设置 window 的 <code>rootViewController</code> 。 也许是 Xcode7 的编译器本身就不支持。</p>

<p>崩溃时的控制台日志提示：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"><span class="o">***</span> <span class="n">Assertion</span> <span class="n">failure</span> <span class="k">in</span> <span class="o">-</span><span class="p">[</span><span class="bp">UIApplication</span> <span class="nl">_runWithMainScene</span><span class="p">:</span><span class="nl">transitionContext</span><span class="p">:</span><span class="nl">completion</span><span class="p">:],</span> <span class="o">/</span><span class="n">BuildRoot</span><span class="o">/</span><span class="n">Library</span><span class="o">/</span><span class="n">Caches</span><span class="o">/</span><span class="n">com</span><span class="p">.</span><span class="n">apple</span><span class="p">.</span><span class="n">xbs</span><span class="o">/</span><span class="n">Sources</span><span class="o">/</span><span class="n">UIKit_Sim</span><span class="o">/</span><span class="n">UIKit</span><span class="o">-</span><span class="mf">3505.16</span><span class="o">/</span><span class="bp">UIApplication</span><span class="p">.</span><span class="nl">m</span><span class="p">:</span><span class="mi">3294</span>
</span><span class="line">
</span><span class="line"><span class="o">***</span>  <span class="n">Terminating</span> <span class="n">app</span> <span class="n">due</span> <span class="n">to</span> <span class="n">uncaught</span> <span class="n">exception</span> <span class="err">&#39;</span><span class="n">NSInternalInconsistencyException</span><span class="err">&#39;</span><span class="p">,</span> <span class="nl">reason</span><span class="p">:</span> <span class="err">&#39;</span><span class="n">Application</span> <span class="n">windows</span> <span class="n">are</span> <span class="n">expected</span> <span class="n">to</span> <span class="n">have</span> <span class="n">a</span> <span class="n">root</span> <span class="n">view</span> <span class="n">controller</span> <span class="n">at</span> <span class="n">the</span> <span class="n">end</span> <span class="n">of</span> <span class="n">application</span> <span class="n">launch</span><span class="err">&#39;</span>
</span><span class="line">
</span><span class="line"><span class="o">***</span> <span class="n">First</span> <span class="n">throw</span> <span class="n">call</span> <span class="nl">stack</span><span class="p">:</span>
</span><span class="line"><span class="cm">/*省略*/</span>
</span><span class="line"><span class="n">libc</span><span class="o">++</span><span class="n">abi</span><span class="p">.</span><span class="nl">dylib</span><span class="p">:</span> <span class="n">terminating</span> <span class="n">with</span> <span class="n">uncaught</span> <span class="n">exception</span> <span class="n">of</span> <span class="n">type</span> <span class="bp">NSException</span>
</span><span class="line"><span class="p">(</span><span class="n">lldb</span><span class="p">)</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>解决的方法是先设初始化个值，之后再赋值替换掉：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"><span class="bp">UIWindow</span> <span class="o">*</span><span class="n">window</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIWindow</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame</span><span class="p">:[</span><span class="n">UIScreenmainScreen</span><span class="p">].</span><span class="n">bounds</span><span class="p">];</span>
</span><span class="line"><span class="n">window</span><span class="p">.</span><span class="n">rootViewController</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIViewController</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>尤其注意一种情况，在 iOS8以前，我们有时候会通过在 AppDelegate 中添加另一个 UIWindow ，并修改其 Level 来达到 addSubview 的效果，因而也不设置 window 的 <code>rootViewController</code> ，而是把它直接以视图的形式展示了，则在 iOS8 上是警告，在 iOS9 上就崩溃了。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"><span class="o">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nl">application</span><span class="p">:(</span><span class="bp">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="n">application</span> <span class="nl">didFinishLaunchingWithOptions</span><span class="p">:(</span><span class="bp">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="n">launchOptions</span> <span class="p">{</span>
</span><span class="line">    <span class="nb">self</span><span class="p">.</span><span class="n">window</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIWindow</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame</span><span class="p">:[[</span><span class="bp">UIScreen</span> <span class="n">mainScreen</span><span class="p">]</span> <span class="n">bounds</span><span class="p">]];</span>
</span><span class="line">    <span class="nb">self</span><span class="p">.</span><span class="n">window</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">yellowColor</span><span class="p">];</span>
</span><span class="line">    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">window</span> <span class="n">makeKeyAndVisible</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">    <span class="bp">UIWindow</span> <span class="o">*</span><span class="n">normalWindow</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIWindow</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame</span><span class="p">:[[</span><span class="bp">UIScreen</span> <span class="n">mainScreen</span><span class="p">]</span> <span class="n">bounds</span><span class="p">]];</span>
</span><span class="line">    <span class="n">normalWindow</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">blueColor</span><span class="p">];</span>
</span><span class="line">    <span class="n">normalWindow</span><span class="p">.</span><span class="n">windowLevel</span> <span class="o">=</span> <span class="n">UIWindowLevelAlert</span><span class="p">;</span>
</span><span class="line">    <span class="p">[</span><span class="n">normalWindow</span> <span class="n">makeKeyAndVisible</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这种情况，在 <code>didFinishLaunchingWithOptions</code> 需要修改原来的策略，将第二个 window 类型改为其他类型，比如 viewController 类型、navigation 类型、tabbarController 类型等。</p>

<h2 id="demo5demo6-----api">9.Demo5、Demo6— 搜索 API</h2>

<p>导入两个 framework，</p>

<p>然后像设置tableView 的 cell 一样设置下每一个“搜索元素”，搜索元素的组成如下：</p>

<p><img src="http://i57.tinypic.com/144b22w.jpg" alt="enter image description here" /></p>

<p>详情见 Demo6 代码。</p>

<p><img src="http://image17-c.poco.cn/mypoco/myphoto/20150923/21/17338872420150923214730010.gif?370x686_110" alt="enter image description here" /></p>

<p>既然刚才说了搜索元素与 tableView 的 cell 非常相似：那么我们就展示一下如何让 tableView 与 CoreSpotlightSearch 进行结合：</p>

<p>详见 Demo6，Demo6 与 Demo5 的主要差异在于：在点击搜索结果跳转到 App 后，还会进一步根据搜索的内容 push 到相应的详情页中：</p>

<p><img src="http://image17-c.poco.cn/mypoco/myphoto/20150924/00/17338872420150924001340035.gif?306x572_110" alt="enter image description here" /></p>

<h2 id="ios">10.iOS国际化问题：当前设备语言字符串返回有变化。</h2>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="o">&lt;</span><span class="n">div</span> <span class="k">class</span><span class="o">=</span><span class="err">&#39;</span><span class="n">bogus</span><span class="o">-</span><span class="n">wrapper</span><span class="err">&#39;</span><span class="o">&gt;&lt;</span><span class="n">notextile</span><span class="o">&gt;&lt;</span><span class="n">figure</span> <span class="k">class</span><span class="o">=</span><span class="err">&#39;</span><span class="n">code</span><span class="err">&#39;</span><span class="o">&gt;&lt;</span><span class="n">div</span> <span class="k">class</span><span class="o">=</span><span class="s">&quot;highlight&quot;</span><span class="o">&gt;&lt;</span><span class="n">table</span><span class="o">&gt;&lt;</span><span class="n">tr</span><span class="o">&gt;&lt;</span><span class="n">td</span> <span class="k">class</span><span class="o">=</span><span class="s">&quot;gutter&quot;</span><span class="o">&gt;&lt;</span><span class="n">pre</span> <span class="k">class</span><span class="o">=</span><span class="s">&quot;line-numbers&quot;</span><span class="o">&gt;&lt;</span><span class="n">span</span> <span class="k">class</span><span class="o">=</span><span class="err">&#39;</span><span class="n">line</span><span class="o">-</span><span class="n">number</span><span class="err">&#39;</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;</span>
</span><span class="line"><span class="o">&lt;</span><span class="n">span</span> <span class="k">class</span><span class="o">=</span><span class="err">&#39;</span><span class="n">line</span><span class="o">-</span><span class="n">number</span><span class="err">&#39;</span><span class="o">&gt;</span><span class="mi">2</span><span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;</span>
</span><span class="line"><span class="o">&lt;</span><span class="n">span</span> <span class="k">class</span><span class="o">=</span><span class="err">&#39;</span><span class="n">line</span><span class="o">-</span><span class="n">number</span><span class="err">&#39;</span><span class="o">&gt;</span><span class="mi">3</span><span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;</span>
</span><span class="line"><span class="o">&lt;</span><span class="n">span</span> <span class="k">class</span><span class="o">=</span><span class="err">&#39;</span><span class="n">line</span><span class="o">-</span><span class="n">number</span><span class="err">&#39;</span><span class="o">&gt;</span><span class="mi">4</span><span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;</span>
</span><span class="line"><span class="o">&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">td</span><span class="o">&gt;&lt;</span><span class="n">td</span> <span class="k">class</span><span class="o">=</span><span class="err">&#39;</span><span class="n">code</span><span class="err">&#39;</span><span class="o">&gt;&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span> <span class="k">class</span><span class="o">=</span><span class="err">&#39;&#39;</span><span class="o">&gt;&lt;</span><span class="n">span</span> <span class="k">class</span><span class="o">=</span><span class="err">&#39;</span><span class="n">line</span><span class="err">&#39;</span><span class="o">&gt;</span><span class="bp">NSUserDefaults</span> <span class="o">*</span><span class="n">defaults</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">];</span>
</span><span class="line"><span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;&lt;</span><span class="n">span</span> <span class="k">class</span><span class="o">=</span><span class="err">&#39;</span><span class="n">line</span><span class="err">&#39;</span><span class="o">&gt;</span><span class="bp">NSArray</span> <span class="o">*</span><span class="n">allLanguage</span> <span class="o">=</span> <span class="p">[</span><span class="n">defaults</span> <span class="nl">objectForKey</span><span class="p">:</span><span class="s">@&quot;AppleLanguages&quot;</span><span class="p">];</span>
</span><span class="line"><span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;&lt;</span><span class="n">span</span> <span class="k">class</span><span class="o">=</span><span class="err">&#39;</span><span class="n">line</span><span class="err">&#39;</span><span class="o">&gt;</span><span class="bp">NSString</span> <span class="o">*</span><span class="n">currentLanguage</span> <span class="o">=</span> <span class="p">[</span><span class="n">allLanguage</span> <span class="nl">objectAtIndex</span><span class="p">:</span><span class="mi">0</span><span class="p">];</span>
</span><span class="line"><span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;&lt;</span><span class="n">span</span> <span class="k">class</span><span class="o">=</span><span class="err">&#39;</span><span class="n">line</span><span class="err">&#39;</span><span class="o">&gt;</span><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;The current language is : %@&quot;</span><span class="p">,</span> <span class="n">currentLanguage</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">td</span><span class="o">&gt;&lt;/</span><span class="n">tr</span><span class="o">&gt;&lt;/</span><span class="n">table</span><span class="o">&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;&lt;/</span><span class="n">figure</span><span class="o">&gt;&lt;/</span><span class="n">notextile</span><span class="o">&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>iOS 9 之前：以上返回结果：语言字符串代码。例如：”zh-Hans”</p>

<p>iOS 9:以上返回结果：语言字符串代码 + 地区代码。例如：”zh-Hans-US”</p>

<p>备注：<br />
1.请注意判断当前语言类型，不要用以下形式的代码了，不然在iOS9上就会遇到坑。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">if ([currentLanguage isEqualToString:@"zh-Hans"])</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可以使用：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">if ([currentLanguage hasPrefix:@"zh-Hans"])</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>另外：对于中文，语言有：</p>

<ul>
  <li>简体中文:zh-Hans</li>
  <li>繁体中文:zh-Hant</li>
  <li>香港中文:zh-HK</li>
  <li>澳门中文:zh-MO</li>
  <li>台湾中文:zh-TW</li>
  <li>新加坡中文:zh-SG</li>
</ul>

<p><strong>备注：以上iOS9 当前语言字符串返回结果：语言字符串代码 + 地区代码。在某些情况下不是这样，本人手机型号：大陆版电信iPhone5S/A1533/16GB测试结果：zh-HK/zh-TW，在地区为”中国”、”中国香港”、”中国台湾”的时候，显示的还是zh-HK/zh-TW，一旦切换到其它地区，设备语言会自动的切换到中文繁体。请开发人员注意中文的问题！</strong></p>

<h2 id="uitableview">11.UITableView显示异常</h2>

<p>原本在 Xcode6 上完好的项目，在 Xcode7 上一编译， <code>tableView</code> 出了两个问题 ：</p>

<ol>
  <li>代码创建的 <code>tableView</code> 无法隐藏 cell 分割线</li>
  <li><code>reloadData</code> 刷新失效；</li>
</ol>

<h3 id="tableview--cell-">代码创建的 <code>tableView</code> 无法隐藏 cell 分割线</h3>

<p>iOS9 里面用到 tableView 突然跑出来了很多 cell 的分割线， 但是在用xib创建的 tableview，就不存在这个问题</p>

<p>解决方法是将设置分割线隐藏的方法 <code>self.tableView.separatorStyle = UITableViewCellSeparatorStyleNone;</code> 写在 <code>-layoutSubviews</code> 中：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">layoutSubviews</span><span class="p">{</span>
</span><span class="line">    <span class="p">[</span><span class="nb">super</span> <span class="n">layoutSubviews</span><span class="p">];</span>
</span><span class="line">    <span class="nb">self</span><span class="p">.</span><span class="n">tableView</span><span class="p">.</span><span class="n">separatorStyle</span> <span class="o">=</span> <span class="n">UITableViewCellSeparatorStyleNone</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"> <span class="err">```</span>
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>也有人发现另一种方法，就是每次 reloadData 之前都进行一次设置：设置分割线隐藏，这样也可以解决：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line">    <span class="nb">self</span><span class="p">.</span><span class="n">tableView</span><span class="p">.</span><span class="n">separatorStyle</span> <span class="o">=</span> <span class="n">UITableViewCellSeparatorStyleNone</span><span class="p">;</span>
</span><span class="line">   <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">tableView</span> <span class="n">reloadData</span><span class="p">]</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>虽然也可以解决但是不推荐，这样写会给其他人造成困扰：不知所云。</p>

<h3 id="reloaddata-"><code>reloadData</code> 刷新失效</h3>

<p>现象： <code>[tableView reloadData]</code> 无效，有一行 cell 明明改变了但是刷新不出来。</p>

<p>感觉可能是这个方法和某种新加的特性冲突了，猜测可能是 <code>reloadData</code> 的操作被推迟到下一个 <code>RunLoop</code> 执行最终失效。</p>

<p>解决的方法是，注释 <code>[tableView reloadData]</code> ，改用局部刷新：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"> <span class="err">```</span><span class="n">Objective</span><span class="o">-</span><span class="n">C</span>
</span><span class="line"><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">tableView</span> <span class="nl">reloadSections</span><span class="p">:[</span><span class="bp">NSIndexSet</span> <span class="nl">indexSetWithIndex</span><span class="p">:</span><span class="mi">0</span><span class="p">]</span> <span class="nl">withRowAnimation</span><span class="p">:</span><span class="n">UITableViewRowAnimationNone</span><span class="p">];</span>
</span><span class="line"> <span class="err">```</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这两个推测均属 Xcode7 的bug，将来 Apple 肯定会修复。</p>

<h1 id="section-2">结束语</h1>

<p>疏漏之处，可前往阅读下<a href="http://asciiwwdc.com">这个网站</a>，这里有每年 WWDC 演讲的英文记录。</p>

<hr />

<p>Posted by <a href="http://weibo.com/luohanchenyilong/">微博@iOS程序犭袁</a><br />
原创文章，版权声明：自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">Creative Commons BY-NC-ND 3.0</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby gems内存泄露]]></title>
    <link href="http://helloyokoy.github.io/blog/ruby-gems-memory-leak/"/>
    <updated>2015-10-22T15:01:34+08:00</updated>
    <id>http://helloyokoy.github.io/blog/ruby-gems-memory-leak</id>
    <content type="html"><![CDATA[<p>请大家检查下 Gemfile.lock，若在使用如下版本的gem包，那么请及时更新</p>

<ul>
  <li>
    <p>therubyracer &lt; 0.12.2</p>
  </li>
  <li>
    <p>sidekiq &lt; 3.5.1</p>
  </li>
  <li>
    <p>celluloid &gt; 0.16.0, &lt; 0.17.2</p>
  </li>
  <li>
    <p>zipruby &lt;= 0.3.6</p>
  </li>
  <li>
    <p>redcarpet &lt; 3.3.3</p>
  </li>
  <li>
    <p>grape &lt; 0.2.5</p>
  </li>
</ul>

<p><a href="https://github.com/ASoftCo/leaky-gems">https://github.com/ASoftCo/leaky-gems</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotion简介]]></title>
    <link href="http://helloyokoy.github.io/blog/rubymotion/"/>
    <updated>2015-10-15T15:52:38+08:00</updated>
    <id>http://helloyokoy.github.io/blog/rubymotion</id>
    <content type="html"><![CDATA[<h2 id="rubymotion-">RubyMotion 是什么</h2>
<p><img src="https://ruby-china-files.b0.upaiyun.com/photo/2015/aa191c47356e1b30b1f1a7d7e82fea3c.gif" alt="icon" /></p>

<h2 id="section">统一的运行时环境</h2>
<p>在 iOS 以及 OS X 系统之上，RubyMotion 基于 Objective-C Runtime 和 Foundation 类实现了 Ruby 语言。 在 Andorid 系统之上，RubyMotion 基于 Android Java Runtime，Dalvik 以及 ART 实现了 Ruby 语言。由于这种异常紧密的集成，Ruby 可以自如的调用各平台的接口而不会产生任何性能损失。你可以轻松自如的混编 Ruby 和 Objective-C 或者 Ruby 和 Java，自由的访问各平台提供的最新的 API，自由调用各种第三方库。</p>

<h2 id="section-1">完全编译</h2>

<p>RubyMotion 使用基于 LLVM 构建(参见原理)的革命性的、先进的预编译器（AOT Complier）将项目中的 Ruby 代码编译成经过优化的机器代码。在 iOS 以及 Android 项目，编译器可以生成 32 位和 64 位的 ARM 目标代码，在 OS X 项目则可以生成 32 位和 64 位的 Intel 目标代码。原始的 Ruby 代码不会出现在程序中，也不会在运行期间被解释执行。RubyMotion 的典型项目的程序包大小在 1MB 以下。</p>

<h2 id="section-2">自动管理内存</h2>

<p>在 Ruby 语言中，你无需考虑内存管理事宜。因为，RubyMotion 会自动释放内存中那些你创建的但是却不再会被使用的对象。针对 iOS 和 OS X 平台，我们提供了一个自定义的内存模型，在设计上类似 Objective-C 的 ARC 机制。这个模型无需再使用额外内存或者代码来处理不再使用的对象的声明和回收。针对 Android 平台，我们使用 Java 运行时环境的 GC 来管理内存。</p>

<!--more-->

<h2 id="section-3">支持并行</h2>

<p>绝大斗数 Android 设备以及最新的 iOS 和 OS X 硬件都支持多核处理器。所以在设计应用程序时，考虑到支持并发是非常重要的。RubyMotion 被设计成没有全局锁且是可重入的（re-entrant），主要目的就是可以让代码并行的执行。针对 iOS 和 OS X 平台，RubyMotion 为 Grand Central Dispatch 提供了方便的接口，你可以自如的使用 CPU 核心来平衡需要大量计算的任务。</p>

<h2 id="rubymotion">要不要选择 RubyMotion</h2>

<p>如果你喜欢 Ruby，当然你需要来尝试 RubyMotion，并且你会爱上他。并且，选择 RubyMotion 意味着你可以像开发 Rails 应用一样使用 Rake 工具链，同时又不会放弃 AutoLayout 等原生开发时必须的技术。你可以使用来自人类希望的 JetBrains 出品的 RubyMine，也可以使用 SublimeText 或者 VIM(Emacs)。你会看到类似 Rails 的文件组织结构。作为一个 Rails 开发者，你会感到所有的开发环境都是如此的令人感到熟悉。一个人，凭借 Ruby 实现真正意义上的全端全栈，似乎指日可待啊～</p>

<h2 id="section-4">社区发展</h2>

<p>RubyMotion 存在已经第四个年头，所以目前是一个稳定的项目。由于之前没有提供免费试用版，所以造成好多人想去学习，却因为感觉到相对昂贵的价格而止步不前。现在不用了，快去 <a href="http://www.rubymotion.com/download/">http://www.rubymotion.com/download/</a> 下载免费版把玩吧……</p>

<p>在社区发展方面，社区贡献了非常多的 Gems。得益于 Ruby 强大的 DSL 生成能力和元编程特性，非常多的 Gems 对原生开发冗余的编程模型和繁杂的 API 调用做了非常好的封装。<a href="http://motion-toolbox.com/">http://motion-toolbox.com/</a> 里面收录了绝大多数优质的 RubyMotion 的 Gems。</p>

<h2 id="section-5">相关资料</h2>

<p><a href="https://ruby-china.org/topics/22416">RubyMotion Workshop Beijing 资料总结</a></p>

<p><a href="http://www.rubymotion.com/download/">RubyMotion 官网</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android 轻量缓存框架 ASimpleCache]]></title>
    <link href="http://helloyokoy.github.io/blog/anroi-asimplecache/"/>
    <updated>2015-10-14T20:28:27+08:00</updated>
    <id>http://helloyokoy.github.io/blog/anroi-asimplecache</id>
    <content type="html"><![CDATA[<p>做Android应用开发的同学们相信对“缓存”这个词不陌生，缓存可能有多方面的概念，这里大概列举下程序开发的缓存大概有哪些：</p>

<ol>
  <li>
    <p>服务端控制缓存
如volley请求库，便是通过服务端的“Cache-Control”和“max-age”来告诉客户端有没有缓存以及缓存的时间，也是推荐的使用方式，但是需要服务端配合，比较灵活。</p>
  </li>
  <li>
    <p>客户端直接控制缓存</p>
  </li>
</ol>

<p>有些时候不需要服务端来支持的话，客户端可以直接做一层缓存，思路就是请求之后把数据缓存在本地，最常见的是直接以文件缓存在本地就好了，当然你可以缓存在本地的sqlite，以sqlite文件的形式缓存数据处理更灵活点，然后客户端自己处理缓存的时间，过期则直接清除数据。对于一些不太经常变化的页面，采用这种缓存可以减少客户端流量，同时减少服务器并发量。</p>

<p>对于一些新闻类或者timeline这种，数据变化是非常频繁的，针对这种情况可能就不太适合设置缓存时间，这种情况可以考虑让页面每次进来都会自动刷新一次以获取最新数据，如果网络不好或者断开时可以直接读取本地缓存，增加用户体验。当然如果想要更复杂的处理可以配合时间来判断当前页面要不要刷新。</p>

<!--more-->

<p>今天就介绍一种简易的缓存框架，使用起来非常简单。</p>

<h4 id="asimplecache">ASimpleCache</h4>

<p>ASimpleCache 是一个为android制定的 轻量级的 开源缓存框架。轻量到只有一个java文件（由十几个类精简而来）。</p>

<h4 id="section">它可以缓存什么东西？</h4>

<p>普通的字符串、JsonObject、JsonArray、Bitmap、Drawable、序列化的java对象，和 byte数据。</p>

<h4 id="asimplecache-1">如何使用 ASimpleCache？</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ACache mCache = ACache.get(this);
</span><span class="line">mCache.put("test_key1", "test value");
</span><span class="line">mCache.put("test_key2", "test value", 10);//保存10秒，如果超过10秒去获取这个key，将为null
</span><span class="line">mCache.put("test_key3", "test value", 2 * ACache.TIME_DAY);//保存两天，如果超过两天去获取这个key，将为null</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>获取数据</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ACache mCache = ACache.get(this);
</span><span class="line">String value = mCache.getAsString("test_key1");</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>最后此项目的开源地址： <a href="https://github.com/yangfuhai/ASimpleCache">ASimpleCache</a></p>

<hr />
<p>转载自 <a href="http://stormzhang.com/android/2014/10/17/android-simple-cache/">strom博客</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android 开发遇到的坑]]></title>
    <link href="http://helloyokoy.github.io/blog/android-mistake/"/>
    <updated>2015-10-12T14:21:57+08:00</updated>
    <id>http://helloyokoy.github.io/blog/android-mistake</id>
    <content type="html"><![CDATA[<p>作为一个有三、四年Android应用开发经验的码农，自然会遇到很多坑，下面是我能够想起的一些坑（实践证明不记笔记可不是个好习惯），后面有想到其它坑会陆续补上。</p>

<ul>
  <li>
    <p>在Android library中不能使用switch-case语句访问资源ID：
<a href="http://zmywly8866.github.io/2014/12/24/android-can-not-use-switch-to-load-resource-in-libproject-solution.html">在Android library中不能使用switch-case语句访问资源ID的原因分析及解决方案</a></p>
  </li>
  <li>
    <p>不能在Activity没有完全显示时显示PopupWindow和Dialog：<a href="http://stackoverflow.com/questions/4187673/problems-creating-a-popup-window-in-android-activity">popupwindow - Problems creating a Popup Window in Android Activity</a></p>
  </li>
  <li>
    <p>在多进程之间不要用SharedPreferences共享数据，虽然可以（MODE_MULTI_PROCESS），但极不稳定：<a href="http://stackoverflow.com/questions/22129717/mode-multi-process-for-sharedpreferences-isnt-working">android - MODE_MULTI_PROCESS for SharedPreferences isn’t working</a></p>
  </li>
</ul>

<!--more-->

<ul>
  <li>
    <p>有些时候不能使用Application的Context，不然会报错（比如启动Activity，显示Dialog等）：
<img src="https://pic3.zhimg.com/e3f3236cbd96c69cdea10d014bacbeae_b.png" alt="icon" /></p>
  </li>
  <li>
    <p>同一个应用的JNI代码，不要轻易换NDK编译的版本，否则会有很多问题（主要是一些方法实现不一样，并且高版本对代码的检测更严格），比如r8没有问题，但到r9就有问题了，这是个大坑；</p>
  </li>
  <li>
    <p>Android的JNI代码中，有返回类型的函数没有返回值编译的时候也不会报错；</p>
  </li>
  <li>
    <p>当前Activity的onPause方法执行结束后才会执行下一个Activity的onCreate方法，所以在onPause方法中不适合做耗时较长的工作，这会影响到页面之间的跳转效率；</p>
  </li>
  <li>
    <p>谨慎使用Android的透明主题，透明主题会导致很多问题，比如：如果新的Activity采用了透明主题，那么当前Activity的onStop方法不会被调用；在设置为透明主题的Activity界面按Home键时，可能会导致刷屏不干净的问题；进入主题为透明主题的界面会有明显的延时感；</p>
  </li>
  <li>
    <p>不要在非UI线程中初始化ViewStub，否则会返回null；</p>
  </li>
  <li>
    <p>公共接口一定要考虑到代码重入的情况，能设计为单例就尽量用单例；</p>
  </li>
  <li>
    <p>不要通过Bundle传递大块的数据，否则会报TransactionTooLargeException异常：<a href="http://stackoverflow.com/questions/12819617/issue-passing-large-data-to-second-activity">java - Issue: Passing large data to second Activity</a></p>
  </li>
  <li>
    <p>尽量不要通过Application缓存数据，这不稳定：
<a href="http://zmywly8866.github.io/2014/12/26/android-do-not-store-data-in-the-application-object.html">不要在Android的Application对象中缓存数据!</a></p>
  </li>
  <li>
    <p>尽量不要使用AnimationDrawable，它在初始化的时候就将所有图片加载到内存中，特别占内存，并且还不能释放，释放之后下次进入再次加载时会报错；</p>
  </li>
  <li>
    <p>9图不能通过tinypng压缩，不然会有问题；</p>
  </li>
  <li>
    <p>genymotion模拟器快是因为它是基于x86架构的，如果你的应用中用到了so，但没有x86架构的so，只能放弃使用它；Android Studio的模拟器也一样；</p>
  </li>
  <li>
    <p>Eclipse的Android开发环境配置好后不要轻易升级ADT和build tools，不然会浪费你很多时间，还有就是一个workspace中的工程不要太多，不然每次启动都会很慢；</p>
  </li>
  <li>
    <p>Android studio每个版本、gradle每个版本差别都比较大（我是这样认为的），对于jni代码的编译建议在Eclipse中进行，如果在Android studio中开发jni会浪费很多时间，主要是编译脚本的配置比较麻烦；</p>
  </li>
  <li>
    <p>Eclipse中的Lint太不靠谱，特别是主工程中依赖library的时候，很多提示都是有问题的，建议使用Android Studio的工程清理工具，特别推荐；</p>
  </li>
  <li>
    <p>AsyncTask默认自己维护一个静态的线程池，而该线程池只允许同时执行一个线程，也就是说，不管多少个AsyncTask,只要是调用execute()方法，都是共享这个默认进程池的，你的任务必须在之前的任务执行完以后，才能执行。<a href="http://zmywly8866.github.io/2015/09/29/android-call-asynctask-excute-not-run.html">调用AsyncTask的excute方法不能立即执行程序的原因分析及改善方案</a></p>
  </li>
</ul>

<hr />
<p>著作权归作者所有。</p>

<p>商业转载请联系作者获得授权，非商业转载请注明出处。</p>

<p>作者：张明云</p>

<p>链接：http://www.zhihu.com/question/27818921/answer/70279930</p>

<p>来源：知乎</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Gems 推荐]]></title>
    <link href="http://helloyokoy.github.io/blog/rails-gems-recomend/"/>
    <updated>2015-10-05T12:31:27+08:00</updated>
    <id>http://helloyokoy.github.io/blog/rails-gems-recomend</id>
    <content type="html"><![CDATA[<p>Rails社区的gem库，按我感觉质量普遍比较高，这跟Rails社区的氛围有关，以下推荐的是我个人在项目中时常用到的并且比较主流的gem，想到哪儿写到哪儿，挂一漏万。</p>

<h4 id="bootstrapbootstrap-sass">1.bootstrap（bootstrap-sass）</h4>

<p>这个不用解释了吧，对于没有专业前端小伙伴的项目和团队是福音。而且对于想要学习前端技术的同学，bootstrap的源码非常值得进行深入的学习和理解。当然，缺点也是有的，就是大家的网站做出来都比较像，建议有条件的小伙伴使用的时候还是多进行一些个性化修改。</p>

<h4 id="capistranocapistrano--rubygemsorg">2.Capistrano（capistrano | RubyGems.org）</h4>

<p>Capistrano最初就是用来向服务器部署ruby应用的，当然现在也开始支持其他类型项目的部署。Capistrano是一种在多台服务器上运行脚本的开源工具，它主要用于部署web应用。它自动完成多台服务器上新版本的同步更新，包括数据库的改变。使用起来非常方便，基本也是Rails应用开发必备。</p>

<h4 id="bcryptbcrypt--rubygemsorg">3.bcrypt（bcrypt | RubyGems.org）</h4>

<p>bcrypt是一个跨平台的文件加密工具。由它加密的文件可在所有支持的操作系统和处理器上进行转移。它的口令必须是8至56个字符，并将在内部被转化为448位的密钥。在rails上使用起来相当简便，web开发一般是少不了的。</p>

<h4 id="sprocketssprockets--rubygemsorg">4.sprockets（sprockets | RubyGems.org）</h4>

<p>Sprockets 是一个 Ruby 库，用来检查 JavaScript 文件的相互依赖关系，用以优化网页中引入的js文件，以避免加载不必要的js文件，加快网页访问速度。这个现在貌似是rails工程默认自带gem，记不太清了，足见重要性。但是我在使用中发现有时候会跟bootstrap的js库发生冲突，主要是版本问题，有使用的小伙伴需要注意一下。</p>

<!--more-->

<h4 id="paperclippaperclip--rubygemsorg">5.Paperclip（paperclip | RubyGems.org）</h4>

<p>paperclip基本上已经是rails的御用图片上传gem了，功能强大使用方便，但是唯一不太好的就是图片剪裁上面功能比较有限。paperclip依赖于ImageMagic，大部分linux包管理器（如apt yum portage等）中应该都能找到这个软件包。</p>

<h4 id="rmagickrmagick--rubygemsorg">6.rmagick（rmagick | RubyGems.org）</h4>

<p>这个gem弥补了paperclip在图片剪裁上的不足。功能十分十分十分的强大，文档也很齐全，只不过是全英文，中文资料比较少。如果项目有要开发头像剪裁上传，那么用rmagic剪裁，paperclip上传是比较好的解决方案。</p>

<h4 id="friendlyidfriendlyid--rubygemsorg">7.friendly_id（friendly_id | RubyGems.org）</h4>

<p>现在大部分网站都已经是友好的url地址了，如果你的rails项目还用数字作为id进行查询那就太low了。</p>

<h4 id="willpaginatewillpaginate">8.will_paginate（will_paginate）</h4>

<p>老版本的will_paginate分业是基于plugin方式的，新版本的will_paginate已经抛弃了这样的做法，转而使用gem的方式。这样一来安装和使用更加方便，配合一些前端的分页加载库，会让分页加载功能开发非常快捷。</p>

<h4 id="ransackransack--rubygemsorg">9.ransack（ransack | RubyGems.org）</h4>

<p>搜索功能一般分为分词和不分词的，如果你只想做用户和文章标题检索之类的功能，那么不分词的搜索gem比较合适，类似的gem挺多的，我常用的是这个。</p>

<h4 id="sunspotsunspot--rubygemsorg">10.sunspot（sunspot | RubyGems.org）</h4>

<p>接上面，全文搜索的gem也不少，sunspot对于小型项目的话，稍微有些重。如果没有那么多要求的话，sphinx也可以考虑，速度快，占用资源低。</p>

<h4 id="gecodergeocoder--rubygemsorg">11.Gecoder（geocoder | RubyGems.org）</h4>

<p>说实话在web上做定位确实比较乏力，尽量还是用手机客户端吧</p>

<h4 id="pumapumapuma--github">12.puma（puma/puma · GitHub）</h4>

<p>对于想要处理并发请求的web项目，Puma 是和 Unicorn相竞争的 Web 服务器，它能够处理并发请求。Puma 使用线程，以及工作者进程，能够更多的利用可用的 CPU。在 Puma 中，如果整个基础代码是线程安全的，那么你可用利用线程。否则，在使用 Puma 的时候，你只能使用工作者进程进行拓展。Puma的设置也比较简单，官方有详细的使用文档，RubyChina也使用Puma，个人推荐。</p>

<h4 id="emojiwpetersonemoji--github">13.Emoji（wpeterson/emoji · GitHub）</h4>

<p>现在只要涉及社交的项目估计很少有不用表情的了，Emoji是个集成度比较高的Emoji表情转码库，使用方便，当然大部分情况下还是要配合前端使用。</p>

<p>暂时想到这么多，欢迎补充，待续。。。。</p>

<hr />
<p>著作权归作者所有。</p>

<p>商业转载请联系作者获得授权，非商业转载请注明出处。</p>

<p>作者：孙笛</p>

<p>链接：http://www.zhihu.com/question/31083216/answer/50654456</p>

<p>来源：知乎</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Full Stack Developer 全栈工程师]]></title>
    <link href="http://helloyokoy.github.io/blog/full-stack-developer/"/>
    <updated>2015-09-15T16:18:48+08:00</updated>
    <id>http://helloyokoy.github.io/blog/full-stack-developer</id>
    <content type="html"><![CDATA[<p>做这样一个简单的 app:</p>

<p>一个天气应用，干净清爽的界面，天气信息一目了然。它不仅可以精确预测未来 10 天的天气，还可以显示某地的历史天气信息。它具有自定义提醒功能，支持 web 版本， iOS 版， Android 版。</p>

<p>为什么想要做这样一个 App ？因为你喜欢旅行，但没找到一个天气 App 可以提供你下个月或者某个特定月份的天气信息；因为你懒你没有每天看天气预报的习惯，你想要在第二天温度达到 30 度以上或者温差有 +/-7 度的时候，获得温馨提示；因为你要成为一个 Full Stack Engineer ，你必须不断训练每个 stack 的能力。</p>

<!--more-->

<h3 id="web">Web版</h3>

<p>你决定用 MySql 来存储用户数据，用 NoSql 存储历史天气数据。你用 Redis 作为 cache ，缓存一些最常请求的天气数据。你用 Python 写后台，功能简单，后台不复杂，用户注册登录，抓取返回某城市的天气数据，某地的历史天气数据，很快便搞定。</p>

<p>后台开发并测试好了，接下来是 Web 前端。你十分清楚一个好的 UI 设计对一个 App 的重要性，你也明白 UI 的设计不只是为了美观，更重要的是提高信息的可读性和程序的可用性。幸好你平日的积累这次派上用场了。你把之前保存下来的上百个优秀的UI设计作品拿来研究，你从书架上拿出Norman 的那本经典 - The Design of Everyday Things 重新细读。最终你用白纸黑笔敲定了第一个版本的 UI，简洁直观，没有任何多余的设计，所有元素的排列间距 大小颜色都恰到好处。你相信即使天气不好，但用户只要使用这个 App 都会有着愉悦的心情。</p>

<p>那么开始写前端吧。啊，别急，都忘了还有 Icon 和 Logo ，可是不会 PS ，不会 AI ，不会 Sketch 怎么办呢，学吧。你平日喜欢结交不同领域的朋友，正好几周前在一个活动上你认识一位朋友做设计的。她花一个下午的时间教你基本的 Sketch 的使用，并对你的 UI 设计给出了一些意见。你请她吃了顿晚饭表示感谢，然后立即回家根据她的一些建议重新调整了 UI ，这次你在 PS 里把 UI 画了出来，Icons 和 Logo 也顺道一起做了。</p>

<p>接下来的一周，你学习 HTML，CSS，以及 Javascript，并漂亮地把前端搞定。</p>

<h3 id="app">发布 App</h3>

<p>在朋友圈发了个状态，找人帮你做 Beta 测试。他们都首先问你是什么 App，一开始你简单回答一个天气的 App。但你发现，这不能提起他们的兴趣。你觉得你需要用语言，用故事包装一下。不光是作为别人「是什么 App」提问的回答，也是成为 Full stack Engineer 道路上的一个重要技能。</p>

<p>你去看了所有你喜欢的产品的主页，从他们的文案上获得一些灵感启发；你读了经典的 On Writing Well ，发现好的文案，好的设计，其实和好的代码很相似，都是重在交流，如何让他人毫不费劲地明白你要表达的内容。你的故事要吸引人，你的产品介绍要在1分钟内解释清楚，并确保你的父母可以毫无压力听明白。</p>

<p>一切就绪，产品上线了。反响不错，用户持续增加。很多用户希望有移动版本，于是你立即投入到iOS 版本的开发上。</p>

<h3 id="ios---">iOS 版 及 后台优化</h3>

<p>你花一周不到时间学习了基本的语法和工具使用便投入到 App 的开发中。你知道 Learn by Doing 是最好也是最快的。由于之前学习了设计的基础，UI ，Icons 很快搞定，不久 iOS 版本便发布了。iOS 的发布带来了更多的用户增长，后台服务器的压力颇大，你知道是时候优化后台了。</p>

<p>你在 AWS 上多开了 2 台服务器，并写了一个 Script 来自动化部署过程。你改用 uWSGi 协议，用 uwsgi 作为 Application Server。你使用 Nginx 来做并发，负载均衡 ……………</p>

<h3 id="section">成立公司</h3>

<p>用户持续增长，每天你都会收到十几二十封用户的邮件。你很感激这些愿意花时间给你写邮件的用户，你相信他们是你最重要的用户，是潜在的付费用户。如果你把他们像上帝一样对待，他们同样也会把你看作是上帝。所以除了睡觉时间的发来的邮件，每一封邮件，你都会在2小时内给予回复。</p>

<p>果然这样的付出是收获巨大的，他们不仅惊讶且非常感谢你的快速回复，他们会在app store里给你★★★★★的评价，他们在社交网站上分享你的app，他们甚至会主动提出捐款给你。</p>

<p>你从快速的用户增长中嗅到了商机，你开始思考如何赚钱。广告你是坚决不能允许的，你认为再精确的广告也会影响用户体验。你设计了 2 个不同的付费方案，你打算用 A/B 测试看哪个方案更好。你分别给 200 个用户发去邀请尝试付费的邮件，邮件内容你精心打磨过，并在最后写上：CEO &amp; Founder. 通过分析 2 种方案的用户行为，你决定将使用第一种方案。</p>

<p>接下来，你相信差不多是时候成立个公司了。为了省时间，你花 2000 块钱找了个园区挂靠并帮你注册公司。公司的名字让你头疼了很久，你不想只是简单的用这个 App 的名字作为公司名字，你知道公司将来还会做出其他优秀的产品。你希望这个名字简单易记，同时其含义也是你公司文化的象征。</p>

<p>公司注册下来了，但银行那边得自己跑。你联系了一些媒体编辑，邀请他们来试用你的产品；你重新设计了产品主页，并开始写产品的 Blog ；你在各大社交网络都给 App 注册了账号，即做社区客服也为宣传… 这些事大大压缩你写代码的时间。以往你都是以代码量作为衡量自己当天工作效率的指标，所以这些天你总感觉没做啥工作。</p>

<p>这样的发展早已超过你的预期，这个 App 从一个 Side Project 几乎变成了你生活的全部。你跟你女朋友半个月才出去约会一次，她抱怨不断；你1个月没跟朋友出去玩耍喝酒了；你 2 个月都没锻炼过身体… 你意识到, YOU CAN NOT DO THIS ALONE，你需要帮手，你需要找人一起把这个做下去。但你不是要成为 Full Stack Engineer 么？你现在是了么？</p>

<h3 id="full-stack-engineer">Full Stack Engineer</h3>

<p>设计，后台开发，前端开发，移动开发，运营维护，PS，文案… 好像都会了，这算 Full Stack Engineer 了么？</p>

<p>不，这只是踏上成为 Full Stack Engineer 的第一步。你知道目前只是每个 stack 都懂一点，离senior 或者 expert 还差得远，而要每个 stack 都做到极致，需要大量的时间和精力。精力有限，产品开发紧迫，力不从心啊，这条道路也太孤独，因为你不需要与任何人进行协作。难道要把一些stack的任务交给别人做么？这样算是放弃成为 Full Stack Engineer 么？</p>

<p>不！这不是。</p>

<p>什么是 Engineer？「Engineers are versatile minds who create links between science, technology, and society」。Engineer 的本质工作是设计，开发出应用于大众的产品。</p>

<p>一个真正的 Full Stack Engineer ，他从生活中发现问题，洞察需求，他设计解决方案，并开发出初始版本的产品。为了达到目标，他愿意去学习任何领域的技能和知识。同时他不追求一个人完成所有工作，如果有人可以比他在某方面做得更出色，便会十分热情的邀请他们加入。</p>

<p>最终他的职位也许不再是 Engineer ，他不再设计 UI ，不再写代码 … 他的工作不再是 design and building an app or product，因为他有更大更重要的任务要做 - design and building a team or a company which builds great products.</p>

<p>而这时，社会给了他们另一个称呼 - 创业者。尽管众人已忘记他们 Engineer 的身份，但在他们骨子里，内心深处，自己始终都是一个 Engineer 。当他们需要从头再来时，他们毫不犹豫从设计开发产品做起。Nikola Tesla，Ferdinand Porsche，Henry Ford，Jack Dorsey，Mark zuckerberg，Elon Musk … 细数那些改变了或正改变世界的创业者，他们大多数是 Engineer 背景，热衷于设计创造。他们学习技能和知识，不是为了成为某个领域的专家；而是因为那些 是完成自己目标所需要的。</p>

<p>以上，为我认可的 Full Stack Engineer</p>

<hr />

<p>著作权归作者所有。
商业转载请联系作者获得授权，非商业转载请注明出处。</p>

<p>作者：顾鹏</p>

<p>链接：http://www.zhihu.com/question/22420900/answer/21770992</p>

<p>来源：知乎</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么要用Sketch]]></title>
    <link href="http://helloyokoy.github.io/blog/sketch/"/>
    <updated>2015-09-11T20:38:24+08:00</updated>
    <id>http://helloyokoy.github.io/blog/sketch</id>
    <content type="html"><![CDATA[<p>Jean-Marc Denis（原文作者，前Sparrow设计师，现在在Google工作）在参加WWDC 2013时认识了Sketch的开发团队，所以在第一时间尝试了Sketch，当时由于一些功能的缺失，所以还是折回去使用Photoshop了。过了一段时间，他发现设计师社区开始疯狂着迷于这款新的设计工具，所以决定再试一试，想看看迭代了一段时间的Sketch现在能完成多少原先他需要用Photoshop来做的工作。现在，他80%的设计工作都是由Sketch来完成的，所以写了这篇文章来帮助大家一起了解Sketch。</p>

<h4 id="photoshop">Photoshop并不是一款合适的界面设计工具</h4>

<p>为什么我们会期待一个新的设计工具？因为当我们更多的关注效率和关注协作，就越发现Photoshop已经不足以满足我们的期待了。下面看看具体的理由：</p>

<ul>
  <li>
    <p>并非为设计师打造</p>

    <p>Photoshop是为图像处理开发的，诸如路径和矢量工具都是后期才加上去的，所以如果你关心一下Photoshop的更新路径，用户界面设计师完全不是Adobe做这条产品时关心的用户群。所以，如果抛去那些复杂的功能，一个为用户界面设计师打造的设计工具完全可以做得更简单，更高效。</p>
  </li>
  <li>
    <p>不适合移动时代</p>

    <p>相信我们都会觉得为不同的设备输出不同分辨率的素材而痛苦不已吧。或许，你会使用一些第三方插件或是启用一些模板来处理这些事，但依然是很浪费时间的。</p>
  </li>
</ul>

<!--more-->

<ul>
  <li>
    <p>引擎太过陈旧</p>

    <p>Photoshop的引擎是上个世纪为图像处理而打造的，非常的耗费资源，即使是启动一下都要等很久，更别说一次移动多个分组了。话说回来，由于要兼顾Mac和Windows平台，能做到这样已经不容易了。</p>
  </li>
  <li>
    <p>越来越跟不上时代</p>

    <p>大公司的执行效率实在太低。不知道大伙是不是和我一样，非常痛苦地等了好几个月才等到Photoshop对Retina屏幕的支持。诸如自动对齐的等功能我已经不做期待了。</p>
  </li>
</ul>

<h4 id="sketch">为什么Sketch确实值得尝试</h4>
<ul>
  <li>
    <p>自动保存和多版本控制</p>

    <p>有没有梦想过拜托机械的手动保存？Sketch可以做到。Sketch在工作的时候会不断地自动保存成果，并且允许你回复到此前的任一版本。</p>
  </li>
</ul>

<p><img src="https://d262ilb51hltx0.cloudfront.net/max/800/0*-4cYKm2z-PiOVFnk.png" alt="icon" /></p>

<ul>
  <li>
    <p>矢量作图并且像素级的完美</p>

    <p>矢量图意味着可以任意扩展。你没有必要不断地去调整素材的尺寸，Sketch会自动就帮你维持一个像素级完美的作品。如果有的时候你必须用像素点来作图，比如说是画图标或者是插画设计，Sketch 也提供了从矢量切换到像素视图的功能。</p>
  </li>
</ul>

<p><img src="https://d262ilb51hltx0.cloudfront.net/max/1600/0*55Ko51isBD3VVcSL.png" alt="icon" /></p>

<ul>
  <li>
    <p>智能标尺</p>

    <p>你喜欢xScope吗？还是正在用选框工具来进行测量？又或者是难用的网格？Sketch的智能标尺可以帮你轻松地把设计元素的对齐方式、内外间距都调整完美。就我个人而言，这个功能非常节省时间而且避免了复杂的人工计算，是我觉得最有用的功能之一。</p>
  </li>
</ul>

<p><img src="https://d262ilb51hltx0.cloudfront.net/max/800/0*DOaquv046FxhhUz6.gif" alt="icon" /></p>

<ul>
  <li>
    <p>随时随地编辑元素</p>

    <p>在Sketch里我们可以随时随地修改一个元素的圆角、高度和宽度。只需要简单地修改数值就可以轻松调整元素，对于刚从Photoshop切换过来的设计师而言非常好用。甚至会让你产生强烈的依赖。</p>
  </li>
  <li>
    <p>图形拼接</p>

    <p>在Sketch 里你可以很轻松地把多个图形合并，构成一个新的图形。并且Sketch在提供了多种图形合并模式的同时，还允许你随时修改已经合并图形的子图形。这项功能使得你可以很轻松地管理和创造更复杂的图形。</p>
  </li>
</ul>

<p><img src="https://d262ilb51hltx0.cloudfront.net/max/800/0*4piteVCDqPNzWS3V.jpeg" alt="icon" /></p>

<ul>
  <li>
    <p>每个图层都可以有多种混合效果</p>

    <p>在Photoshop里想要让一个图层有多种混合效果是很困难的。但在Sketch里，你可以很容易给一个图层加上多种混合效果，看看下面的示例就知道了。</p>
  </li>
</ul>

<p><img src="https://d262ilb51hltx0.cloudfront.net/max/800/0*UWRr3uQgedzzHtS6.png" alt="icon" /></p>

<ul>
  <li>
    <p>自动选择最接近的像素边界</p>

    <p>自动选择最接近的像素边界可以让一个图形或者是图层自动修正边距到一个像素级完善的位置。比如可以把一个宽度是5.3px的图形自动修正到5px，这样就不会有模糊的像素点和粗糙的图形了。我自己给这项功能设了一个快捷键（Command+Opitons+x），来确保我做出的每一个图形都像素级完美。这比人工一个一个按照网格修改图形高效得多。</p>
  </li>
</ul>

<p><img src="https://d262ilb51hltx0.cloudfront.net/max/800/0*me1mYlEw5C1JKAKY.jpeg" alt="icon" /></p>

<ul>
  <li>样式链接
  有的时候你会做一些充斥文字的设计，样式链接可以帮助你设定一个固定的样式来快速地应用在新的文字上。如果你修改了其中任何一处的样式，那么所有链接该样式的文字都会自动更新到新的样式。并且，这项功能也可以应用在图形上。</li>
</ul>

<p><img src="https://d262ilb51hltx0.cloudfront.net/max/774/0*bTuYN8VIHPDImDXh.gif" alt="icon" /></p>

<ul>
  <li>
    <p>导出素材</p>

    <p>用Photoshop的时候，最痛苦的事莫过于切割元素，然后到处素材。Sketch则可以帮助你快速地导出各种分辨率和格式（pdf, eps, svg, png, jpg, tiff）的素材，通常导出只需要一个点击，并且不用借助任何第三方应用程序。</p>
  </li>
</ul>

<p><img src="https://d262ilb51hltx0.cloudfront.net/max/914/0*Qjf-7dLH9R7H-yOk.png" alt="icon" /></p>

<ul>
  <li>
    <p>分布式布局</p>

    <p>作富文本设计的时候，布局会变得非常重要，这项功能可以帮助你快速地试验不同的方案。</p>
  </li>
  <li>
    <p>网格</p>

    <p>其实可以把网格功能理解成按照纵横两个维度自动地结构化布局内容。这个对于排版布局而言，非常方便。</p>
  </li>
</ul>

<p><img src="https://d262ilb51hltx0.cloudfront.net/max/800/0*7TrwZwsBKN-hGLxk.jpeg" alt="icon" /></p>

<ul>
  <li>
    <p>出色的文字渲染</p>

    <p>Sketch的文字渲染引擎非常出色，可以用来做很出色的文字布局和字体设计。因此，你可以放心地放弃Photoshop的抗锯齿功能。</p>
  </li>
</ul>

<p><img src="https://d262ilb51hltx0.cloudfront.net/max/800/0*2wahLljvKwgbT_Ws.png" alt="icon" /></p>

<ul>
  <li>
    <p>CSS样式导出</p>

    <p>如果你在做一些网页设计，Sketch可以帮助你快速地把你的成果到处成CSS样式。</p>
  </li>
</ul>

<p><img src="https://d262ilb51hltx0.cloudfront.net/max/800/0*qgh086TCiTWrVOl9.png" alt="icon" /></p>

<p><img src="https://d262ilb51hltx0.cloudfront.net/max/800/0*NxQ0xvJylnXQbGVm.png" alt="icon" /></p>

<ul>
  <li>
    <p>旋转副本</p>

    <p>这是一项小功能，但是确实可以节约你很多时间和精力。</p>
  </li>
  <li>
    <p>Sketch Mirror</p>

    <p>Sketch Mirror是一个Universal App，可以方便你在iPhone或是iPad上查看自己的成果。（作者撰写这个文章的时候Sketch还没有推出官方的镜像工具，所以这一段是译者补充的）。</p>
  </li>
</ul>

<h4 id="section">快速响应是杀手锏</h4>

<p>Sketch是一个小团队，发展非常快速。简单扫一眼Sketch的升级日志，你会发现每一个更新都会带来新的功能。 我非常建议你去使用Beta版本，你会见证Sketch快速的升级。 Sketch团队非常善于聆听用户的诉求，因而软件不断地变得更好。你可以去tenderapp上向他们提出新功能的要求。</p>

<h4 id="section-1">相关链接</h4>

<p><a href="http://www.bohemiancoding.com/download/sketch.zip">下载试用版</a></p>

<p><a href="http://www.bohemiancoding.com/sketch/buy">Mac App Store下载地址</a></p>

<p><a href="http://blog.mengto.com/topic/sketch/">Ment To 的博文</a></p>

<p><a href="http://sketchtips.tumblr.com/">Sketch 技巧分享博客</a></p>

<p><a href="http://www.sketchappsources.com/">Sketch 资源下载</a></p>

<p><a href="http://www.douban.com/group/sketchapp/">Sketch 豆瓣中文小组</a></p>

<p><a href="http://community.sketchcn.com/">Sketch 中文社区</a></p>

<hr />
<p>原文来自<a href="http://jianshu.io/p/7e8905b18620">http://jianshu.io/p/7e8905b18620</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Genymotion模拟器]]></title>
    <link href="http://helloyokoy.github.io/blog/android-genymotion/"/>
    <updated>2015-09-04T19:48:35+08:00</updated>
    <id>http://helloyokoy.github.io/blog/android-genymotion</id>
    <content type="html"><![CDATA[<p>相信很多Android开发者一定受够了速度慢、体验差效率及其地下的官方模拟器了,自己在平时的开发中几乎是不会用模拟器的，等的时间太久了，但是在一些尺寸适配或是兼容性测试的时候没有足够多的机器进行测试，这个时候就必须得用模拟器来代替了。用的久了真的不堪忍受那龟速般的模拟器，好在今天发现了一款神级模拟器Genymotion，就像发现新大陆般喜爱，下面就来介绍下。</p>

<h4 id="genymotion">Genymotion简介</h4>
<p>Genymotion是一套完整的工具，它提供了Android虚拟环境。如果你没有物理机器，又不想忍受官方模拟器的折磨，Genymotion会是你非常不错的选择， 它简直就是开发者、测试人员、推销者甚至是游戏玩家的福音。</p>

<!--more-->

<p><img src="http://a1.jikexueyuan.com/home/201501/16/5bbe/54b88953518c6.jpg" alt="icon" /></p>

<p>Genymotion支持Windows、Linux和Mac OS，容易安装和使用，下面就然我们一起来体验神器给我们带来的快感吧。</p>

<h4 id="genymotion-1">Genymotion特性</h4>
<p>最好的Android模拟体验</p>

<ul>
  <li>
    <p>支持OpenGL加速，提供最好的3D性能体验</p>
  </li>
  <li>
    <p>可以从Google Play安装应用</p>
  </li>
  <li>
    <p>支持全屏并改善了使用感受</p>
  </li>
</ul>

<p>全控制</p>

<ul>
  <li>
    <p>可同时启动多个模拟器</p>
  </li>
  <li>
    <p>支持传感器管理，如电池状态、GPS、Accelerator加速器</p>
  </li>
  <li>
    <p>支持Shell控制模拟器</p>
  </li>
</ul>

<p>完全兼容ADB，您可以从主机控制您的模拟器</p>

<p>管理设备</p>

<ul>
  <li>
    <p>易安装</p>
  </li>
  <li>
    <p>兼容Microsoft Windows 32/64 bits, Mac OSX 10.5+ and Linux 32/64 bits</p>
  </li>
  <li>
    <p>可以配置模拟器参数，如屏幕分辨率、内存大小、CPU数量</p>
  </li>
  <li>
    <p>轻松下载、部署最新的Genymotion虚拟设备。</p>
  </li>
</ul>

<p>从Eclipse启动虚拟设备</p>

<ul>
  <li>使用Genymotion测试您的应用</li>
</ul>

<h4 id="section">安装与配置</h4>

<p>安装基本是一路next，虽然Genymotion是免费版的，但是要求注册个账号才可以配置模拟器，配置好启动真是神速啊。</p>

<h4 id="eclipse">Eclipse插件安装</h4>

<p>Genymotion还支持Eclipse IDE，这大大方便了我们使用Genymotion来开发应用。安装方式：</p>

<ul>
  <li>
    <p>启动Eclipse，Help-&gt;Install New Software…-&gt;Add</p>
  </li>
  <li>
    <p>填写一下信息：</p>

    <p>Name: Genymobile</p>

    <p>Location: http://plugins.genymotion.com/eclipse</p>
  </li>
</ul>

<p>接下来跟安装adt的流程一样，指导完成
最后附上官网地址：<a href="http://www.genymotion.com/">http://www.genymotion.com/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[技术学习态度]]></title>
    <link href="http://helloyokoy.github.io/blog/tech-learn/"/>
    <updated>2015-09-03T15:23:49+08:00</updated>
    <id>http://helloyokoy.github.io/blog/tech-learn</id>
    <content type="html"><![CDATA[<p>本文仅谈业余时间的技术学习，不谈工作中的要求。</p>

<p>技术固然要时时学习，因为更新快嘛，但对待技术上学什么，怎么花时间学，需要一个指导思想，否则浪费时间而且效果不好。</p>

<ol>
  <li>
    <p>抓住主干，而非细节
最近很火的一句话是“你不要用战术上的勤奋掩盖战略上的懒惰”。放到技术学习上就先主理解主干后关注枝叶，比如C++的好书很多，《Effective C++》和《Inside C++ Object Model》是好书，但它们都不是用来入门的，为什么? 因为它们不是主干，语言实现细节和各种坑你都了解了，碰到实际问题依然用不好C++。</p>
  </li>
  <li>
    <p>尽量不折腾
不去折腾那些不成熟的技术，尽量用较为成熟的技术。在一年多之前，我用AngularJS，MongoDB的时候把我可给坑惨了，所以我下决心如果不因为工作坚决不碰Go语言，Node.js，要学不如学Erlang。新技术应用场景不清晰，前景不清晰，生态环境弱，类库少，坑多不容易跳出来。简而言之就是风险大于收益。同理我也不喜欢用Linux而喜欢Mac，Vim的包也是别人弄好了直接install的。</p>
  </li>
</ol>

<!--more-->

<ol>
  <li>
    <p>尽量学习经典原理而不是浪费时间在细节上。
这一点条和第一点类似，多花时间学习抽象模式，设计原则，类型系统，看诸如《SICP》《The little schemer》《Essential of Programming Language》这种书，如果不是因为工作绝不浪费时间到《Dive into python》这种具体到语言细节的书上。</p>
  </li>
  <li>
    <p>尽量学习形而下的系统而不过多上升到形而上的思想上。上一点谈到了抽象模式和类型系统，但切不可单纯从思想上判断哪种语言一定好，哪种抽象模式就一定好，一定要结合形而下的系统综合看待，学习C语言就要随着OS学习，学习Lisp就随着编译器或分析器一起学习，学习Ruby或Python就跟着web开发来学习，通过某一类系统架构理解语言的优劣，通过语言来理解为何这么架构系统。</p>
  </li>
  <li>
    <p>学好那些通用技能。
比如：1，如何进行Debug，2，如何阅读源代码，3，如何进行基本性能监控，4，熟练用好自己的编辑器和*nix命令行，5，git技巧，6，项目管理能力，7，关系型数据库的知识。</p>
  </li>
</ol>

<hr />
<p>转载自 <a href="http://liusihao.com/post/64854832920/%E6%88%91%E5%AF%B9%E5%BE%85%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%80%81%E5%BA%A6">我对技术的态度</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby On Rails 快速学习]]></title>
    <link href="http://helloyokoy.github.io/blog/ruby-fast-learn/"/>
    <updated>2015-09-02T12:07:16+08:00</updated>
    <id>http://helloyokoy.github.io/blog/ruby-fast-learn</id>
    <content type="html"><![CDATA[<p>快速学习Ruby on Rails，这应该是个伪命题，没有什么事情是能够快速学习的，尤其是编程，而且是Rails这样极其复杂的框架，它由无数顶级高手成年累月的心血堆砌而成，融合了web开发领域内几乎全部的最佳实践。</p>

<p>如果想快速入门，那么其他一些人提过的 Rails Tutorial，或者 Rails for Zombies 都是很好的选择，但相信我，即便你能快速做出简单的网站，依旧会对整个开发环境和知识体系一头雾水，在面临现实世界的需求时往往会捉襟见肘，花费更多的时间来补充缺失的知识。</p>

<p>所以，我认为如果你的目的不是创业，而是学习的话，全面有效成体系地吸收知识是更好的选择，这方面，读书是最好的方式，不过市场上滥竽充数的书籍实在很多，对于新手来说，怎样用有限的时间读最合适的书，是很重要的。</p>

<p>我在学习和使用Ruby与Rails的过程中，读过大部分在Amazon排名靠前的相关书籍，当然有些不错的书，随着技术的进化，已经略显陈旧。以下给出的阅读列表，是在现在依然有效的选择：</p>

<!--more-->

<h4 id="section">起点阶段</h4>

<p>强烈建议至少具备如下知识后再开始Rails开发</p>

<h4 id="html-and-css">Html and CSS</h4>

<p>结构和样式不止是设计人员的事，web开发必须要熟悉Head First HTML与CSS（第2版）虽然已经出版了很久，但依然是最好的Html&amp;CSS入门书</p>

<h4 id="linux">Linux</h4>

<p>几乎所有的开发环境都严重依赖于GNU/Linux为主的命令行环境，因此需要学习linux的基本概念和操作</p>

<p>The Linux Command Line</p>

<p>目前最好的linux command line学习指南，生动，清晰，详细，无论是菜鸟还是多年的老手都能从中受益，远超过之前作为标准教材的practical guide to xx系列。No starch这个出版社既有延续至今的Hacker精神，也懂得如何发掘有趣的作者</p>

<h4 id="http-and-rest">HTTP and Rest</h4>

<p>Web开发对于Http的深入理解是必须的，另外Rails还使用Rest协议作为基本指导原则，所以需要深入理解Http和RestRESTful Web Services中文版 这本是目前为止最好的描述HTTP与Rest的作品，可以让你重新认识Web，更何况其中的示例是Ruby语言(因为这本书合著者是Sam Ruby)</p>

<h4 id="programming">Programming</h4>

<p>程序员修炼之道 这本书告诉你，如何做才能成为一个注重实效的程序员，涉及了非常多的理念和实践，虽然都不深入，但至少让你知道世界是什么样子的，是任何程序员最应该在新手阶段读的书，也是对整个业界影响最大的经典之一</p>

<h4 id="git-and-version-control">Git and Version Control</h4>

<p>版本控制在项目中是一开始就要使用的，不止是开发，一切事情都需要版本控制Pro Git 这本是迄今为止讲解Git最清楚最深入的书，对于新手，不建议看后面的实现原理，先读前几章了解概念和学习日常实践使用是最重要的</p>

<h4 id="ruby">Ruby</h4>

<p>如果只是在Rails中使用的Ruby，可以使用一些免费的快速入门教程，不过，系统地学习Ruby，可以了解到很多面向对象开发或函数式编程的思想，对于熟悉和掌握Rails帮助非常大Programming Ruby 1.9 公认的Ruby入门经典，不过对于新手来说，只推荐前半的入门部分，高阶内容可以稍后再来学习</p>

<h4 id="rails">Rails</h4>

<p>Learn Web Development with the Ruby on Rails Tutorial</p>

<p>最后是Rails自身的学习，这本书的最新版涵盖Rails4，是目前为止最好最完整的Rails入门教程，可以在线看，还有大量的视频搭配</p>

<h4 id="section-1">进阶阶段</h4>
<p>具备下面的知识，可以让你或多或少地理解Rails Way，并真正开始写出合格的Rails应用</p>

<h4 id="programming-1">Programming</h4>

<p>重构</p>

<p>这本”重构”是当年石破天惊的经典著作，讲解如何持续改进和让代码优雅干净，拥有直到现在还依然适用的价值，尤其为Ruby On Rails社区广泛接受，这本书有将其中的Java语言换成Ruby后的版本(重构(Ruby版) (豆瓣))</p>

<p>UNIX编程艺术</p>

<p>由公认的黑客领袖之一Eric S.Raymond撰写的这本书总结了长久以来的Unix领域中的设计和开发哲学，思想乃至文化体系，是了解Ruby和Rails诞生于其中的Unix黑客文化必不可少的读物</p>

<h4 id="ruby-1">Ruby</h4>

<p>深入理解Ruby，除了上边提到的Programming Ruby 1.9以及重构等通用编程书之外，还有以下几个选择</p>

<p>Ruby编程语言</p>

<p>Ruby之父松本行弘和O’Reilly的王牌作者合作，诞生了这本讲解Ruby最透彻的经典著作</p>

<p>Eloquent Ruby</p>

<p>Ruby社区的编程指南之一，介绍了Ruby社群的文化，品味和编程原则，强烈地反映了Ruby程序员的共同特质: 幽默，健谈，追求乐趣，热爱生活</p>

<h4 id="test">Test</h4>

<p>测试驱动开发(TDD)以及之后进化的行为驱动开发(BDD)是Ruby和Rails社群的核心文化之一，只有彻底理解并运用BDD，才是合格的Rails开发者</p>

<p>The RSpec Book</p>

<p>唯一的也是必读的BDD介绍作品，由RSpec核心成员撰写</p>

<p>Git</p>

<p>可以坚持把Pro Git的后半部分学习完，没有更深入和清楚的书了</p>

<p>CSS</p>

<p>CSS权威指南</p>

<p>Eric Meyer的CSS权威指南至今仍然是CSS2讲解最全面和最深入的参考书</p>

<p>Javascript and jQuery</p>

<p>Web开发的交互性会越来越多，Javascript已经成为了相当严肃的编程语言</p>

<p>JavaScript权威指南</p>

<p>目前最全面最好的Javascript学习书籍</p>

<p>jQuery基础教程 （第4版）</p>

<p>唯一尚可称得上紧跟jQuery发展脚步的学习指南</p>

<h4 id="rails-1">Rails</h4>

<p>Rails发展的实在太快了，最好的方法也许是跟踪在线文档，不过还是推荐这本</p>

<p>The Rails 4 Way</p>

<p>这本书的Rails 3版本讲解Rails的哲学和细节相当到位，不过Rails 4版本还没有出版，非常值得在今年3月份第一时间拿下它。</p>

<p>— More</p>

<p>上边的书籍都读过的话，可能你终于能了解到Rails背后涉及的概念和实践有多么庞大惊人，也了解到了还有多么深的知识鸿沟需要跨越，了解到了一切都还只是开始，不过值得庆幸的是，一切事情都需要个开始</p>

<hr />
<p>著作权归作者所有。</p>

<p>商业转载请联系作者获得授权，非商业转载请注明出处。</p>

<p>作者：李路</p>

<p>链接：http://www.zhihu.com/question/19552402/answer/22336708</p>

<p>来源：知乎</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android https请求no peer certificate解决方案]]></title>
    <link href="http://helloyokoy.github.io/blog/android-httpsqing-qiu-no-peer-certificatejie-jue-fang-an/"/>
    <updated>2015-08-12T16:30:44+08:00</updated>
    <id>http://helloyokoy.github.io/blog/android-httpsqing-qiu-no-peer-certificatejie-jue-fang-an</id>
    <content type="html"><![CDATA[<h3 id="section">解决方案一</h3>
<hr />

<p>写了一个自定义类继承SSLSocketFactory：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
</pre></td><td class="code"><pre><code class=""><span class="line">import java.io.IOException;
</span><span class="line">import java.net.Socket;
</span><span class="line">import java.net.UnknownHostException;
</span><span class="line">import java.security.KeyManagementException;
</span><span class="line">import java.security.KeyStore;
</span><span class="line">import java.security.KeyStoreException;
</span><span class="line">import java.security.NoSuchAlgorithmException;
</span><span class="line">import java.security.UnrecoverableKeyException;
</span><span class="line">
</span><span class="line">import javax.net.ssl.SSLContext;
</span><span class="line">import javax.net.ssl.TrustManager;
</span><span class="line">import javax.net.ssl.X509TrustManager;
</span><span class="line">
</span><span class="line">import org.apache.http.conn.ssl.SSLSocketFactory;
</span><span class="line">
</span><span class="line">public class SSLSocketFactoryEx extends SSLSocketFactory {
</span><span class="line">        
</span><span class="line">   SSLContext sslContext = SSLContext.getInstance("TLS");
</span><span class="line">        
</span><span class="line">   public SSLSocketFactoryEx(KeyStore truststore) 
</span><span class="line">                        throws NoSuchAlgorithmException, KeyManagementException,
</span><span class="line">                        KeyStoreException, UnrecoverableKeyException {
</span><span class="line">                super(truststore);
</span><span class="line">                
</span><span class="line">   TrustManager tm = new X509TrustManager() {
</span><span class="line">                        public java.security.cert.X509Certificate[] getAcceptedIssuers() {return null;}  
</span><span class="line">    
</span><span class="line">@Override  
</span><span class="line">public void checkClientTrusted(
</span><span class="line">   java.security.cert.X509Certificate[] chain, String authType)
</span><span class="line">                                            throws java.security.cert.CertificateException {}  
</span><span class="line">    
</span><span class="line">@Override  
</span><span class="line">public void checkServerTrusted(
</span><span class="line">   java.security.cert.X509Certificate[] chain, String authType)
</span><span class="line">                                            throws java.security.cert.CertificateException {}
</span><span class="line">        };  
</span><span class="line">        sslContext.init(null, new TrustManager[] { tm }, null);  
</span><span class="line">}  
</span><span class="line">    
</span><span class="line">@Override  
</span><span class="line">public Socket createSocket(Socket socket, String host, int port,boolean autoClose) throws IOException, UnknownHostException {  
</span><span class="line">  return sslContext.getSocketFactory().createSocket(socket, host, port,autoClose);  
</span><span class="line">}  
</span><span class="line">    
</span><span class="line">@Override  
</span><span class="line">public Socket createSocket() throws IOException {  
</span><span class="line">    return sslContext.getSocketFactory().createSocket();  
</span><span class="line">}  
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<!--more-->

<p>再来看看如何做回调：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class=""><span class="line">public static HttpClient getNewHttpClient() {  
</span><span class="line"> try {  
</span><span class="line">  KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());  
</span><span class="line">  trustStore.load(null, null);  
</span><span class="line">            
</span><span class="line">  SSLSocketFactory sf = new SSLSocketFactoryEx(trustStore);  
</span><span class="line">  sf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);  
</span><span class="line">    
</span><span class="line">  HttpParams params = new BasicHttpParams();  
</span><span class="line">  HttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);  
</span><span class="line">  HttpProtocolParams.setContentCharset(params, HTTP.UTF_8);  
</span><span class="line">    
</span><span class="line">  SchemeRegistry registry = new SchemeRegistry();  
</span><span class="line">  registry.register(new Scheme("http", PlainSocketFactory.getSocketFactory(), 80));  
</span><span class="line">  registry.register(new Scheme("https", sf, 443));  
</span><span class="line">    
</span><span class="line">  ClientConnectionManager ccm = new ThreadSafeClientConnManager(params, registry);   
</span><span class="line">   return new DefaultHttpClient(ccm, params);  
</span><span class="line">  } catch (Exception e) {  
</span><span class="line">   return new DefaultHttpClient();  
</span><span class="line">  }  
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>现在就可以拿这个HTTPClient去请求数据了</p>

<h3 id="section-1">解决方案二</h3>
<hr />

<p><a href="http://www.cnblogs.com/P_Chou/archive/2010/12/27/https-ssl-certification.html" title="Title">http://www.cnblogs.com/P_Chou/archive/2010/12/27/https-ssl-certification.html</a>讲的非常清楚https-ssl的认证过程，膜拜下该作者</p>

<p>1.浏览器访问https地址，保存提示的证书到本地，放到android项目中的assets目录。</p>

<p>2.导入证书，代码如下。</p>

<p>3.把证书添加为信任。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
</pre></td><td class="code"><pre><code class=""><span class="line">String requestHTTPSPage(String mUrl) {
</span><span class="line">  InputStream ins = null;
</span><span class="line">  String result = "";
</span><span class="line">  try {
</span><span class="line">    
</span><span class="line">   ins = context.getAssets().open("app_pay.cer"); //下载的证书放到项目中的assets目录中
</span><span class="line">   CertificateFactory cerFactory = CertificateFactory
</span><span class="line">                    .getInstance("X.509");
</span><span class="line">   Certificate cer = cerFactory.generateCertificate(ins);
</span><span class="line">   KeyStore keyStore = KeyStore.getInstance("PKCS12", "BC");
</span><span class="line">   keyStore.load(null, null);
</span><span class="line">   keyStore.setCertificateEntry("trust", cer);
</span><span class="line"> 
</span><span class="line">   SSLSocketFactory socketFactory = new SSLSocketFactory(keyStore);
</span><span class="line">   Scheme sch = new Scheme("https", socketFactory, 443);
</span><span class="line">   HttpClient mHttpClient = new DefaultHttpClient();
</span><span class="line">   mHttpClient.getConnectionManager().getSchemeRegistry()
</span><span class="line">                    .register(sch);
</span><span class="line"> 
</span><span class="line">  BufferedReader reader = null;
</span><span class="line">     try {
</span><span class="line">         Log.d(TAG, "executeGet is in,murl:" + mUrl);
</span><span class="line">         HttpGet request = new HttpGet();
</span><span class="line">         request.setURI(new URI(mUrl));
</span><span class="line">         HttpResponse response = mHttpClient.execute(request);
</span><span class="line">         if (response.getStatusLine().getStatusCode() != 200) {
</span><span class="line">            request.abort();
</span><span class="line">            return result;
</span><span class="line">         }
</span><span class="line"> 
</span><span class="line">  reader = new BufferedReader(new InputStreamReader(response
</span><span class="line">                        .getEntity().getContent()));
</span><span class="line">  StringBuffer buffer = new StringBuffer();
</span><span class="line">  String line = null;
</span><span class="line">  while ((line = reader.readLine()) != null) {
</span><span class="line">                    buffer.append(line);
</span><span class="line">  }
</span><span class="line">  result = buffer.toString();
</span><span class="line">  Log.d(TAG, "mUrl=" + mUrl + "\nresult = " + result);
</span><span class="line">  } catch (Exception e) {
</span><span class="line">    e.printStackTrace();
</span><span class="line">  } finally {
</span><span class="line">     if (reader != null) {
</span><span class="line">        reader.close();
</span><span class="line">     }
</span><span class="line"> }
</span><span class="line"> } catch (Exception e) {
</span><span class="line">   // TODO: handle exception
</span><span class="line"> } finally {
</span><span class="line">  
</span><span class="line">  try {
</span><span class="line">    if (ins != null)
</span><span class="line">       ins.close();
</span><span class="line">  } catch (IOException e) {
</span><span class="line">     e.printStackTrace();
</span><span class="line">  }
</span><span class="line">  }
</span><span class="line">  return result;
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MJExtension介绍]]></title>
    <link href="http://helloyokoy.github.io/blog/mjextensionjie-shao/"/>
    <updated>2015-08-10T10:35:13+08:00</updated>
    <id>http://helloyokoy.github.io/blog/mjextensionjie-shao</id>
    <content type="html"><![CDATA[<p><img src="https://camo.githubusercontent.com/7fb40e923eeafbf4a699b9c8a54f53d88f2a70b9/687474703a2f2f696d616765732e636e6974626c6f672e636f6d2f626c6f67323031352f3439373237392f3230313530352f3035313030343331363733363634312e706e67" alt="icon" title="icon" /></p>

<h2 id="mjextension">MJExtension</h2>

<blockquote>
  <p>The fastest, most convenient and most nonintrusive conversion between JSON and model.</p>
</blockquote>

<p>世界上转换速度最快、使用最简单方便的字典转模型框架</p>

<h2 id="getting-started">Getting Started【开始使用】</h2>

<h4 id="features">Features【能做什么】</h4>

<ul>
  <li>MJExtension是一套字典和模型之间互相转换的超轻量级框架</li>
  <li>JSON –&gt; Model、Core Data Model</li>
  <li>JSONString –&gt; Model、Core Data Model</li>
  <li>Model、Core Data Model –&gt; JSON</li>
  <li>JSON Array –&gt; Model Array、Core Data Model Array</li>
  <li>JSONString –&gt; Model Array、Core Data Model Array</li>
  <li>Model Array、Core Data Model Array –&gt; JSON Array</li>
  <li>Coding all properties of model in one line code.</li>
  <li>只需要一行代码，就能实现模型的所有属性进行Coding（归档和解档）</li>
</ul>

<!--more-->

<h4 id="why-use-mjextension-why-not-use-jsonmodel-or-mantle">Why use MJExtension, why not use JSONModel or Mantle</h4>

<h4 id="mjextension-is-faster-than-jsonmodel-and-mantle">MJExtension is faster than JSONModel and Mantle【转换速率】</h4>

<ul>
  <li>MJExtension &gt; JSONModel &gt; Mantle (Feel free to test it yourself)</li>
  <li>各位开发者也可以自行测试</li>
</ul>

<h4 id="mjextension-is-more-easy-to-gomjextension">MJExtension is more easy to go【MJExtension更加容易使用】</h4>

<ul>
  <li>
    <p>JSONModel</p>

    <ul>
      <li>You must let all model class extend JSONModel class</li>
      <li>要求所有模型类必须继承自JSONModel基类</li>
    </ul>
  </li>
  <li>
    <p>Mantle</p>

    <ul>
      <li>You must let all model class extend MTModel class.</li>
      <li>要求所有模型类必须继承自MTModel基类</li>
    </ul>
  </li>
  <li>
    <p>MJExtension</p>

    <ul>
      <li>Your model class doesn’t need to extend another base class. You don’t need to modify any model file. Nonintrusive, convenient.</li>
      <li>不需要你的模型类继承任何特殊基类，也不需要修改任何模型代码，毫无污染，毫无侵入性</li>
    </ul>
  </li>
</ul>

<h3 id="installation">Installation【安装】</h3>
<hr />

<h4 id="from-cocoapodscocoapods">From CocoaPods【使用CocoaPods】</h4>

<pre><code>pod 'MJExtension'
</code></pre>

<h4 id="manually">Manually【手动导入】</h4>

<ul>
  <li>Drag all source files under floder MJExtension to your project.【将MJExtension文件夹中的所有源代码拽入项目中】</li>
  <li>
    <p>Import the main header file：#import “MJExtension.h”【导入主头文件：#import “MJExtension.h”】</p>

    <pre><code>  MJExtension.h
  MJConst.h               MJConst.m
  MJFoundation.h          MJFoundation.m
  MJProperty.h            MJProperty.m
  MJType.h                MJType.m
  NSObject+MJCoding.h     NSObject+MJCoding.m
  NSObject+MJProperty.h   NSObject+MJProperty.m
  NSObject+MJKeyValue.h   NSObject+MJKeyValue.m
</code></pre>
  </li>
</ul>

<h3 id="examples">Examples【示例】</h3>
<hr />

<h4 id="the-most-simple-json---model">The most simple JSON -&gt; Model【最简单的字典转模型】</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
</pre></td><td class="code"><pre><code class=""><span class="line">typedef enum {
</span><span class="line">   SexMale,
</span><span class="line">   SexFemale
</span><span class="line">} Sex;
</span><span class="line">
</span><span class="line">@interface User : NSObject
</span><span class="line">@property (copy, nonatomic) NSString *name;
</span><span class="line">@property (copy, nonatomic) NSString *icon;
</span><span class="line">@property (assign, nonatomic) unsigned int age;
</span><span class="line">@property (copy, nonatomic) NSString *height;
</span><span class="line">@property (strong, nonatomic) NSNumber *money;
</span><span class="line">@property (assign, nonatomic) Sex sex;
</span><span class="line">@property (assign, nonatomic, getter=isGay) BOOL gay;
</span><span class="line">@end
</span><span class="line">
</span><span class="line">/***********************************************/
</span><span class="line">
</span><span class="line">NSDictionary *dict = @{
</span><span class="line">   @"name" : @"Jack",
</span><span class="line">   @"icon" : @"lufy.png",
</span><span class="line">   @"age" : @20,
</span><span class="line">   @"height" : @"1.55",
</span><span class="line">   @"money" : @100.9,
</span><span class="line">   @"sex" : @(SexFemale),
</span><span class="line">   @"gay" : @"true"
</span><span class="line">//   @"gay" : @"1"
</span><span class="line">//   @"gay" : @"NO"
</span><span class="line">};
</span><span class="line">
</span><span class="line">// JSON -&gt; User
</span><span class="line">User *user = [User objectWithKeyValues:dict];
</span><span class="line">
</span><span class="line">NSLog(@"name=%@, icon=%@, age=%zd, height=%@, money=%@, sex=%d, gay=%d", user.name, user.icon, user.age, user.height, user.money, user.sex, user.gay);
</span><span class="line">// name=Jack, icon=lufy.png, age=20, height=1.550000, money=100.9, sex=1</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="jsonstring---modeljson">JSONString -&gt; Model【JSON字符串转模型】</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">// 1.Define a JSONString
</span><span class="line">NSString *jsonString = @"{\"name\":\"Jack\", \"icon\":\"lufy.png\", \"age\":20}";
</span><span class="line">
</span><span class="line">// 2.JSONString -&gt; User
</span><span class="line">User *user = [User objectWithKeyValues:jsonString];
</span><span class="line">
</span><span class="line">// 3.Print user's properties
</span><span class="line">NSLog(@"name=%@, icon=%@, age=%d", user.name, user.icon, user.age);
</span><span class="line">// name=Jack, icon=lufy.png, age=20</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="model-contains-model">Model contains model【模型中嵌套模型】</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
</pre></td><td class="code"><pre><code class=""><span class="line">@interface Status : NSObject
</span><span class="line">@property (copy, nonatomic) NSString *text;
</span><span class="line">@property (strong, nonatomic) User *user;
</span><span class="line">@property (strong, nonatomic) Status *retweetedStatus;
</span><span class="line">@end
</span><span class="line">
</span><span class="line">/***********************************************/
</span><span class="line">
</span><span class="line">NSDictionary *dict = @{
</span><span class="line">   @"text" : @"Agree!Nice weather!",
</span><span class="line">   @"user" : @{
</span><span class="line">       @"name" : @"Jack",
</span><span class="line">       @"icon" : @"lufy.png"
</span><span class="line">   },
</span><span class="line">   @"retweetedStatus" : @{
</span><span class="line">       @"text" : @"Nice weather!",
</span><span class="line">       @"user" : @{
</span><span class="line">           @"name" : @"Rose",
</span><span class="line">           @"icon" : @"nami.png"
</span><span class="line">       }
</span><span class="line">   }
</span><span class="line">};
</span><span class="line">
</span><span class="line">// JSON -&gt; Status
</span><span class="line">Status *status = [Status objectWithKeyValues:dict];
</span><span class="line">
</span><span class="line">NSString *text = status.text;
</span><span class="line">NSString *name = status.user.name;
</span><span class="line">NSString *icon = status.user.icon;
</span><span class="line">NSLog(@"text=%@, name=%@, icon=%@", text, name, icon);
</span><span class="line">// text=Agree!Nice weather!, name=Jack, icon=lufy.png
</span><span class="line">
</span><span class="line">NSString *text2 = status.retweetedStatus.text;
</span><span class="line">NSString *name2 = status.retweetedStatus.user.name;
</span><span class="line">NSString *icon2 = status.retweetedStatus.user.icon;
</span><span class="line">NSLog(@"text2=%@, name2=%@, icon2=%@", text2, name2, icon2);
</span><span class="line">// text2=Nice weather!, name2=Rose, icon2=nami.png</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="model-contains-model-array">Model contains model-array【模型中有个数组属性，数组里面又要装着其他模型】</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
</pre></td><td class="code"><pre><code class=""><span class="line">@interface Ad : NSObject
</span><span class="line">@property (copy, nonatomic) NSString *image;
</span><span class="line">@property (copy, nonatomic) NSString *url;
</span><span class="line">@end
</span><span class="line">
</span><span class="line">@interface StatusResult : NSObject
</span><span class="line">/** Contatins status model */
</span><span class="line">@property (strong, nonatomic) NSMutableArray *statuses;
</span><span class="line">/** Contatins ad model */
</span><span class="line">@property (strong, nonatomic) NSArray *ads;
</span><span class="line">@property (strong, nonatomic) NSNumber *totalNumber;
</span><span class="line">@end
</span><span class="line">
</span><span class="line">/***********************************************/
</span><span class="line">
</span><span class="line">// Tell MJExtension what type model will be contained in statuses and ads.
</span><span class="line">[StatusResult setupObjectClassInArray:^NSDictionary *{
</span><span class="line">  return @{
</span><span class="line">                 @"statuses" : @"Status",
</span><span class="line">               // @"statuses" : [Status class],
</span><span class="line">               @"ads" : @"Ad"
</span><span class="line">               // @"ads" : [Ad class]
</span><span class="line">           };
</span><span class="line">}];
</span><span class="line">// Equals: StatusResult.m implements +objectClassInArray method.
</span><span class="line">
</span><span class="line">NSDictionary *dict = @{
</span><span class="line">   @"statuses" : @[
</span><span class="line">                      @{
</span><span class="line">                          @"text" : @"Nice weather!",
</span><span class="line">                          @"user" : @{
</span><span class="line">                              @"name" : @"Rose",
</span><span class="line">                              @"icon" : @"nami.png"
</span><span class="line">                          }
</span><span class="line">                      },
</span><span class="line">                      @{
</span><span class="line">                          @"text" : @"Go camping tomorrow!",
</span><span class="line">                          @"user" : @{
</span><span class="line">                              @"name" : @"Jack",
</span><span class="line">                              @"icon" : @"lufy.png"
</span><span class="line">                          }
</span><span class="line">                      }
</span><span class="line">                  ],
</span><span class="line">    @"ads" : @[
</span><span class="line">                 @{
</span><span class="line">                     @"image" : @"ad01.png",
</span><span class="line">                     @"url" : @"http://www.ad01.com"
</span><span class="line">                 },
</span><span class="line">                 @{
</span><span class="line">                     @"image" : @"ad02.png",
</span><span class="line">                     @"url" : @"http://www.ad02.com"
</span><span class="line">                 }
</span><span class="line">             ],
</span><span class="line">    @"totalNumber" : @"2014"
</span><span class="line">};
</span><span class="line">
</span><span class="line">// JSON -&gt; StatusResult
</span><span class="line">StatusResult *result = [StatusResult objectWithKeyValues:dict];
</span><span class="line">
</span><span class="line">NSLog(@"totalNumber=%@", result.totalNumber);
</span><span class="line">// totalNumber=2014
</span><span class="line">
</span><span class="line">// Printing
</span><span class="line">for (Status *status in result.statuses) {
</span><span class="line">    NSString *text = status.text;
</span><span class="line">    NSString *name = status.user.name;
</span><span class="line">    NSString *icon = status.user.icon;
</span><span class="line">    NSLog(@"text=%@, name=%@, icon=%@", text, name, icon);
</span><span class="line">}
</span><span class="line">// text=Nice weather!, name=Rose, icon=nami.png
</span><span class="line">// text=Go camping tomorrow!, name=Jack, icon=lufy.png
</span><span class="line">
</span><span class="line">// Printing
</span><span class="line">for (Ad *ad in result.ads) {
</span><span class="line">   NSLog(@"image=%@, url=%@", ad.image, ad.url);
</span><span class="line">}
</span><span class="line">// image=ad01.png, url=http://www.ad01.com
</span><span class="line">// image=ad02.png, url=http://www.ad02.com</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="model-name---json-key-mappingkey">Model name - JSON key mapping【模型中的属性名和字典中的key不相同(或者需要多级映射)】</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
</pre></td><td class="code"><pre><code class=""><span class="line">@interface Bag : NSObject
</span><span class="line">@property (copy, nonatomic) NSString *name;
</span><span class="line">@property (assign, nonatomic) double price;
</span><span class="line">@end
</span><span class="line">
</span><span class="line">@interface Student : NSObject
</span><span class="line">@property (copy, nonatomic) NSString *ID;
</span><span class="line">@property (copy, nonatomic) NSString *desc;
</span><span class="line">@property (copy, nonatomic) NSString *nowName;
</span><span class="line">@property (copy, nonatomic) NSString *oldName;
</span><span class="line">@property (copy, nonatomic) NSString *nameChangedTime;
</span><span class="line">@property (strong, nonatomic) Bag *bag;
</span><span class="line">@end
</span><span class="line">
</span><span class="line">/***********************************************/
</span><span class="line">
</span><span class="line">// How to map
</span><span class="line">[Student setupReplacedKeyFromPropertyName:^NSDictionary *{
</span><span class="line">   return @{
</span><span class="line">               @"ID" : @"id",
</span><span class="line">               @"desc" : @"desciption",
</span><span class="line">               @"oldName" : @"name.oldName",
</span><span class="line">               @"nowName" : @"name.newName",
</span><span class="line">               @"nameChangedTime" : @"name.info[1].nameChangedTime",
</span><span class="line">               @"bag" : @"other.bag"
</span><span class="line">           };
</span><span class="line">}];
</span><span class="line">// Equals: Student.m implements +replacedKeyFromPropertyName method.
</span><span class="line">
</span><span class="line">NSDictionary *dict = @{
</span><span class="line">    @"id" : @"20",
</span><span class="line">    @"desciption" : @"kids",
</span><span class="line">    @"name" : @{
</span><span class="line">        @"newName" : @"lufy",
</span><span class="line">        @"oldName" : @"kitty",
</span><span class="line">        @"info" : @[
</span><span class="line">                 @"test-data",
</span><span class="line">                 @{
</span><span class="line">                             @"nameChangedTime" : @"2013-08"
</span><span class="line">                         }
</span><span class="line">                  ]
</span><span class="line">  },
</span><span class="line">    @"other" : @{
</span><span class="line">        @"bag" : @{
</span><span class="line">            @"name" : @"a red bag",
</span><span class="line">            @"price" : @100.7
</span><span class="line">        }
</span><span class="line">    }
</span><span class="line">};
</span><span class="line">
</span><span class="line">// JSON -&gt; Student
</span><span class="line">Student *stu = [Student objectWithKeyValues:dict];
</span><span class="line">
</span><span class="line">// Printing
</span><span class="line">NSLog(@"ID=%@, desc=%@, oldName=%@, nowName=%@, nameChangedTime=%@",
</span><span class="line">      stu.ID, stu.desc, stu.oldName, stu.nowName, stu.nameChangedTime);
</span><span class="line">// ID=20, desc=kids, oldName=kitty, nowName=lufy, nameChangedTime=2013-08
</span><span class="line">NSLog(@"bagName=%@, bagPrice=%f", stu.bag.name, stu.bag.price);
</span><span class="line">// bagName=a red bag, bagPrice=100.700000</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="json-array---model-array">JSON array -&gt; model array【将一个字典数组转成模型数组】</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class=""><span class="line">NSArray *dictArray = @[
</span><span class="line">                         @{
</span><span class="line">                             @"name" : @"Jack",
</span><span class="line">                             @"icon" : @"lufy.png"
</span><span class="line">                         },
</span><span class="line">                         @{
</span><span class="line">                             @"name" : @"Rose",
</span><span class="line">                             @"icon" : @"nami.png"
</span><span class="line">                         }
</span><span class="line">                    ];
</span><span class="line">
</span><span class="line">// JSON array -&gt; User array
</span><span class="line">NSArray *userArray = [User objectArrayWithKeyValuesArray:dictArray];
</span><span class="line">
</span><span class="line">// Printing
</span><span class="line">for (User *user in userArray) {
</span><span class="line">   NSLog(@"name=%@, icon=%@", user.name, user.icon);
</span><span class="line">}
</span><span class="line">// name=Jack, icon=lufy.png
</span><span class="line">// name=Rose, icon=nami.png</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="model---json">Model -&gt; JSON【将一个模型转成字典】</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
</pre></td><td class="code"><pre><code class=""><span class="line">// New model
</span><span class="line">User *user = [[User alloc] init];
</span><span class="line">user.name = @"Jack";
</span><span class="line">user.icon = @"lufy.png";
</span><span class="line">
</span><span class="line">Status *status = [[Status alloc] init];
</span><span class="line">status.user = user;
</span><span class="line">status.text = @"Nice mood!";
</span><span class="line">
</span><span class="line">// Status -&gt; JSON
</span><span class="line">NSDictionary *statusDict = status.keyValues;
</span><span class="line">NSLog(@"%@", statusDict);
</span><span class="line">/*
</span><span class="line">{
</span><span class="line"> 	text = "Nice mood!";
</span><span class="line"> 	user =     {
</span><span class="line"> 	icon = "lufy.png";
</span><span class="line"> 	name = Jack;
</span><span class="line"> 	};
</span><span class="line">}
</span><span class="line">*/
</span><span class="line">
</span><span class="line">// More complex situation
</span><span class="line">Student *stu = [[Student alloc] init];
</span><span class="line">stu.ID = @"123";
</span><span class="line">stu.oldName = @"rose";
</span><span class="line">stu.nowName = @"jack";
</span><span class="line">stu.desc = @"handsome";
</span><span class="line">stu.nameChangedTime = @"2018-09-08";
</span><span class="line">
</span><span class="line">Bag *bag = [[Bag alloc] init];
</span><span class="line">bag.name = @"a red bag";
</span><span class="line">bag.price = 205;
</span><span class="line">stu.bag = bag;
</span><span class="line">
</span><span class="line">NSDictionary *stuDict = stu.keyValues;
</span><span class="line">NSLog(@"%@", stuDict);
</span><span class="line">/*
</span><span class="line">{
</span><span class="line">   ID = 123;
</span><span class="line">   bag =     {
</span><span class="line">        name = "\U5c0f\U4e66\U5305";
</span><span class="line">        price = 205;
</span><span class="line"> };
</span><span class="line">   desc = handsome;
</span><span class="line">   nameChangedTime = "2018-09-08";
</span><span class="line">   nowName = jack;
</span><span class="line">   oldName = rose;
</span><span class="line">}
</span><span class="line">*/</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="model-array---json-array">Model array -&gt; JSON array【将一个模型数组转成字典数组】</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class=""><span class="line">// New model array
</span><span class="line">User *user1 = [[User alloc] init];
</span><span class="line">user1.name = @"Jack";
</span><span class="line">user1.icon = @"lufy.png";
</span><span class="line">
</span><span class="line">User *user2 = [[User alloc] init];
</span><span class="line">user2.name = @"Rose";
</span><span class="line">user2.icon = @"nami.png";
</span><span class="line">
</span><span class="line">NSArray *userArray = @[user1, user2];
</span><span class="line">
</span><span class="line">// Model array -&gt; JSON array
</span><span class="line">NSArray *dictArray = [User keyValuesArrayWithObjectArray:userArray];
</span><span class="line">NSLog(@"%@", dictArray);
</span><span class="line">/*
</span><span class="line"> (
</span><span class="line"> {
</span><span class="line"> 	icon = "lufy.png";
</span><span class="line">	name = Jack;
</span><span class="line">},
</span><span class="line"> {
</span><span class="line"> 	icon = "nami.png";
</span><span class="line"> 	name = Rose;
</span><span class="line"> }
</span><span class="line">)
</span><span class="line">*/</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="core-data">Core Data</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class=""><span class="line">NSDictionary *dict = @{
</span><span class="line">                         @"name" : @"Jack",
</span><span class="line">                         @"icon" : @"lufy.png",
</span><span class="line">                         @"age" : @20,
</span><span class="line">                         @"height" : @1.55,
</span><span class="line">                         @"money" : @"100.9",
</span><span class="line">                         @"sex" : @(SexFemale),
</span><span class="line">                         @"gay" : @"true"
</span><span class="line">                     };
</span><span class="line">
</span><span class="line">// This demo just provide simple steps
</span><span class="line">NSManagedObjectContext *context = nil;
</span><span class="line">User *user = [User objectWithKeyValues:dict context:context];
</span><span class="line">
</span><span class="line">[context save:nil];</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="coding">Coding</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class=""><span class="line">#import "MJExtension.h"
</span><span class="line">
</span><span class="line">@implementation Bag
</span><span class="line">// NSCoding Implementation
</span><span class="line">MJCodingImplementation
</span><span class="line">@end
</span><span class="line">
</span><span class="line">/***********************************************/
</span><span class="line">
</span><span class="line">// what properties not to be coded
</span><span class="line">[Bag setupIgnoredCodingPropertyNames:^NSArray *{
</span><span class="line">   return @[@"name"];
</span><span class="line">}];
</span><span class="line">// Equals: Bag.m implements +ignoredCodingPropertyNames method.
</span><span class="line">
</span><span class="line">// Create model
</span><span class="line">Bag *bag = [[Bag alloc] init];
</span><span class="line">bag.name = @"Red bag";
</span><span class="line">bag.price = 200.8;
</span><span class="line">
</span><span class="line">NSString *file = [NSHomeDirectory() stringByAppendingPathComponent:@"Desktop/	bag.data"];
</span><span class="line">// Encoding
</span><span class="line">[NSKeyedArchiver archiveRootObject:bag toFile:file];
</span><span class="line">
</span><span class="line">// Decoding
</span><span class="line">Bag *decodedBag = [NSKeyedUnarchiver unarchiveObjectWithFile:file];
</span><span class="line">NSLog(@"name=%@, price=%f", decodedBag.name, decodedBag.price);
</span><span class="line">// name=(null), price=200.800000</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="camel---underline">Camel -&gt; underline【统一转换属性名（比如驼峰转下划线）】</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class=""><span class="line">// Dog
</span><span class="line">#import "MJExtension.h"
</span><span class="line">
</span><span class="line">@implementation Dog
</span><span class="line">+ (NSString *)replacedKeyFromPropertyName121:(NSString *)propertyName
</span><span class="line">{
</span><span class="line">   // nickName -&gt; nick_name
</span><span class="line">   return [propertyName underlineFromCamel];
</span><span class="line">}
</span><span class="line">@end
</span><span class="line">
</span><span class="line">// NSDictionary
</span><span class="line">NSDictionary *dict = @{
</span><span class="line">                       @"nick_name" : @"旺财",
</span><span class="line">                       @"sale_price" : @"10.5",
</span><span class="line">                       @"run_speed" : @"100.9"
</span><span class="line">                     };
</span><span class="line">// NSDictionary -&gt; Dog
</span><span class="line">Dog *dog = [Dog objectWithKeyValues:dict];
</span><span class="line">
</span><span class="line">// printing
</span><span class="line">NSLog(@"nickName=%@, scalePrice=%f runSpeed=%f", dog.nickName, dog.salePrice, dog.runSpeed);</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="nsstring---nsdate-nil---nsdatenil">NSString -&gt; NSDate, nil -&gt; @”“【过滤字典的值（比如字符串日期处理为NSDate、字符串nil处理为@”“）】</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class=""><span class="line">// Book
</span><span class="line">#import "MJExtension.h"
</span><span class="line">
</span><span class="line">@implementation Book
</span><span class="line">- (id)newValueFromOldValue:(id)oldValue property:(MJProperty *)property
</span><span class="line">{
</span><span class="line">  if ([property.name isEqualToString:@"publisher"]) {
</span><span class="line">        if (oldValue == nil) return @"";
</span><span class="line">  } else if (property.type.typeClass == [NSDate class]) {
</span><span class="line">        NSDateFormatter *fmt = [[NSDateFormatter alloc] init];
</span><span class="line">        fmt.dateFormat = @"yyyy-MM-dd";
</span><span class="line">        return [fmt dateFromString:oldValue];
</span><span class="line">  }
</span><span class="line">
</span><span class="line">  return oldValue;
</span><span class="line">}
</span><span class="line">@end
</span><span class="line">
</span><span class="line">// NSDictionary
</span><span class="line">NSDictionary *dict = @{
</span><span class="line">                       @"name" : @"5分钟突破iOS开发",
</span><span class="line">                       @"publishedTime" : @"2011-09-10"
</span><span class="line">                       };
</span><span class="line">// NSDictionary -&gt; Book
</span><span class="line">Book *book = [Book objectWithKeyValues:dict];
</span><span class="line">
</span><span class="line">// printing
</span><span class="line">NSLog(@"name=%@, publisher=%@, publishedTime=%@", book.name, book.publisher, book.publishedTime);</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="more-use-cases">More use cases【更多用法】</h3>

<ul>
  <li>Please reference to NSObject+MJKeyValue.h and NSObject+MJCoding.h</li>
  <li><a href="https://github.com/CoderMJLee/MJExtension" title="url">github地址</a></li>
</ul>
]]></content>
  </entry>
  
</feed>
