<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类：ios | BryanFu Blog]]></title>
  <link href="http://helloyokoy.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://helloyokoy.github.io/"/>
  <updated>2016-10-09T16:31:55+08:00</updated>
  <id>http://helloyokoy.github.io/</id>
  <author>
    <name><![CDATA[BryanFu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[vapor 用swift写服务端]]></title>
    <link href="http://helloyokoy.github.io/blog/vapor-swift-server/"/>
    <updated>2016-10-09T15:43:38+08:00</updated>
    <id>http://helloyokoy.github.io/blog/vapor-swift-server</id>
    <content type="html"><![CDATA[<p>自从苹果官方发布了一个 Swift 的 Linux 开源版本之后，服务端 Swift 终于迎来了一个令人激动的前景。我的好奇心终于无法克制，是时候尝试一下服务端 Swift 了！</p>

<p><a href="http://vapor.codes/">http://vapor.codes/</a></p>

<!--more-->

<p>官方教程如下</p>

<p><a href="https://vapor.github.io/documentation/getting-started/hello-world.html">https://vapor.github.io/documentation/getting-started/hello-world.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSPatch 介绍]]></title>
    <link href="http://helloyokoy.github.io/blog/jspatch/"/>
    <updated>2016-06-12T18:30:02+08:00</updated>
    <id>http://helloyokoy.github.io/blog/jspatch</id>
    <content type="html"><![CDATA[<h3 id="jspatch">什么是 JSPatch？</h3>

<p>JSPatch 是一个开源项目(<a href="https://github.com/bang590/JSPatch">Github链接</a>)，只需要在项目里引入极小的引擎文件，就可以使用 JavaScript 调用任何 Objective-C 的原生接口，替换任意 Objective-C 原生方法。目前主要用于下发 JS 脚本替换原生 Objective-C 代码，实时修复线上 bug。</p>

<!--more-->

<p>例如线上 APP 有一段代码出现 bug 导致 crash：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>@implementation JPTableViewController
</span><span class='line'>…
</span><span class='line'>- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
</span><span class='line'>{
</span><span class='line'>  NSString *content = self.dataSource[[indexPath row]];  //可能会超出数组范围导致crash
</span><span class='line'>  JPViewController *ctrl = [[JPViewController alloc] initWithContent:content];
</span><span class='line'>  [self.navigationController pushViewController:ctrl];
</span><span class='line'>}
</span><span class='line'>…
</span><span class='line'>@end&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<p>可以通过下发这样一段 JS 代码，覆盖掉原方法，修复这个 bug：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>//JS
</span><span class='line'>defineClass(“JPTableViewController”, {
</span><span class='line'>  //instance method definitions
</span><span class='line'>  tableView_didSelectRowAtIndexPath: function(tableView, indexPath) {
</span><span class='line'>    var row = indexPath.row()
</span><span class='line'>    if (self.dataSource().length &gt; row) {  //加上判断越界的逻辑
</span><span class='line'>      var content = self.dataArr()[row];
</span><span class='line'>      var ctrl = JPViewController.alloc().initWithContent(content);
</span><span class='line'>      self.navigationController().pushViewController(ctrl);
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}, {})&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<p>除了修复 bug，JSPatch 也可以用于动态运营，实时修改线上 APP 行为，或动态添加功能。JSPatch 详细使用文档见 Github Wiki。</p>

<h3 id="jspatch-">什么是 JSPatch 平台？</h3>

<p>JSPatch 需要使用者有一个后台可以下发和管理脚本，并且需要处理传输安全等部署工作，JSPatch 平台帮你做了这些事，提供了脚本后台托管，版本管理，保证传输安全等功能，让你无需搭建一个后台，无需关心部署操作，只需引入一个 SDK 即可立即使用 JSPatch。</p>

<h3 id="jspatch-sdk--github-">JSPatch SDK 与 github 上开源代码的关系？</h3>

<p>Github 开源的是 JSPatch 核心代码，使用完全免费自由，若打算自己搭建后台下发 JSPatch 脚本，可以直接使用 github 上的核心代码，与 JSPatch 平台上的 SDK 无关。JSPatch 平台的 SDK 在核心代码的基础上增加了向平台请求脚本/传输解密/版本管理等功能，只用于这个平台。</p>

<h3 id="jspatch--1">JSPatch 平台速度和稳定性如何？</h3>

<p>通过 JSPatch 平台上传的脚本文件都会保存在七牛云存储上，客户端 APP 只跟七牛服务器通讯，支持高并发，CDN分布全国，速度和稳定性有保证。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[swift开发库]]></title>
    <link href="http://helloyokoy.github.io/blog/swiftkai-fa-ku/"/>
    <updated>2016-06-05T18:50:01+08:00</updated>
    <id>http://helloyokoy.github.io/blog/swiftkai-fa-ku</id>
    <content type="html"><![CDATA[<ol>
  <li>CryptoSwift</li>
</ol>

<p>swift加密库, 支持md5,sha1,sha224,sha256…</p>

<p>github地址: <a href="https://github.com/krzyzanowskim/CryptoSwift">https://github.com/krzyzanowskim/CryptoSwift</a></p>

<p><img src="http://cc.cocimg.com/api/uploads/20160524/1464085348448948.jpg" alt="jpg" /></p>

<!--more-->

<ol>
  <li>Kingfisher</li>
</ol>

<p>Kingfisher 是一个异步下载和缓存图片的库 类似于SDWebImage</p>

<p>只不过它是纯Swift的实现</p>

<p>github地址：<a href="https://github.com/onevcat/Kingfisher">https://github.com/onevcat/Kingfisher</a></p>

<p><img src="http://cc.cocimg.com/api/uploads/20160524/1464085373992263.jpg" alt="jpg" /></p>

<ol>
  <li>PeekPop</li>
</ol>

<p>3DTouch动画组件</p>

<p>Peek和Pop是iPhone 6S和6S+上新增的一个很棒的iOS特性，可以很方便地使用3D touch来预览内容。</p>

<p>github地址：<a href="https://github.com/marmelroy/PeekPop">https://github.com/marmelroy/PeekPop</a></p>

<p><img src="http://cc.cocimg.com/api/uploads/20160524/1464085502558697.jpg" alt="jpg" /></p>

<p><img src="http://cc.cocimg.com/api/uploads/20160524/1464085641814017.gif" alt="jpg" /></p>

<ol>
  <li>AlamofireObjectMapper</li>
</ol>

<p>将Alamofire JSON响应数据 转为swift对象</p>

<p>github地址：<a href="https://github.com/tristanhimmelman/AlamofireObjectMapper">https://github.com/tristanhimmelman/AlamofireObjectMapper</a></p>

<p><img src="http://cc.cocimg.com/api/uploads/20160524/1464085537803735.jpg" alt="jpg" /></p>

<ol>
  <li>RxAlamofire</li>
</ol>

<p>为Alamofire提供 函数响应式（FRP）调用接口</p>

<p>以优雅的方式使用Alamofire进行网络请求</p>

<p>github地址：<a href="https://github.com/RxSwiftCommunity/RxAlamofire">https://github.com/RxSwiftCommunity/RxAlamofire</a></p>

<p><img src="http://cc.cocimg.com/api/uploads/20160524/1464085656633375.jpg" alt="jpg" /></p>

<ol>
  <li>PromiseKit</li>
</ol>

<p>异步编程类库 提供了很多实用的异步函数 让异步编程更简单</p>

<p>github地址：<a href="https://github.com/mxcl/PromiseKit">https://github.com/mxcl/PromiseKit</a></p>

<p><img src="http://cc.cocimg.com/api/uploads/20160524/1464085675411831.jpg" alt="jpg" /></p>

<p><img src="http://cc.cocimg.com/api/uploads/20160524/1464085698363881.jpg" alt="jpg" /></p>

<ol>
  <li>EZSwiftExtensions</li>
</ol>

<p>对Swift标准库， Foundation， UIKit 提供了很多高级扩展函数</p>

<p>包括以下内容：</p>

<p>NSObject</p>

<p>Bool</p>

<p>Int</p>

<p>Double</p>

<p>String</p>

<p>NSAttritedString</p>

<p>Array</p>

<p>Dictioanry</p>

<p>NSDate</p>

<p>NSTimer</p>

<p>CGRect</p>

<p>UIViewController</p>

<p>UIView</p>

<p>UITextView</p>

<p>UILabel</p>

<p>UIImageView</p>

<p>UIImage</p>

<p>Block Objects</p>

<p>UIDevice</p>

<p>NSUserDefauts</p>

<p>NSURL</p>

<p>EZ function and variables</p>

<p>github地址：<a href="https://github.com/goktugyil/EZSwiftExtensions">https://github.com/goktugyil/EZSwiftExtensions</a></p>

<p><img src="http://cc.cocimg.com/api/uploads/20160524/1464085719198231.jpg" alt="jpg" /></p>

<p><img src="http://cc.cocimg.com/api/uploads/20160524/1464085745420071.jpg" alt="jpg" /></p>

<ol>
  <li>Aspects</li>
</ol>

<p>swift面向切面编程（AOP）库 【Method Swizzling】</p>

<p>github地址：<a href="https://github.com/steipete/Aspects">https://github.com/steipete/Aspects</a></p>

<p><img src="http://cc.cocimg.com/api/uploads/20160524/1464085770599317.jpg" alt="jpg" /></p>

<ol>
  <li>PermissionScope</li>
</ol>

<p>权限管理库 提供申请权限授权操作</p>

<p>githubd地址：<a href="https://github.com/nickoneill/PermissionScope">https://github.com/nickoneill/PermissionScope</a></p>

<p><img src="http://cc.cocimg.com/api/uploads/20160524/1464085793901381.jpg" alt="" /></p>

<p><img src="http://cc.cocimg.com/api/uploads/20160524/1464085821147167.gif" alt="" /></p>

<p>10、Alamofire</p>

<p>网络操作库 基本都知道</p>

<p>github地址：<a href="https://github.com/Alamofire/Alamofire">https://github.com/Alamofire/Alamofire</a></p>

<hr />
<p>转载自<a href="http://www.cocoachina.com/swift/20160525/16437.html">http://www.cocoachina.com/swift/20160525/16437.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PromiseKit: 同时支持Objective-C和Swift的Promise类库]]></title>
    <link href="http://helloyokoy.github.io/blog/promisekit/"/>
    <updated>2016-03-07T18:33:15+08:00</updated>
    <id>http://helloyokoy.github.io/blog/promisekit</id>
    <content type="html"><![CDATA[<p>现代开发需要高度异步，开发工具所提供的异步编程功能是否强大、方便而又令人愉悦？PromiseKit是一款贴心的iOS异步开发类库，更同时支持Objective-C和Swift的promises完整实现。</p>

<p><img src="http://img.blog.csdn.net/20160308094646006" alt="PromiseKit" /></p>

<!--more-->

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>UIApplication.sharedApplication().networkActivityIndicatorVisible = true&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>when(fetchImage(), getLocation()).then { image, location in
</span><span class='line'>    self.imageView.image = image;
</span><span class='line'>    self.label.text = “Buy your cat a house in (location)”
</span><span class='line'>}.always {
</span><span class='line'>    UIApplication.sharedApplication().networkActivityIndicatorVisible = false
</span><span class='line'>}.error { error in
</span><span class='line'>    UIAlertView(…).show()
</span><span class='line'>}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<p>PromiseKit有几个版本，其作者Max Howell在README中表示，如果你正在编写一个库，那么使用PromiseKit 1.6；如果正在开发一款App，那么PromiseKit 3则是最好的选择。</p>

<hr />
<p>GitHub地址：<a href="https://github.com/mxcl/PromiseKit">https://github.com/mxcl/PromiseKit</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[wax 简介]]></title>
    <link href="http://helloyokoy.github.io/blog/wax-profile/"/>
    <updated>2016-01-06T11:47:10+08:00</updated>
    <id>http://helloyokoy.github.io/blog/wax-profile</id>
    <content type="html"><![CDATA[<blockquote>
  <p>开源Wax，Alibaba技术团队接力支持
还在为iOS发版受伤吗，无需发布Ａｐｐ新版本，动态修复线上问题的解决方案来了！</p>
</blockquote>

<h3 id="section">发版的痛</h3>

<p>去年无线Allin时每次手淘发版都需要经过个多月的煎熬，哪怕一个很小的需求改动也需要等待整个发版节奏。发版周期长、发版需求多、发版难是手淘这种超级app的特点，而审核时间长、升级速度慢、升级率低是App Store的通病，线上bug更是每个app都避免不了痛，而对于手淘亿级的UV来说，哪怕一个小小的bug都会影响成千上万的用户。对于这些困扰了多年的问题，急需一种无需发版即可动态修复线上问题的解决方案！</p>

<p><img src="http://img3.tbcdn.cn/L1/461/1/02ca09b2d15db2db0de408395e0dba1788b969f2?spm=5176.blog1480.yqblogcon1.5.aDhNu5" alt="img" /></p>

<p>Wax是什么？</p>

<p><img src="http://img4.tbcdn.cn/L1/461/1/aae0800e99288ec9f9516877fe69af2ce665c215?spm=5176.blog1480.yqblogcon1.6.aDhNu5" alt="img" /></p>

<p>还记得当年火爆无比的游戏《愤怒的小鸟》吗，它就是基于Wax框架编写的。Wax把Lua脚本语言与原生Objective-C底层runtime结合起来，使得你可以在Lua里面使用任何Objective-C类及框架。</p>

<h3 id="wax">为什么选择Wax？</h3>
<p><img src="http://img3.tbcdn.cn/L1/461/1/f1cbbd6b9c23b38ccd7783a9cf281d36033843a8?spm=5176.blog1480.yqblogcon1.7.aDhNu5" alt="logo" /></p>

<p>Lua是一个简洁、轻量、可扩展的脚本语言，它的体积小、速度快，在大量的游戏中使用，以实现游戏的可配置和可更新。我们可以把这个思路借鉴到app的开发中，由于Lua需要预先绑定很多C函数才可在脚本中使用，所以单独使用Lua无法做到高复用性。而Wax连接了Lua与Objective-C runtime，使得我们可以在Lua里调用和替换任意类的方法，甚至新增类、方法。这样一来就能在app不发布新版的情况下，通过远程下载脚本的方式修复线上app里的bug、甚至新增一些功能。</p>

<!--more-->

<h3 id="wax-1">我们对Wax做了什么改造？</h3>

<p>线程安全</p>

<p>Wax本身的设计的场景是针对主线程的UI等逻辑，当我们去替换一个会多线程异步调用的方法时就会出现crash，这样一来就会削弱修复的场景，所以我们给Wax在合适的地方进行多线程保护使其具有线程安全特性。</p>

<p>64位适配</p>

<p>从iPhone5s开始，苹果推出了64位cpu架构，从今年2月份开始陆续要求app必须支持64位。
Lua字节码也有32位与64位编译区分，所以原来的Wax stdlib库在64位无法运行，我们修改原有的Lua字节码打包逻辑使其能在64位正常运行。
Wax的核心逻辑是替换函数，但原思路利用了32位函数入栈的特性，导致此方法在64位彻底失效。为此我们重新寻找新的函数替换思路，确保在64位也能正常运行。</p>

<p>block传递、调用</p>

<p>在Objective-C中，block以其简洁、易用的特性使用越来越普遍，而Wax虽有Lua的closure却没有支持Lua与OC 的block互通，这会使我们无法修复带有block的方法，为此我们对block的原理进行彻底的分析，同时绞尽脑汁利用32\64位函数参数入栈的特性，最终支持高达7个参数（当然，也可以支持更多）的block传递、调用。</p>

<p>get/set私有成员变量</p>

<p>Wax支持属性的get/set，但似乎忽略了私有成员变量，而我们的代码大量使用了私有成员变量，所以必须支持。庆幸的是Objective-C runtime有操作私有成员变量的API，因此我们在上层对NSObject扩展一些get/set的方法就可以支持私有成员变量的操作了。</p>

<p>常用C函数</p>

<p>要想在Lua里调用C函数，只需要在C代码里注册一下即可，所以看起来支持C函数很简单。但如果我们要把OC框架里的常用的几十、几百个函数都要支持呢？人肉一个个的写显然会显得乏力。所以我们将OC框架里的函数从文档拷贝出然后用脚本预处理，再使用tolua++进行自动代码生成、绑定，这样一来即使支持更多C函数也很简单了。</p>

<p>Lua代码调试</p>

<p>编写简单的Lua代码，只需要几个print打点日志就可以判断逻辑的执行是否正确。但如果是量多、复杂的代码时，只能打日志就会很痛苦了。所以我们将开源届比较强大的Lua调试器ZeroBraneStudio引进，再配合mobdebug远程调试脚本，适配到Wax，就实现了Lua代码在Wax框架中的调试，支持常用的断点、单步，当然还有更方便的观察变量、显示调用栈、控制台调用等</p>

<p>bug修复</p>

<p>由于Wax从2013年就不再维护，而我们的使用场景又多、又复杂，所以也会发现里面的不少bug，当然也做了修复。</p>

<p>Hotpatch封装</p>

<p>Wax提供了基础的Lua运行能力，但真正应用时，还需要很多准备工作。所以我们封装了TBHotaptchSDK提供Lua字节码编译、代码和资源打包、加密、签名、校验、运行等功能。同时还封装了TBHotaptchService提供patch包的版本控制、更新、下载等功能。</p>

<h3 id="section-1">使用情况</h3>

<p>iOS的Hotpatch从去年5月份研发上线以来共发布patch 180多次，意味着修复手淘线上bug 100多个。集团有天猫、聚划算、支付宝、闲鱼、UC等近20个app接入。足以证明Hotpatch的强烈需求以及Wax的价值。</p>

<h3 id="section-2">为什么回馈开源？</h3>

<p>Wax从2013年初就不再被原作者维护了，而64位的出现使得Wax完全不可用，业界也希望有人来解决Wax的众多问题。我们虽对Wax做了很多改造，但最初也是吸收开源届的贡献，秉承开源的奉献精神，将我们付出的劳动再回馈给开源，希望重新激活Wax社区，重新打造一个强大的Wax。
很荣幸Wax的原作者在其github上改写了主页，将链接指向了Alibaba，这是对我们的一种莫大的肯定。</p>

<p><img src="http://img2.tbcdn.cn/L1/461/1/6b96757c6dd225e1f36d033256a5e8665bce62ed?spm=5176.blog1480.yqblogcon1.8.aDhNu5" alt="img" /></p>

<p>源码网址：<a href="https://github.com/alibaba/wax">https://github.com/alibaba/wax</a></p>

<p>来源：阿里巴巴技术协会（ATA）</p>
]]></content>
  </entry>
  
</feed>
