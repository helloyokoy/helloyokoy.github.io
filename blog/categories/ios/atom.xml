<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类：ios | BryanFu Blog]]></title>
  <link href="http://helloyokoy.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://helloyokoy.github.io/"/>
  <updated>2018-01-21T16:49:41+08:00</updated>
  <id>http://helloyokoy.github.io/</id>
  <author>
    <name><![CDATA[BryanFu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[swift 第三方库]]></title>
    <link href="http://helloyokoy.github.io/blog/swift-3-dot-0/"/>
    <updated>2016-11-01T23:03:06+08:00</updated>
    <id>http://helloyokoy.github.io/blog/swift-3-dot-0</id>
    <content type="html"><![CDATA[<ul>
  <li>awesome-swift</li>
</ul>

<p><a href="https://github.com/matteocrippa/awesome-swift">awesome-swift</a></p>

<ul>
  <li>Dollar</li>
</ul>

<blockquote>
  <p>操作数组的神器</p>
</blockquote>

<ul>
  <li>SwiftyDate</li>
</ul>

<blockquote>
  <p>处理 时间</p>
</blockquote>

<ul>
  <li>SwiftyJSON</li>
</ul>

<blockquote>
  <p>处理JSON</p>
</blockquote>

<ul>
  <li>ObjectMapper</li>
</ul>

<blockquote>
  <p>JSON 数据匹配</p>
</blockquote>

<ul>
  <li>Alamofire</li>
</ul>

<blockquote>
  <p>AFNetworking swift 版本</p>
</blockquote>

<ul>
  <li>SnapKit</li>
</ul>

<blockquote>
  <p>Masonry swift 版本</p>
</blockquote>

<ul>
  <li>Kingfisher</li>
</ul>

<blockquote>
  <p>图片下载</p>
</blockquote>

<ul>
  <li>HanekeSwift</li>
</ul>

<blockquote>
  <p>轻量级 cache</p>
</blockquote>

<ul>
  <li>TransitionTreasury</li>
</ul>

<blockquote>
  <p>viewController navigation 动画</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vapor 用swift写服务端]]></title>
    <link href="http://helloyokoy.github.io/blog/vapor-swift-server/"/>
    <updated>2016-10-09T15:43:38+08:00</updated>
    <id>http://helloyokoy.github.io/blog/vapor-swift-server</id>
    <content type="html"><![CDATA[<p><img src="https://cloud.githubusercontent.com/assets/1342803/15592871/46decfda-2375-11e6-9494-a9bf4e6aaebf.png" alt="vapor" /></p>

<p>自从苹果官方发布了一个 Swift 的 Linux 开源版本之后，服务端 Swift 终于迎来了一个令人激动的前景。我的好奇心终于无法克制，是时候尝试一下服务端 Swift 了！</p>

<p><a href="http://vapor.codes/">http://vapor.codes/</a></p>

<!--more-->

<p>官方教程如下</p>

<p><a href="https://vapor.github.io/documentation/getting-started/hello-world.html">https://vapor.github.io/documentation/getting-started/hello-world.html</a></p>

<p>GitHub</p>

<p><a href="https://github.com/vapor/vapor">https://github.com/vapor/vapor</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSPatch 介绍]]></title>
    <link href="http://helloyokoy.github.io/blog/jspatch/"/>
    <updated>2016-06-12T18:30:02+08:00</updated>
    <id>http://helloyokoy.github.io/blog/jspatch</id>
    <content type="html"><![CDATA[<h3 id="jspatch">什么是 JSPatch？</h3>

<p>JSPatch 是一个开源项目(<a href="https://github.com/bang590/JSPatch">Github链接</a>)，只需要在项目里引入极小的引擎文件，就可以使用 JavaScript 调用任何 Objective-C 的原生接口，替换任意 Objective-C 原生方法。目前主要用于下发 JS 脚本替换原生 Objective-C 代码，实时修复线上 bug。</p>

<!--more-->

<p>例如线上 APP 有一段代码出现 bug 导致 crash：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>@implementation JPTableViewController
</span><span class='line'>…
</span><span class='line'>- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
</span><span class='line'>{
</span><span class='line'>  NSString *content = self.dataSource[[indexPath row]];  //可能会超出数组范围导致crash
</span><span class='line'>  JPViewController *ctrl = [[JPViewController alloc] initWithContent:content];
</span><span class='line'>  [self.navigationController pushViewController:ctrl];
</span><span class='line'>}
</span><span class='line'>…
</span><span class='line'>@end&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<p>可以通过下发这样一段 JS 代码，覆盖掉原方法，修复这个 bug：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>//JS
</span><span class='line'>defineClass(“JPTableViewController”, {
</span><span class='line'>  //instance method definitions
</span><span class='line'>  tableView_didSelectRowAtIndexPath: function(tableView, indexPath) {
</span><span class='line'>    var row = indexPath.row()
</span><span class='line'>    if (self.dataSource().length &gt; row) {  //加上判断越界的逻辑
</span><span class='line'>      var content = self.dataArr()[row];
</span><span class='line'>      var ctrl = JPViewController.alloc().initWithContent(content);
</span><span class='line'>      self.navigationController().pushViewController(ctrl);
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}, {})&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<p>除了修复 bug，JSPatch 也可以用于动态运营，实时修改线上 APP 行为，或动态添加功能。JSPatch 详细使用文档见 Github Wiki。</p>

<h3 id="jspatch-">什么是 JSPatch 平台？</h3>

<p>JSPatch 需要使用者有一个后台可以下发和管理脚本，并且需要处理传输安全等部署工作，JSPatch 平台帮你做了这些事，提供了脚本后台托管，版本管理，保证传输安全等功能，让你无需搭建一个后台，无需关心部署操作，只需引入一个 SDK 即可立即使用 JSPatch。</p>

<h3 id="jspatch-sdk--github-">JSPatch SDK 与 github 上开源代码的关系？</h3>

<p>Github 开源的是 JSPatch 核心代码，使用完全免费自由，若打算自己搭建后台下发 JSPatch 脚本，可以直接使用 github 上的核心代码，与 JSPatch 平台上的 SDK 无关。JSPatch 平台的 SDK 在核心代码的基础上增加了向平台请求脚本/传输解密/版本管理等功能，只用于这个平台。</p>

<h3 id="jspatch--1">JSPatch 平台速度和稳定性如何？</h3>

<p>通过 JSPatch 平台上传的脚本文件都会保存在七牛云存储上，客户端 APP 只跟七牛服务器通讯，支持高并发，CDN分布全国，速度和稳定性有保证。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[swift开发库]]></title>
    <link href="http://helloyokoy.github.io/blog/swiftkai-fa-ku/"/>
    <updated>2016-06-05T18:50:01+08:00</updated>
    <id>http://helloyokoy.github.io/blog/swiftkai-fa-ku</id>
    <content type="html"><![CDATA[<ol>
  <li>CryptoSwift</li>
</ol>

<p>swift加密库, 支持md5,sha1,sha224,sha256…</p>

<p>github地址: <a href="https://github.com/krzyzanowskim/CryptoSwift">https://github.com/krzyzanowskim/CryptoSwift</a></p>

<p><img src="http://cc.cocimg.com/api/uploads/20160524/1464085348448948.jpg" alt="jpg" /></p>

<!--more-->

<ol>
  <li>Kingfisher</li>
</ol>

<p>Kingfisher 是一个异步下载和缓存图片的库 类似于SDWebImage</p>

<p>只不过它是纯Swift的实现</p>

<p>github地址：<a href="https://github.com/onevcat/Kingfisher">https://github.com/onevcat/Kingfisher</a></p>

<p><img src="http://cc.cocimg.com/api/uploads/20160524/1464085373992263.jpg" alt="jpg" /></p>

<ol>
  <li>PeekPop</li>
</ol>

<p>3DTouch动画组件</p>

<p>Peek和Pop是iPhone 6S和6S+上新增的一个很棒的iOS特性，可以很方便地使用3D touch来预览内容。</p>

<p>github地址：<a href="https://github.com/marmelroy/PeekPop">https://github.com/marmelroy/PeekPop</a></p>

<p><img src="http://cc.cocimg.com/api/uploads/20160524/1464085502558697.jpg" alt="jpg" /></p>

<p><img src="http://cc.cocimg.com/api/uploads/20160524/1464085641814017.gif" alt="jpg" /></p>

<ol>
  <li>AlamofireObjectMapper</li>
</ol>

<p>将Alamofire JSON响应数据 转为swift对象</p>

<p>github地址：<a href="https://github.com/tristanhimmelman/AlamofireObjectMapper">https://github.com/tristanhimmelman/AlamofireObjectMapper</a></p>

<p><img src="http://cc.cocimg.com/api/uploads/20160524/1464085537803735.jpg" alt="jpg" /></p>

<ol>
  <li>RxAlamofire</li>
</ol>

<p>为Alamofire提供 函数响应式（FRP）调用接口</p>

<p>以优雅的方式使用Alamofire进行网络请求</p>

<p>github地址：<a href="https://github.com/RxSwiftCommunity/RxAlamofire">https://github.com/RxSwiftCommunity/RxAlamofire</a></p>

<p><img src="http://cc.cocimg.com/api/uploads/20160524/1464085656633375.jpg" alt="jpg" /></p>

<ol>
  <li>PromiseKit</li>
</ol>

<p>异步编程类库 提供了很多实用的异步函数 让异步编程更简单</p>

<p>github地址：<a href="https://github.com/mxcl/PromiseKit">https://github.com/mxcl/PromiseKit</a></p>

<p><img src="http://cc.cocimg.com/api/uploads/20160524/1464085675411831.jpg" alt="jpg" /></p>

<p><img src="http://cc.cocimg.com/api/uploads/20160524/1464085698363881.jpg" alt="jpg" /></p>

<ol>
  <li>EZSwiftExtensions</li>
</ol>

<p>对Swift标准库， Foundation， UIKit 提供了很多高级扩展函数</p>

<p>包括以下内容：</p>

<p>NSObject</p>

<p>Bool</p>

<p>Int</p>

<p>Double</p>

<p>String</p>

<p>NSAttritedString</p>

<p>Array</p>

<p>Dictioanry</p>

<p>NSDate</p>

<p>NSTimer</p>

<p>CGRect</p>

<p>UIViewController</p>

<p>UIView</p>

<p>UITextView</p>

<p>UILabel</p>

<p>UIImageView</p>

<p>UIImage</p>

<p>Block Objects</p>

<p>UIDevice</p>

<p>NSUserDefauts</p>

<p>NSURL</p>

<p>EZ function and variables</p>

<p>github地址：<a href="https://github.com/goktugyil/EZSwiftExtensions">https://github.com/goktugyil/EZSwiftExtensions</a></p>

<p><img src="http://cc.cocimg.com/api/uploads/20160524/1464085719198231.jpg" alt="jpg" /></p>

<p><img src="http://cc.cocimg.com/api/uploads/20160524/1464085745420071.jpg" alt="jpg" /></p>

<ol>
  <li>Aspects</li>
</ol>

<p>swift面向切面编程（AOP）库 【Method Swizzling】</p>

<p>github地址：<a href="https://github.com/steipete/Aspects">https://github.com/steipete/Aspects</a></p>

<p><img src="http://cc.cocimg.com/api/uploads/20160524/1464085770599317.jpg" alt="jpg" /></p>

<ol>
  <li>PermissionScope</li>
</ol>

<p>权限管理库 提供申请权限授权操作</p>

<p>githubd地址：<a href="https://github.com/nickoneill/PermissionScope">https://github.com/nickoneill/PermissionScope</a></p>

<p><img src="http://cc.cocimg.com/api/uploads/20160524/1464085793901381.jpg" alt="" /></p>

<p><img src="http://cc.cocimg.com/api/uploads/20160524/1464085821147167.gif" alt="" /></p>

<p>10、Alamofire</p>

<p>网络操作库 基本都知道</p>

<p>github地址：<a href="https://github.com/Alamofire/Alamofire">https://github.com/Alamofire/Alamofire</a></p>

<hr />
<p>转载自<a href="http://www.cocoachina.com/swift/20160525/16437.html">http://www.cocoachina.com/swift/20160525/16437.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PromiseKit: 同时支持Objective-C和Swift的Promise类库]]></title>
    <link href="http://helloyokoy.github.io/blog/promisekit/"/>
    <updated>2016-03-07T18:33:15+08:00</updated>
    <id>http://helloyokoy.github.io/blog/promisekit</id>
    <content type="html"><![CDATA[<p>现代开发需要高度异步，开发工具所提供的异步编程功能是否强大、方便而又令人愉悦？PromiseKit是一款贴心的iOS异步开发类库，更同时支持Objective-C和Swift的promises完整实现。</p>

<p><img src="http://img.blog.csdn.net/20160308094646006" alt="PromiseKit" /></p>

<!--more-->

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>UIApplication.sharedApplication().networkActivityIndicatorVisible = true&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>when(fetchImage(), getLocation()).then { image, location in
</span><span class='line'>    self.imageView.image = image;
</span><span class='line'>    self.label.text = “Buy your cat a house in (location)”
</span><span class='line'>}.always {
</span><span class='line'>    UIApplication.sharedApplication().networkActivityIndicatorVisible = false
</span><span class='line'>}.error { error in
</span><span class='line'>    UIAlertView(…).show()
</span><span class='line'>}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<p>PromiseKit有几个版本，其作者Max Howell在README中表示，如果你正在编写一个库，那么使用PromiseKit 1.6；如果正在开发一款App，那么PromiseKit 3则是最好的选择。</p>

<hr />
<p>GitHub地址：<a href="https://github.com/mxcl/PromiseKit">https://github.com/mxcl/PromiseKit</a></p>
]]></content>
  </entry>
  
</feed>
