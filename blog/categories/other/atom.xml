<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类：other | BryanFu Blog]]></title>
  <link href="http://helloyokoy.github.io/blog/categories/other/atom.xml" rel="self"/>
  <link href="http://helloyokoy.github.io/"/>
  <updated>2015-11-05T15:00:27+08:00</updated>
  <id>http://helloyokoy.github.io/</id>
  <author>
    <name><![CDATA[BryanFu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何成为一个优秀的初级开发者]]></title>
    <link href="http://helloyokoy.github.io/blog/how-to-become-a-developer/"/>
    <updated>2015-11-04T16:49:15+08:00</updated>
    <id>http://helloyokoy.github.io/blog/how-to-become-a-developer</id>
    <content type="html"><![CDATA[<p>原文: <a href="http://blog.newrelic.com/2014/04/23/better-junior-developer/">http://blog.newrelic.com/2014/04/23/better-junior-developer/</a></p>

<p>翻译: <a href="https://ruby-china.org/mr_sun">@mr_sun</a></p>

<p>在过去的几年中，New Relic聘请了许多接受过各种编程培训的或者“非传统”编程背景的毕业生，其中就包括我！事实上，在我获得我的学士学位以后，我想要进入一所医药大学做进一步的学习，但是这时我获得了Google提供的一份技术支持的工作。在四年多以后我利用一个休假的时间出席了Hackbright Academy，这是个教女性学员如何编程的学校，课程安排为十周（现在延长到了十二周）。在第一周教学即将结束的时候，我知道我终于找到了我想要专注一生去追求的事业和方向。</p>

<p>不过，我的一个最大的忧虑是，我必须放弃我在其他领域已经积累起来的经验和技巧，去进入到一个全新的领域，在这个新领域里，我将面对的竞争对手都是拥有该领域几十年经验的资深工作者。幸运的是，在我真正进入到这样一个新角色以后，在共同工作的许多优秀的前辈的指导和帮助下，我总结出了一下一些自己的感悟：
- 不断地学习是成为一个优秀开发者的必备基石
- 有很多工程，是不是直接就开始写代码的</p>

<p>要清晰的认识到，即便作为一个还有很多东西要学的初级开发者，也有很多方法来利用我已经在其他领域已具备的技能。因为自己已经经历过那样一段对自己很不确定的时期，这里我想要向大家传播以下两条信息：
- 初级开发者：即使你还在学习关于编程的基本技巧，你也可以有很多方式为你的团队做出自己的贡献。
- mentor：因材施教，换位思考，让你的指导更加符合初级开发者的学习需要，这样将使他们更有自信，使你的指导更具效率。</p>

<!--more-->

<h2 id="section">有很多要学</h2>

<p>作为一个初级开发者，你将面临有太多东西要学的挑战，这时，重要的是不要试图所有东西都靠自己去解决，这里有三种方法可以采用：</p>

<ol>
  <li>
    <p>找到想要帮助你的人</p>

    <p>通过在你所在的团队或者结识其他编程团队，你可以扩展在你遇到问题时能为你提供帮助的网络人群。为了充分的利用网络资源，有一点很重要，就是面对一个问题，你需要先尽自己努力去探究，如此而不解，再去询问别人，这也是珍惜别人时间的一种表现。对于一个初级开发者，如果你在遇到问题时先自己做很多研究，那么你将会更快的学到更多的东西（这个过程中Google and StackOverflow将成为你的好朋友，为你提供很多的帮助）。这也会让你那些经验丰富的同事觉得他们对你的指导更有帮助，让他们更相信在下一次你遇到同样问题时你会充分利用他们给予你的建议和指导。</p>
  </li>
  <li>
    <p>让别人更容易帮助到你</p>

    <p>当你自己找不到合适的方式来描述你遇到的问题时，将更难于让别人理解你到底困惑在哪里。以下是一些我在遇到问题时喜欢使用的提问格式：</p>

    <p>我在尝试__<strong>，这样我就可以</strong>__</p>

    <p>我在____遇到了问题</p>

    <p>我已经查看了__<strong>并且试过了</strong>__</p>

    <p>举个例子，这是我最近一次用以上格式提问：“我试图要理解为什么这个账号登录时会出现这个banner，这样我就能告诉客户他们是否需要关注该警告。我在查看一个问题时找到了这个记录，我检查过了模型，并试图在本地将问题重现”。</p>
  </li>
  <li>
    <p>缩小你要学习的范围</p>

    <p>这就像在你解决一个棘手的技术问题时，你应该尽量将可能存在问题的范围缩小，以使的问题不至于过于繁杂。可能你想要弄明白的问题有太多太多，但是有经验的指导者可以告诉你哪些重要哪些不重要，给你分析这些问题的优先顺序（我的个人目标：真正自己独立的创建一个Rails App）。</p>
  </li>
</ol>

<h2 id="section-1">帮助你的团队</h2>

<p>作为一个初级开发者，你很自然会这样问自己：我本还需要这么多的帮助，又该怎样为我的团队贡献自己的力量呢？要记住，这世界上，开发的岗位永远要比开发人员多。所以并不需要在高效（高级开发人员）和低效（初级开发人员）做出选择，而是在于是否有相应的应用需要开发人员来做。记住以下这些策略将有助于反馈，调整你所写的代码</p>

<ol>
  <li>
    <p>提出好的问题</p>

    <p>我喜欢站在初级开发者的角度开考虑问题，提出好的问题，比如“我们是否在做一件正确的事？”这样可以帮助团队尽早发现错误的引导和假设。这样将避免在开发后期发现这些问题所将浪费大量的时间，所以要尽早提出好的问题。</p>
  </li>
  <li>
    <p>给出好的反馈</p>

    <p>将有用的反馈在合适的场合合适的时间给到正确的人，这对很对人来说并非易事。但是所有的公司都有其专门的反馈部门，因而即使初级开发者也有可能有机会获得大量参与反馈工作的机会。你也可以帮助预测来自于销售或者技术支持部门的关于产品新版本或产品更新的一些冲突。</p>
  </li>
  <li>
    <p>使你的团队面对其他团队表现的更好</p>

    <p>通过对你们所合作的团队投入更多的回应与热情，将使你的团队走的更远。有一种很好的方式来使你的团队在其他合作团队面前表现的更好，就是尽可能的向他们展示你们公司的产品特点。你可以有机会展示你的团队已经充分考虑了一些方面对其他团队的影响，比如可靠性。我几乎总是提前写好脚本并对整个流程作好足够的练习，以此来确保我的演示更加高效同时在演示过程中尽可能少的出错。</p>
  </li>
</ol>

<h2 id="section-2">指导者要怎样才能更好的帮助初级开发者</h2>

<p>以上的建议是专门针对初级开发者的，而对于导师来说，要更好的帮助初级开发者，使他们感觉到自己的价值和意识到自己为团队做出贡献的能力，也有很多事情可做。我很感兴趣于探讨如何让初级开发者的学习风格与有经验者的指导更好的磨合和匹配，以达到更好的效果。以此来保证每个人的时间都能被充分高效的利用，无论开发者还是指导者。举个例子，你可以探讨一个初级开发者希望以怎样的频率收到反馈和指示，以及高级开发者在什么时间什么情况下愿意被问题打断。</p>

<p>同时，作为一个高级开发者也就是mentor，如果你想让初级开发者在一个问题上自己思考更多以此来让他学习更多东西，那么你需要让他知道你的目的。这样是为了避免初级开发者出现过多不自信的消极情绪，因为他们会误以为他们所提出的是一个很简单的问题，但事实上尽管那本是个很复杂的问题，这种误解会让他们怀疑自己的能力，而变得不自信。</p>

<h2 id="section-3">结论</h2>

<p>一个初级开发者在第一份工作中就如同一张白纸。有许多机会可以通过共同工作的高级开发者的一些技术指导来使他们可以快速提升并且让他们感觉到从第一天工作就能创造价值。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[技术学习态度]]></title>
    <link href="http://helloyokoy.github.io/blog/tech-learn/"/>
    <updated>2015-11-03T15:23:49+08:00</updated>
    <id>http://helloyokoy.github.io/blog/tech-learn</id>
    <content type="html"><![CDATA[<p>本文仅谈业余时间的技术学习，不谈工作中的要求。</p>

<p>技术固然要时时学习，因为更新快嘛，但对待技术上学什么，怎么花时间学，需要一个指导思想，否则浪费时间而且效果不好。</p>

<ol>
  <li>
    <p>抓住主干，而非细节
最近很火的一句话是“你不要用战术上的勤奋掩盖战略上的懒惰”。放到技术学习上就先主理解主干后关注枝叶，比如C++的好书很多，《Effective C++》和《Inside C++ Object Model》是好书，但它们都不是用来入门的，为什么? 因为它们不是主干，语言实现细节和各种坑你都了解了，碰到实际问题依然用不好C++。</p>
  </li>
  <li>
    <p>尽量不折腾
不去折腾那些不成熟的技术，尽量用较为成熟的技术。在一年多之前，我用AngularJS，MongoDB的时候把我可给坑惨了，所以我下决心如果不因为工作坚决不碰Go语言，Node.js，要学不如学Erlang。新技术应用场景不清晰，前景不清晰，生态环境弱，类库少，坑多不容易跳出来。简而言之就是风险大于收益。同理我也不喜欢用Linux而喜欢Mac，Vim的包也是别人弄好了直接install的。</p>
  </li>
</ol>

<!--more-->

<ol>
  <li>
    <p>尽量学习经典原理而不是浪费时间在细节上。
这一点条和第一点类似，多花时间学习抽象模式，设计原则，类型系统，看诸如《SICP》《The little schemer》《Essential of Programming Language》这种书，如果不是因为工作绝不浪费时间到《Dive into python》这种具体到语言细节的书上。</p>
  </li>
  <li>
    <p>尽量学习形而下的系统而不过多上升到形而上的思想上。上一点谈到了抽象模式和类型系统，但切不可单纯从思想上判断哪种语言一定好，哪种抽象模式就一定好，一定要结合形而下的系统综合看待，学习C语言就要随着OS学习，学习Lisp就随着编译器或分析器一起学习，学习Ruby或Python就跟着web开发来学习，通过某一类系统架构理解语言的优劣，通过语言来理解为何这么架构系统。</p>
  </li>
  <li>
    <p>学好那些通用技能。
比如：1，如何进行Debug，2，如何阅读源代码，3，如何进行基本性能监控，4，熟练用好自己的编辑器和*nix命令行，5，git技巧，6，项目管理能力，7，关系型数据库的知识。</p>
  </li>
</ol>

<hr />
<p>转载自 <a href="http://liusihao.com/post/64854832920/%E6%88%91%E5%AF%B9%E5%BE%85%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%80%81%E5%BA%A6">我对技术的态度</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[优雅转身]]></title>
    <link href="http://helloyokoy.github.io/blog/turn-around-stay-grace/"/>
    <updated>2015-05-05T13:20:11+08:00</updated>
    <id>http://helloyokoy.github.io/blog/turn-around-stay-grace</id>
    <content type="html"><![CDATA[<p>编者按：本文由著名VC GRP合伙人Mark Suster撰写，非常值得一读，以下为正文部分：</p>

<p>在我第一次创业的时候我非常好斗。在我看来整个世界好像就是一个战场，我无时无刻不在准备着战斗。与房东斗，与债主斗，与董事会斗，与各个你所能想到的群体斗。但是随着我不断的成长，我越来越发现找到一个共同点比不断的斗争更有好处。</p>

<p>有两个人经常在我身旁尽最大的努力让我冷却下来，他们是我的COO Stuart Lander和CFO David Lapter。Stuart也有些好斗因子，但是之前做过律师的他懂得谈判与和解比打一场持久的战斗要好的多。我记得我们经常达成的一条共识就是——如果一定要转身，那么就优雅的转身。于是我形成了自己的一个思想：如果我要去战斗，那么我会如虎如狼直至胜利；但是如果一定要转身，那么我也将优雅从容的转身。</p>

<!--more-->

<p>虽然你觉得不符合常理，但是许多人就喜欢在转身放弃时令各方都不愉快。</p>

<p>这类人往往没有意识到：你转身放弃已经意味着你失败了一次，如果你还在转身的那一瞬间弄得大家都发指，那么你不仅已经失败了两次而且还让别人在背后骂你混蛋彻底毁掉你的形象。</p>

<p>公司的日常运营中就有许多类似的情况需要智慧处理。打个比方，你公司的一位高层员工要求加薪，而你不太喜欢他提出加薪的方式。你有许多种选择：礼貌拒绝，妥协答应。当然这不是本文的重点。本文想说的重点就是如果你确实打算妥协加薪，那么不要表现的像个怒发鬼或者小气鬼，你应该衷心的表达你对他们优秀工作的谢意。最差却又有许多人经常造成的后果就是自己给员工加了薪却还让员工指指骂骂。</p>

<p>需要优雅转身的情况太多了，朋友们可以各种去想。</p>

<p>今天下午发生的一件事就再次让我想到了人们是如何失败两次的：</p>

<blockquote>
  <p>我住的酒店有两个游泳池，一个大人专用，一个允许小孩用。但是不幸的是小孩经常两边窜。我们打算去游泳的时候大人专用泳池就宣布暂时关闭，据说原因是有个小孩在里面拉了粑粑。我想既然已经拉了，你还有什么办法呢？
可是这时我边上的一位女士就不答应了。她嘟嘟嚷嚷着拉了粑粑也可以游泳，说：“一点小孩的粑粑不会伤害任何人吧？”我可以毫不夸张的说她在那里吵吵闹闹有半个小时。很明显，这位女士失败了两次，第一次是没游上泳，第二次是因为没游上泳引发的怒发冲冠。
就像在高速路上有车子突然插到你前面去一样，你又能做什么呢？再插到他前面去？和他飙车？那你自己也是在玩命。</p>
</blockquote>

<p>生活中有许多事你要是走错了路，你就失败了两次。想清楚战斗和转身的不同。该战斗的时候就战斗，该转身的时候就转身，而且请务必保持优雅。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MarkDown语法]]></title>
    <link href="http://helloyokoy.github.io/blog/markdownyu-fa/"/>
    <updated>2014-06-09T15:07:14+08:00</updated>
    <id>http://helloyokoy.github.io/blog/markdownyu-fa</id>
    <content type="html"><![CDATA[<h3 id="word">1. 标题设置（让字体变大，和word的标题意思一样）</h3>

<p>在Markdown当中设置标题，有两种方式：</p>

<p>第一种：通过在文字下方添加“=”和“-”，他们分别表示一级标题和二级标题。</p>

<p>第二种：在文字开头加上 “#”，通过“#”数量表示几级标题。（一共只有1~6级标题，1级标题字体最大）</p>

<h3 id="blockquote">2. 块注释（blockquote）</h3>

<p>通过在文字开头添加“&gt;”表示块注释。（当&gt;和文字之间添加五个blank时，块注释的文字会有变化。）</p>

<h3 id="section">3. 斜体</h3>

<p>将需要设置为斜体的文字两端使用1个“*”或者“_”夹起来</p>

<!--more-->

<h3 id="section-1">4. 粗体</h3>

<p>将需要设置为斜体的文字两端使用2个“*”或者“_”夹起来</p>

<h3 id="section-2">5. 无序列表</h3>

<p>在文字开头添加(<em>, +, and -)实现无序列表。但是要注意在(</em>, +, and -)和文字之间需要添加空格。（建议：一个文档中只是用一种无序列表的表示方式）</p>

<h3 id="section-3">6. 有序列表</h3>

<p>使用数字后面跟上句号。（还要有空格）</p>

<h3 id="links">7. 链接（Links）</h3>

<p>Markdown中有两种方式，实现链接，分别为内联方式和引用方式。</p>

<p>内联方式：</p>

<pre><code>This is an [example link](http://example.com/).
</code></pre>

<p>引用方式：</p>

<pre><code>I get 10 times more traffic from [Google][1] than from [Yahoo][2] or [MSN][3].  

[1]: http://google.com/        "Google" 
[2]: http://search.yahoo.com/  "Yahoo Search" 
[3]: http://search.msn.com/    "MSN Search"
</code></pre>

<h3 id="images">8. 图片（Images）</h3>

<p>图片的处理方式和链接的处理方式，非常的类似。</p>

<p>内联方式：</p>

<pre><code>	![alt text](/path/to/img.jpg "Title")
</code></pre>

<p>引用方式：</p>

<pre><code>	![alt text][id] 

	[id]: /path/to/img.jpg "Title"
</code></pre>

<h3 id="htmlcode">9. 代码（HTML中所谓的Code）</h3>

<p>实现方式有两种：</p>

<p>第一种：简单文字出现一个代码框。</p>

<pre><code>`&lt;blockquote&gt;`。（`不是单引号而是左上角的ESC下面~中的`）
</code></pre>

<p>第二种：大片文字需要实现代码框。</p>

<pre><code>使用Tab和四个空格。
</code></pre>

<h3 id="footnote">10. 脚注（footnote）</h3>

<p>实现方式如下：</p>

<pre><code>hello[^hello]

[^hello]: hi
</code></pre>

<h3 id="section-4">11. 下划线</h3>

<p>在空白行下方添加三条“-”横线。（前面讲过在文字下方添加“-”，实现的2级标题）</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress搭建教程]]></title>
    <link href="http://helloyokoy.github.io/blog/octopressda-jian-jiao-cheng/"/>
    <updated>2014-06-08T21:00:18+08:00</updated>
    <id>http://helloyokoy.github.io/blog/octopressda-jian-jiao-cheng</id>
    <content type="html"><![CDATA[<h4 id="octopress">1.安装Octopress</h4>

<pre><code>git clone git://github.com/imathis/octopress.git octopress
cd octopress
bundle update    # 安装依赖的组件
rake install     # 安装默认的Octopress主题
</code></pre>

<h4 id="git">2.配置Git</h4>

<p>值得注意的是这里git的origin已经存在，并且指向octopress的master分支的，这里为了方便进行了更改：</p>

<pre><code>git remote rm origin
git remote add origin git@github.io:helloyokoy/stormzhang.github.com.git
git remote add octopress git://github.com/imathis/octopress.git  # 为了octopress的升级而添加
</code></pre>

<!--more-->

<h4 id="github">3.配置github</h4>

<p>在github上创建一个仓库，注意仓库名称要以下这种格式yourname.github.io，这样代码发布后自动这个url就可以访问了（此处一定要注意哦，我刚开始没注意，死活没得到想要的效果）。</p>

<p>例如你的 GitHub 帐号是 jack 就将 Repository 命名为 jack.github.io， 完成后会得到一组 GitHub Pages URL http://yourname.github.io/ (注意不能用 https协议，必须用 http协议)。</p>

<p>设定 GitHub Pages</p>

<pre><code>rake setup_github_pages
以上执行后会要求 read/write url for repository ：
</code></pre>

<p>git@github.com:yourname/yourname.github.io.git</p>

<pre><code>rake generate
rake deploy
</code></pre>

<h4 id="source--git">4.将 source 也加入 git</h4>

<pre><code>git add .
git commit -m 'initial source commit'
git push origin source
</code></pre>

<h4 id="octopress-1">5.更新 Octopress</h4>

<pre><code>git remote add octopress git://github.com/imathis/	octopress.git
git pull octopress master     # Get the latest Octopress
bundle install                # Keep gems updated
rake update_source            # update the template's 	source
rake update_style             # update the template's style
</code></pre>

<h4 id="section">6.发表新文章</h4>

<pre><code>rake new_post["新文章名称"]
rake preview
用浏览器打开 http://localhost:4000 就可以看到效果了。
</code></pre>

<h4 id="section-1">7.发布</h4>

<pre><code>rake gen_deploy
rake deploy                 #若发布后无效果可试试此命令
</code></pre>
]]></content>
  </entry>
  
</feed>
